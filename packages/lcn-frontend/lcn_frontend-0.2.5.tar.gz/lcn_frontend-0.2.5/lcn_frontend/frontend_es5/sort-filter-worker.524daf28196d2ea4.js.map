{"version":3,"file":"sort-filter-worker.524daf28196d2ea4.js","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/common/string/compare.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/string/strip-diacritics.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/data-table/sort-filter-worker.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\n\nconst collator = memoizeOne(\n  (language: string | undefined) => new Intl.Collator(language)\n);\n\nconst caseInsensitiveCollator = memoizeOne(\n  (language: string | undefined) =>\n    new Intl.Collator(language, { sensitivity: \"accent\" })\n);\n\nconst fallbackStringCompare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const stringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return collator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a, b);\n};\n\nexport const caseInsensitiveStringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return caseInsensitiveCollator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a.toLowerCase(), b.toLowerCase());\n};\n","export const stripDiacritics = (str: string) =>\n  str.normalize(\"NFD\").replace(/[\\u0300-\\u036F]/g, \"\");\n","import { expose } from \"comlink\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { stripDiacritics } from \"../../common/string/strip-diacritics\";\nimport type {\n  ClonedDataTableColumnData,\n  DataTableRowData,\n  SortableColumnContainer,\n  SortingDirection,\n} from \"./ha-data-table\";\n\nconst filterData = (\n  data: DataTableRowData[],\n  columns: SortableColumnContainer,\n  filter: string\n) => {\n  filter = stripDiacritics(filter.toLowerCase());\n  return data.filter((row) =>\n    Object.entries(columns).some((columnEntry) => {\n      const [key, column] = columnEntry;\n      if (column.filterable) {\n        const value = String(\n          column.filterKey\n            ? row[column.valueColumn || key][column.filterKey]\n            : row[column.valueColumn || key]\n        );\n\n        if (stripDiacritics(value).toLowerCase().includes(filter)) {\n          return true;\n        }\n      }\n      return false;\n    })\n  );\n};\n\nconst sortData = (\n  data: DataTableRowData[],\n  column: ClonedDataTableColumnData,\n  direction: SortingDirection,\n  sortColumn: string,\n  language?: string\n) =>\n  data.sort((a, b) => {\n    let sort = 1;\n    if (direction === \"desc\") {\n      sort = -1;\n    }\n\n    let valA = column.filterKey\n      ? a[column.valueColumn || sortColumn][column.filterKey]\n      : a[column.valueColumn || sortColumn];\n\n    let valB = column.filterKey\n      ? b[column.valueColumn || sortColumn][column.filterKey]\n      : b[column.valueColumn || sortColumn];\n\n    if (column.type === \"numeric\") {\n      valA = isNaN(valA) ? undefined : Number(valA);\n      valB = isNaN(valB) ? undefined : Number(valB);\n    } else if (typeof valA === \"string\" && typeof valB === \"string\") {\n      return sort * stringCompare(valA, valB, language);\n    }\n\n    // Ensure \"undefined\" and \"null\" are always sorted to the bottom\n    if (valA == null && valB != null) {\n      return 1;\n    }\n    if (valB == null && valA != null) {\n      return -1;\n    }\n\n    if (valA < valB) {\n      return sort * -1;\n    }\n    if (valA > valB) {\n      return sort * 1;\n    }\n    return 0;\n  });\n\nconst api = {\n  filterData,\n  sortData,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"names":["collator","memoizeOne","language","Intl","Collator","fallbackStringCompare","sensitivity","a","b","stripDiacritics","str","normalize","replace","api","filterData","data","columns","filter","toLowerCase","row","Object","entries","some","columnEntry","key","column","filterable","value","String","filterKey","valueColumn","includes","sortData","direction","sortColumn","sort","valA","valB","type","isNaN","undefined","Number","stringCompare","compare","expose"],"mappings":"0KAEA,MAAMA,GAAWC,EAAAA,EAAAA,IACdC,GAAiC,IAAIC,KAAKC,SAASF,KAQhDG,IAL0BJ,EAAAA,EAAAA,IAC7BC,GACC,IAAIC,KAAKC,SAASF,EAAU,CAAEI,YAAa,aAGjBD,CAACE,EAAWC,IACpCD,EAAIC,GACE,EAEND,EAAIC,EACC,EAGF,G,sBCnBF,MAAMC,EAAmBC,GAC9BA,EAAIC,UAAU,OAAOC,QAAQ,mBAAoB,IC+E7CC,EAAM,CACVC,WAvEiBA,CACjBC,EACAC,EACAC,KAEAA,EAASR,EAAgBQ,EAAOC,eACzBH,EAAKE,QAAQE,GAClBC,OAAOC,QAAQL,GAASM,MAAMC,IAC5B,MAAOC,EAAKC,GAAUF,EACtB,GAAIE,EAAOC,WAAY,CACrB,MAAMC,EAAQC,OACZH,EAAOI,UACHV,EAAIM,EAAOK,aAAeN,GAAKC,EAAOI,WACtCV,EAAIM,EAAOK,aAAeN,IAGhC,GAAIf,EAAgBkB,GAAOT,cAAca,SAASd,GAChD,OAAO,CAEX,CACA,OAAO,CAAK,OAoDhBe,SA/CeA,CACfjB,EACAU,EACAQ,EACAC,EACAhC,IAEAa,EAAKoB,MAAK,CAAC5B,EAAGC,KACZ,IAAI2B,EAAO,EACO,SAAdF,IACFE,GAAQ,GAGV,IAAIC,EAAOX,EAAOI,UACdtB,EAAEkB,EAAOK,aAAeI,GAAYT,EAAOI,WAC3CtB,EAAEkB,EAAOK,aAAeI,GAExBG,EAAOZ,EAAOI,UACdrB,EAAEiB,EAAOK,aAAeI,GAAYT,EAAOI,WAC3CrB,EAAEiB,EAAOK,aAAeI,GAE5B,GAAoB,YAAhBT,EAAOa,KACTF,EAAOG,MAAMH,QAAQI,EAAYC,OAAOL,GACxCC,EAAOE,MAAMF,QAAQG,EAAYC,OAAOJ,QACnC,GAAoB,iBAATD,GAAqC,iBAATC,EAC5C,OAAOF,EFtCgBO,EAC3BnC,EACAC,EACAN,IAGQ,OAAJC,WAAI,IAAJA,MAAAA,KAAMC,SACDJ,EAASE,GAAUyC,QAAQpC,EAAGC,GAGhCH,EAAsBE,EAAGC,GE4BdkC,CAAcN,EAAMC,EAAMnC,GAI1C,OAAY,MAARkC,GAAwB,MAARC,EACX,EAEG,MAARA,GAAwB,MAARD,GACV,EAGNA,EAAOC,GACM,EAARF,EAELC,EAAOC,EACK,EAAPF,EAEF,CAAC,MAUZS,EAAAA,EAAAA,IAAO/B,E"}