{"version":3,"file":"883.5e7b5d93e325d37c.js","sources":["webpack://lcn-frontend/../../src/layouts/shared/SizeCache.ts","webpack://lcn-frontend/../../src/layouts/shared/BaseLayout.ts","webpack://lcn-frontend/../src/layouts/flow.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n"],"names":["SizeCache","constructor","config","_map","Map","_roundAverageSize","totalSize","roundAverageSize","this","set","index","value","prev","get","averageSize","size","average","Math","round","getSize","clear","dim1","direction","BaseLayout","_getDefaultConfig","hostSink","_latestCoords","left","top","_direction","_viewportSize","width","height","totalScrollSize","offsetWithinScroller","_pendingReflow","_pendingLayoutUpdate","_pin","_firstVisible","_lastVisible","_physicalMin","_physicalMax","_first","_last","_sizeDim","_secondarySizeDim","_positionDim","_secondaryPositionDim","_scrollPosition","_scrollError","_items","_scrollSize","_overhang","_hostSink","Promise","resolve","then","Object","assign","items","_setItems","_scheduleReflow","dir","_triggerReflow","viewportSize","dims","_viewDim1","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","coords","oldPos","abs","reflowIfNeeded","force","_reflow","pin","options","block","max","min","length","_clampScrollPosition","val","unpin","_sendUnpinnedMessage","_updateLayout","_updateScrollSize","_setPositionFromPin","_getActiveItems","_updateVisibleIndices","_sendStateChangedMessage","lastScrollPosition","_calculateScrollIntoViewPosition","itemStartPosition","_getItemPosition","scrollPosition","itemSize","_getItemSize","itemEndPosition","currentScrollPosition","getScrollIntoViewCoordinates","type","_sendVisibilityChangedMessage","firstVisible","lastVisible","childPositions","idx","message","scrollSize","range","first","last","scrollError","_num","emit","flow","FlowLayout","leadingMargin","trailingMargin","offset","collapseMargins","a","b","m","sort","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","update","metrics","marginsToUpdate","Set","keys","forEach","key","k","Number","add","_this$_metricsCache$g","_this$_metricsCache$g2","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","_this$_metricsCache$g3","getChildSize","getMarginSize","_itemSize","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","measureChildren","updateItemSizes","sizes","_getPhysicalItem","_this$_newPhysicalIte","_getSize","_getAverageSize","_estimatePosition","c","delta","pos","_getPosition","_this$_metricsCache$g4","item","_calculateAnchor","lower","upper","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","candidateIdx","cMax","Infinity","_clearItems","_getItems","_this$_metricsCache$g5","_this$_metricsCache$g6","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","margin","extentErr","_calculateError","super","_resetReflowState","_this$_metricsCache$g7","_viewDim2Changed"],"mappings":"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"}