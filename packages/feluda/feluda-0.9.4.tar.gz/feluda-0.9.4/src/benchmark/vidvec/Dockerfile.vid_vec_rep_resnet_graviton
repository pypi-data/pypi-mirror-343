FROM --platform=$TARGETPLATFORM python:3.11-slim-bullseye@sha256:47863f26a5f2e0bfa903e7b658355940250979bd555b5e4f9f25da81647daff8 AS base
ARG UID
ARG GID

RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y \
    --no-install-recommends gcc build-essential \
    --no-install-recommends libgl1-mesa-glx libglib2.0-0 \
    --no-install-recommends python3-dev

# Set python user
RUN groupadd -g $GID python \
    && useradd --create-home -r -u $UID -g python python \
    && mkdir /usr/app \
    && chown -R python:python /usr/app
WORKDIR /usr/app

# Set venv
RUN python -m venv /usr/app/venv && chown -R python:python /usr/app/venv
ENV PATH="/usr/app/venv/bin:$PATH"

# base requirements file
COPY --chown=python:python base_requirements.txt /usr/app/base_requirements.txt
RUN pip install --no-cache-dir --require-hashes --no-deps -r /usr/app/base_requirements.txt

### AWS Graviton Optimization ###

# Graviton3(E) (e.g. c7g, c7gn and Hpc7g instances) supports BF16 format for ML acceleration. This can be enabled in oneDNN by setting the below environment variable
ENV DNNL_DEFAULT_FPMATH_MODE=BF16

# Enable primitive caching to avoid the redundant primitive allocation
# latency overhead. Please note this caching feature increases the
# memory footprint. Tune this cache capacity to a lower value to
# reduce the additional memory requirement.
ENV LRU_CACHE_CAPACITY=1024

# Enable Transparent huge page allocations from PyTorch C10 allocator
ENV THP_MEM_ALLOC_ENABLE=1

# Make sure the openmp threads are distributed across all the processes for multi process applications to avoid over subscription for the vcpus. For example if there is a single application process, then num_processes should be set to '1' so that all the vcpus are assigned to it with one-to-one mapping to omp threads
# RUN num_vcpus=8
# RUN num_processes=1
# RUN temp = $((1 > ($num_vcpus/$num_processes) ? 1 : ($num_vcpus/$num_processes)))
ENV OMP_NUM_THREADS=1
ENV OMP_PROC_BIND=false
ENV OMP_PLACES=cores
###

# video requirments file
COPY --chown=python:python ./core/operators/vid_vec_rep_resnet_requirements.txt /usr/app/core/operators/vid_vec_rep_resnet_requirements.txt
RUN pip install --no-cache-dir --require-hashes --no-deps -r /usr/app/core/operators/vid_vec_rep_resnet_requirements.txt
# video vec file
COPY --chown=python:python ./core/operators/vid_vec_rep_resnet.py /usr/app/core/operators/vid_vec_rep_resnet.py
# video vec test file
COPY --chown=python:python ./core/operators/sample_data/sample-cat-video.mp4 /usr/app/core/operators/sample_data/sample-cat-video.mp4
COPY --chown=python:python ./core/operators/test_vid_vec_rep_resnet.py /usr/app/core/operators/test_vid_vec_rep_resnet.py
# media factory files
COPY --chown=python:python ./core/models/ /usr/app/core/models/
# benchmark files
COPY --chown=python:python ./benchmark/vidvec/ /usr/app/benchmark/vidvec/
RUN chmod +x ./benchmark/vidvec/*.sh
# main benchmark file
COPY --chown=python:python ./benchmark/benchmark-video.sh /usr/app/benchmark/benchmark-video.sh
RUN chmod +x benchmark/benchmark-video.sh

RUN apt-get purge -y --auto-remove \
    gcc build-essential \
    libgl1-mesa-glx libglib2.0-0 \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends vim zsh wget

# dev requirements file
COPY --chown=python:python ./benchmark/vidvec/dev_requirements.txt /usr/app/benchmark/vidvec/dev_requirements.txt
RUN pip install --no-cache-dir --require-hashes --no-deps -r /usr/app/benchmark/vidvec/dev_requirements.txt

USER python:python
CMD tail -f /dev/null
