### BUILDER IMAGE ###
FROM --platform=$TARGETPLATFORM python:3.11-slim-bullseye@sha256:47863f26a5f2e0bfa903e7b658355940250979bd555b5e4f9f25da81647daff8 AS builder
ARG UID
ARG GID

# Fetch OS packages updates, upgrade packages, and install packages required for build
RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y \
    --no-install-recommends gcc build-essential \
    --no-install-recommends libgl1-mesa-glx libglib2.0-0 \
    --no-install-recommends python3-dev

# Set python user
RUN groupadd -g $GID python \
    && useradd --create-home -r -u $UID -g python python \
    && mkdir /home/python/app \
    && chown -R python:python /home/python/app/
# Set working dir
WORKDIR /home/python/app

# Create venv and change ownership recursively
RUN python -m venv /home/python/app/venv \
    && chown -R python:python /home/python/app/venv
# Set venv in path
ENV PATH="/home/python/app/venv/bin:$PATH"

# Copy base, core and operator requirements
COPY --chown=python:python base_requirements.txt /home/python/app/base_requirements.txt
COPY --chown=python:python requirements.txt /home/python/app/requirements.txt
COPY --chown=python:python ./core/operators/audio_vec_embedding_requirements.txt /home/python/app/core/operators/audio_vec_embedding_requirements.txt

# Run pip install
RUN pip install --no-cache-dir --require-hashes --no-deps -r /home/python/app/base_requirements.txt \
    && pip install --no-cache-dir --require-hashes --no-deps -r /home/python/app/requirements.txt \
    && pip install --no-cache-dir --require-hashes --no-deps -r /home/python/app/core/operators/audio_vec_embedding_requirements.txt

#####################################



### PRODUCTION IMAGE ###
FROM --platform=$TARGETPLATFORM python:3.11-slim-bullseye@sha256:47863f26a5f2e0bfa903e7b658355940250979bd555b5e4f9f25da81647daff8 AS production
ARG UID
ARG GID

# Update image, install required utils, and remove cache
RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y --no-install-recommends vim zsh curl wget \
    && rm -rf /var/lib/apt/lists/*

# Set python group and user, create home dir, create app dir, change ownership of app to user
RUN groupadd -g $GID python \
    && useradd --create-home -r -u $UID -g python python \
    && mkdir /home/python/app \
    && chown -R python:python /home/python/app/

# Set working dir
WORKDIR /home/python/app

# Copy output from builder stage
COPY --from=builder /home/python/app /home/python/app

# Copy all files and change ownership to unprivileged user
COPY --chown=python:python . /home/python/app

# Set venv path
ENV PATH="/home/python/app/venv/bin:$PATH"

### AWS Graviton Optimization ###

# Graviton3(E) (e.g. c7g, c7gn and Hpc7g instances) supports BF16 format for ML acceleration. This can be enabled in oneDNN by setting the below environment variable
ENV DNNL_DEFAULT_FPMATH_MODE=BF16

# Enable primitive caching to avoid the redundant primitive allocation
# latency overhead. Please note this caching feature increases the
# memory footprint. Tune this cache capacity to a lower value to
# reduce the additional memory requirement.
ENV LRU_CACHE_CAPACITY=1024

# Enable Transparent huge page allocations from PyTorch C10 allocator
ENV THP_MEM_ALLOC_ENABLE=1

# Make sure the openmp threads are distributed across all the processes for multi process applications to avoid over subscription for the vcpus. For example if there is a single application process, then num_processes should be set to '1' so that all the vcpus are assigned to it with one-to-one mapping to omp threads
# RUN num_vcpus=8
# RUN num_processes=1
# RUN temp = $((1 > ($num_vcpus/$num_processes) ? 1 : ($num_vcpus/$num_processes)))
ENV OMP_NUM_THREADS=1
ENV OMP_PROC_BIND=false
ENV OMP_PLACES=cores
###

# Set unprivileged user with group membership
USER python:python

#################################
