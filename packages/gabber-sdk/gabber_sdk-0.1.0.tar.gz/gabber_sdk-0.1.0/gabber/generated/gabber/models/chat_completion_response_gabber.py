# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber.models.chat_completion_response_gabber_message_data import ChatCompletionResponseGabberMessageData
from gabber.generated.gabber.models.context_advanced_memory_query_result import ContextAdvancedMemoryQueryResult
from gabber.generated.gabber.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionResponseGabber(BaseModel):
    """
    Gabber-specific fields
    """ # noqa: E501
    usage: List[Usage] = Field(description="Gabber usage for this request")
    message_data: List[ChatCompletionResponseGabberMessageData]
    advanced_memory: Optional[ContextAdvancedMemoryQueryResult] = None
    __properties: ClassVar[List[str]] = ["usage", "message_data", "advanced_memory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionResponseGabber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage (list)
        _items = []
        if self.usage:
            for _item_usage in self.usage:
                if _item_usage:
                    _items.append(_item_usage.to_dict())
            _dict['usage'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in message_data (list)
        _items = []
        if self.message_data:
            for _item_message_data in self.message_data:
                if _item_message_data:
                    _items.append(_item_message_data.to_dict())
            _dict['message_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of advanced_memory
        if self.advanced_memory:
            _dict['advanced_memory'] = self.advanced_memory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionResponseGabber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usage": [Usage.from_dict(_item) for _item in obj["usage"]] if obj.get("usage") is not None else None,
            "message_data": [ChatCompletionResponseGabberMessageData.from_dict(_item) for _item in obj["message_data"]] if obj.get("message_data") is not None else None,
            "advanced_memory": ContextAdvancedMemoryQueryResult.from_dict(obj["advanced_memory"]) if obj.get("advanced_memory") is not None else None
        })
        return _obj


