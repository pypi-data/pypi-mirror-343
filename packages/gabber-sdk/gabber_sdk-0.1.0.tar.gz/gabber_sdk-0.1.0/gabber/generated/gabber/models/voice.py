# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from gabber.generated.gabber.models.voice_pricing import VoicePricing
from gabber.generated.gabber.models.voice_tag import VoiceTag
from typing import Optional, Set
from typing_extensions import Self

class Voice(BaseModel):
    """
    Voice
    """ # noqa: E501
    created_at: datetime
    id: StrictStr
    name: StrictStr
    language: StrictStr
    service: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    voice: Optional[StrictStr] = None
    embeddings: Optional[List[Union[StrictFloat, StrictInt]]] = None
    cartesia_voice_id: Optional[StrictStr] = None
    elevenlabs_voice_id: Optional[StrictStr] = None
    project: Optional[StrictStr] = None
    human: Optional[StrictStr] = None
    preview_url: Optional[StrictStr] = None
    pricing: VoicePricing = Field(description="Pricing details for this voice")
    tags: List[VoiceTag] = Field(description="Tags associated with this voice")
    extra: Optional[Dict[str, Any]] = Field(default=None, description="Extra configuration for the voice. Usually this is for internal purposes.", alias="_extra")
    __properties: ClassVar[List[str]] = ["created_at", "id", "name", "language", "service", "model", "voice", "embeddings", "cartesia_voice_id", "elevenlabs_voice_id", "project", "human", "preview_url", "pricing", "tags", "_extra"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Voice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Voice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "language": obj.get("language"),
            "service": obj.get("service"),
            "model": obj.get("model"),
            "voice": obj.get("voice"),
            "embeddings": obj.get("embeddings"),
            "cartesia_voice_id": obj.get("cartesia_voice_id"),
            "elevenlabs_voice_id": obj.get("elevenlabs_voice_id"),
            "project": obj.get("project"),
            "human": obj.get("human"),
            "preview_url": obj.get("preview_url"),
            "pricing": VoicePricing.from_dict(obj["pricing"]) if obj.get("pricing") is not None else None,
            "tags": [VoiceTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "_extra": obj.get("_extra")
        })
        return _obj


