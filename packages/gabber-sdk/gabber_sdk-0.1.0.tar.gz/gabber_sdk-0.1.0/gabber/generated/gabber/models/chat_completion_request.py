# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from gabber.generated.gabber.models.chat_completion_request_gabber import ChatCompletionRequestGabber
from gabber.generated.gabber.models.chat_completion_request_message import ChatCompletionRequestMessage
from gabber.generated.gabber.models.chat_completion_tool import ChatCompletionTool
from gabber.generated.gabber.models.chat_completion_tool_choice_option import ChatCompletionToolChoiceOption
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionRequest(BaseModel):
    """
    ChatCompletionRequest
    """ # noqa: E501
    messages: Annotated[List[ChatCompletionRequestMessage], Field(min_length=1)] = Field(description="Chat context")
    model: StrictStr = Field(description="Gabber llm_id")
    metadata: Optional[Dict[str, Any]] = None
    gabber: Optional[ChatCompletionRequestGabber] = None
    stream: Optional[StrictBool] = Field(default=False, description="If set, partial message deltas will be sent, like in ChatGPT. ")
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature for sampling from the model. Higher values mean more randomness. ")
    max_tokens: Optional[StrictInt] = Field(default=None, description="Maximum number of tokens to generate. Requests can be up to 4096 tokens. ")
    tools: Optional[List[ChatCompletionTool]] = Field(default=None, description="List of tools to call during the completion. Each tool will be called in the order they are listed. ")
    tool_choice: Optional[ChatCompletionToolChoiceOption] = None
    parallel_tool_calls: Optional[StrictBool] = Field(default=True, description="Whether to enable parallel function calling")
    __properties: ClassVar[List[str]] = ["messages", "model", "metadata", "gabber", "stream", "temperature", "max_tokens", "tools", "tool_choice", "parallel_tool_calls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of gabber
        if self.gabber:
            _dict['gabber'] = self.gabber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of tool_choice
        if self.tool_choice:
            _dict['tool_choice'] = self.tool_choice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messages": [ChatCompletionRequestMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "model": obj.get("model"),
            "metadata": obj.get("metadata"),
            "gabber": ChatCompletionRequestGabber.from_dict(obj["gabber"]) if obj.get("gabber") is not None else None,
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "temperature": obj.get("temperature"),
            "max_tokens": obj.get("max_tokens"),
            "tools": [ChatCompletionTool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "tool_choice": ChatCompletionToolChoiceOption.from_dict(obj["tool_choice"]) if obj.get("tool_choice") is not None else None,
            "parallel_tool_calls": obj.get("parallel_tool_calls") if obj.get("parallel_tool_calls") is not None else True
        })
        return _obj


