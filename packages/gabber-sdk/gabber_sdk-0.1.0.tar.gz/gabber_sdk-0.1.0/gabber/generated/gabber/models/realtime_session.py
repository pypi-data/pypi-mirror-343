# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber.models.realtime_session_config import RealtimeSessionConfig
from gabber.generated.gabber.models.realtime_session_data import RealtimeSessionData
from typing import Optional, Set
from typing_extensions import Self

class RealtimeSession(BaseModel):
    """
    RealtimeSession
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the RealtimeSession.")
    state: StrictStr = Field(description="The current state of the RealtimeSession.")
    created_at: datetime = Field(description="The time the RealtimeSession was created.")
    ended_at: Optional[datetime] = Field(default=None, description="The time the RealtimeSession ended.")
    project: StrictStr = Field(description="The project identifier.")
    human: Optional[StrictStr] = Field(default=None, description="The human identifier.")
    simulated: StrictBool = Field(description="Whether the session is simulated or not.")
    config: RealtimeSessionConfig
    data: List[RealtimeSessionData]
    extra: Optional[Dict[str, Any]] = Field(default=None, description="Extra configuration for the RealtimeSession. Usually this is for internal purposes.", alias="_extra")
    __properties: ClassVar[List[str]] = ["id", "state", "created_at", "ended_at", "project", "human", "simulated", "config", "data", "_extra"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ended', 'in_progress', 'not_started']):
            raise ValueError("must be one of enum values ('ended', 'in_progress', 'not_started')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RealtimeSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RealtimeSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "created_at": obj.get("created_at"),
            "ended_at": obj.get("ended_at"),
            "project": obj.get("project"),
            "human": obj.get("human"),
            "simulated": obj.get("simulated"),
            "config": RealtimeSessionConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "data": [RealtimeSessionData.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "_extra": obj.get("_extra")
        })
        return _obj


