# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.list_voices200_response import ListVoices200Response

class TestListVoices200Response(unittest.TestCase):
    """ListVoices200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListVoices200Response:
        """Test ListVoices200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListVoices200Response`
        """
        model = ListVoices200Response()
        if include_optional:
            return ListVoices200Response(
                next_page = '',
                total_count = 56,
                values = [
                    gabber.generated.gabber.models.voice.Voice(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        name = '', 
                        language = '', 
                        service = '', 
                        model = '', 
                        voice = '', 
                        embeddings = [
                            1.337
                            ], 
                        cartesia_voice_id = '', 
                        elevenlabs_voice_id = '', 
                        project = '', 
                        human = '', 
                        preview_url = '', 
                        pricing = gabber.generated.gabber.models.voice_pricing.VoicePricing(
                            price_per_second = '', 
                            currency = '', 
                            product_name = '', ), 
                        tags = [
                            gabber.generated.gabber.models.voice_tag.VoiceTag(
                                name = '', 
                                human_name = '', )
                            ], 
                        _extra = gabber.generated.gabber.models._extra._extra(), )
                    ]
            )
        else:
            return ListVoices200Response(
                next_page = '',
                total_count = 56,
                values = [
                    gabber.generated.gabber.models.voice.Voice(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        name = '', 
                        language = '', 
                        service = '', 
                        model = '', 
                        voice = '', 
                        embeddings = [
                            1.337
                            ], 
                        cartesia_voice_id = '', 
                        elevenlabs_voice_id = '', 
                        project = '', 
                        human = '', 
                        preview_url = '', 
                        pricing = gabber.generated.gabber.models.voice_pricing.VoicePricing(
                            price_per_second = '', 
                            currency = '', 
                            product_name = '', ), 
                        tags = [
                            gabber.generated.gabber.models.voice_tag.VoiceTag(
                                name = '', 
                                human_name = '', )
                            ], 
                        _extra = gabber.generated.gabber.models._extra._extra(), )
                    ],
        )
        """

    def testListVoices200Response(self):
        """Test ListVoices200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
