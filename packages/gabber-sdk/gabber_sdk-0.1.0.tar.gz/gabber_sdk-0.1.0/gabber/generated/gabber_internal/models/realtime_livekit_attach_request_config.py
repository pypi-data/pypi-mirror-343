# coding: utf-8

"""
    Session API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_general import AttachLivekitRoom200ResponseConfigGeneral
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_input import AttachLivekitRoom200ResponseConfigInput
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_output import AttachLivekitRoom200ResponseConfigOutput
from gabber.generated.gabber_internal.models.realtime_livekit_attach_request_config_generative import RealtimeLivekitAttachRequestConfigGenerative
from typing import Optional, Set
from typing_extensions import Self

class RealtimeLivekitAttachRequestConfig(BaseModel):
    """
    RealtimeLivekitAttachRequestConfig
    """ # noqa: E501
    general: AttachLivekitRoom200ResponseConfigGeneral
    input: AttachLivekitRoom200ResponseConfigInput
    generative: RealtimeLivekitAttachRequestConfigGenerative
    output: AttachLivekitRoom200ResponseConfigOutput
    __properties: ClassVar[List[str]] = ["general", "input", "generative", "output"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RealtimeLivekitAttachRequestConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of general
        if self.general:
            _dict['general'] = self.general.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of generative
        if self.generative:
            _dict['generative'] = self.generative.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RealtimeLivekitAttachRequestConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "general": AttachLivekitRoom200ResponseConfigGeneral.from_dict(obj["general"]) if obj.get("general") is not None else None,
            "input": AttachLivekitRoom200ResponseConfigInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "generative": RealtimeLivekitAttachRequestConfigGenerative.from_dict(obj["generative"]) if obj.get("generative") is not None else None,
            "output": AttachLivekitRoom200ResponseConfigOutput.from_dict(obj["output"]) if obj.get("output") is not None else None
        })
        return _obj


