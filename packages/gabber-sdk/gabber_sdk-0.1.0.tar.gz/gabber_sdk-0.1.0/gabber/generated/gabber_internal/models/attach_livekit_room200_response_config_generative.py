# coding: utf-8

"""
    Session API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_context import AttachLivekitRoom200ResponseConfigGenerativeContext
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_llm import AttachLivekitRoom200ResponseConfigGenerativeLlm
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_persona import AttachLivekitRoom200ResponseConfigGenerativePersona
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_scenario import AttachLivekitRoom200ResponseConfigGenerativeScenario
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_tool_definitions_inner import AttachLivekitRoom200ResponseConfigGenerativeToolDefinitionsInner
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_voice_override import AttachLivekitRoom200ResponseConfigGenerativeVoiceOverride
from typing import Optional, Set
from typing_extensions import Self

class AttachLivekitRoom200ResponseConfigGenerative(BaseModel):
    """
    Configuration for the generative AI in the RealtimeSession.
    """ # noqa: E501
    llm: AttachLivekitRoom200ResponseConfigGenerativeLlm
    voice_override: Optional[AttachLivekitRoom200ResponseConfigGenerativeVoiceOverride] = None
    persona: Optional[AttachLivekitRoom200ResponseConfigGenerativePersona] = None
    scenario: Optional[AttachLivekitRoom200ResponseConfigGenerativeScenario] = None
    context: AttachLivekitRoom200ResponseConfigGenerativeContext
    tool_definitions: List[AttachLivekitRoom200ResponseConfigGenerativeToolDefinitionsInner] = Field(description="The tool definitions to use for the generative AI.")
    extra: Optional[Dict[str, Any]] = Field(default=None, description="Extra configuration for the generative AI. Usually this is for internal purposes.", alias="_extra")
    __properties: ClassVar[List[str]] = ["llm", "voice_override", "persona", "scenario", "context", "tool_definitions", "_extra"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachLivekitRoom200ResponseConfigGenerative from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of llm
        if self.llm:
            _dict['llm'] = self.llm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_override
        if self.voice_override:
            _dict['voice_override'] = self.voice_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persona
        if self.persona:
            _dict['persona'] = self.persona.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scenario
        if self.scenario:
            _dict['scenario'] = self.scenario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tool_definitions (list)
        _items = []
        if self.tool_definitions:
            for _item_tool_definitions in self.tool_definitions:
                if _item_tool_definitions:
                    _items.append(_item_tool_definitions.to_dict())
            _dict['tool_definitions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachLivekitRoom200ResponseConfigGenerative from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "llm": AttachLivekitRoom200ResponseConfigGenerativeLlm.from_dict(obj["llm"]) if obj.get("llm") is not None else None,
            "voice_override": AttachLivekitRoom200ResponseConfigGenerativeVoiceOverride.from_dict(obj["voice_override"]) if obj.get("voice_override") is not None else None,
            "persona": AttachLivekitRoom200ResponseConfigGenerativePersona.from_dict(obj["persona"]) if obj.get("persona") is not None else None,
            "scenario": AttachLivekitRoom200ResponseConfigGenerativeScenario.from_dict(obj["scenario"]) if obj.get("scenario") is not None else None,
            "context": AttachLivekitRoom200ResponseConfigGenerativeContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "tool_definitions": [AttachLivekitRoom200ResponseConfigGenerativeToolDefinitionsInner.from_dict(_item) for _item in obj["tool_definitions"]] if obj.get("tool_definitions") is not None else None,
            "_extra": obj.get("_extra")
        })
        return _obj


