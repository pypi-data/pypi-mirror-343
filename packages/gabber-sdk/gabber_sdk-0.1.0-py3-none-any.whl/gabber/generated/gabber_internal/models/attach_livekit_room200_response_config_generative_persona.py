# coding: utf-8

"""
    Session API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber_internal.models.attach_livekit_room200_response_config_generative_persona_tags_inner import AttachLivekitRoom200ResponseConfigGenerativePersonaTagsInner
from typing import Optional, Set
from typing_extensions import Self

class AttachLivekitRoom200ResponseConfigGenerativePersona(BaseModel):
    """
    AttachLivekitRoom200ResponseConfigGenerativePersona
    """ # noqa: E501
    created_at: datetime
    description: StrictStr
    id: StrictStr
    image_url: Optional[StrictStr] = None
    name: StrictStr
    project: StrictStr
    human: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    tags: Optional[List[AttachLivekitRoom200ResponseConfigGenerativePersonaTagsInner]] = None
    voice: StrictStr
    __properties: ClassVar[List[str]] = ["created_at", "description", "id", "image_url", "name", "project", "human", "gender", "tags", "voice"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['male', 'female']):
            raise ValueError("must be one of enum values ('male', 'female')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachLivekitRoom200ResponseConfigGenerativePersona from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachLivekitRoom200ResponseConfigGenerativePersona from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "image_url": obj.get("image_url"),
            "name": obj.get("name"),
            "project": obj.get("project"),
            "human": obj.get("human"),
            "gender": obj.get("gender"),
            "tags": [AttachLivekitRoom200ResponseConfigGenerativePersonaTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "voice": obj.get("voice")
        })
        return _obj


