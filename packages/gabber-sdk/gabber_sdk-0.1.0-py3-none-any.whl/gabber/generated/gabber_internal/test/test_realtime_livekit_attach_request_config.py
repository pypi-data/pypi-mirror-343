# coding: utf-8

"""
    Session API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber_internal.models.realtime_livekit_attach_request_config import RealtimeLivekitAttachRequestConfig

class TestRealtimeLivekitAttachRequestConfig(unittest.TestCase):
    """RealtimeLivekitAttachRequestConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RealtimeLivekitAttachRequestConfig:
        """Test RealtimeLivekitAttachRequestConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RealtimeLivekitAttachRequestConfig`
        """
        model = RealtimeLivekitAttachRequestConfig()
        if include_optional:
            return RealtimeLivekitAttachRequestConfig(
                general = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_general.attachLivekitRoom_200_response_config_general(
                    time_limit_s = 56, 
                    save_messages = True, ),
                input = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_input.attachLivekitRoom_200_response_config_input(
                    interruptable = True, 
                    parallel_listening = True, ),
                generative = gabber.generated.gabber_internal.models.realtime_livekit_attach_request_config_generative.RealtimeLivekitAttachRequest_config_generative(
                    llm = '', 
                    voice_override = '', 
                    persona = '', 
                    scenario = '', 
                    context = '', 
                    tool_definitions = [
                        ''
                        ], 
                    _extra = { }, ),
                output = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_output.attachLivekitRoom_200_response_config_output(
                    stream_transcript = True, 
                    speech_synthesis_enabled = True, 
                    answer_message = '', )
            )
        else:
            return RealtimeLivekitAttachRequestConfig(
                general = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_general.attachLivekitRoom_200_response_config_general(
                    time_limit_s = 56, 
                    save_messages = True, ),
                input = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_input.attachLivekitRoom_200_response_config_input(
                    interruptable = True, 
                    parallel_listening = True, ),
                generative = gabber.generated.gabber_internal.models.realtime_livekit_attach_request_config_generative.RealtimeLivekitAttachRequest_config_generative(
                    llm = '', 
                    voice_override = '', 
                    persona = '', 
                    scenario = '', 
                    context = '', 
                    tool_definitions = [
                        ''
                        ], 
                    _extra = { }, ),
                output = gabber.generated.gabber_internal.models.attach_livekit_room_200_response_config_output.attachLivekitRoom_200_response_config_output(
                    stream_transcript = True, 
                    speech_synthesis_enabled = True, 
                    answer_message = '', ),
        )
        """

    def testRealtimeLivekitAttachRequestConfig(self):
        """Test RealtimeLivekitAttachRequestConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
