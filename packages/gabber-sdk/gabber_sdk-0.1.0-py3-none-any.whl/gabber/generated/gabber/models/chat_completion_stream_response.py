# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber.models.chat_completion_response_gabber import ChatCompletionResponseGabber
from gabber.generated.gabber.models.chat_completion_stream_response_choice import ChatCompletionStreamResponseChoice
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionStreamResponse(BaseModel):
    """
    Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    """ # noqa: E501
    id: StrictStr = Field(description="A unique identifier for the chat completion. Each chunk has the same ID.")
    choices: List[ChatCompletionStreamResponseChoice] = Field(description="A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the last chunk if you set `stream_options: {\"include_usage\": true}`. ")
    created: StrictInt = Field(description="The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.")
    model: StrictStr = Field(description="The model to generate the completion.")
    object: StrictStr = Field(description="The object type, which is always `chat.completion.chunk`.")
    gabber: Optional[ChatCompletionResponseGabber] = None
    __properties: ClassVar[List[str]] = ["id", "choices", "created", "model", "object", "gabber"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['chat.completion.chunk']):
            raise ValueError("must be one of enum values ('chat.completion.chunk')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionStreamResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in choices (list)
        _items = []
        if self.choices:
            for _item_choices in self.choices:
                if _item_choices:
                    _items.append(_item_choices.to_dict())
            _dict['choices'] = _items
        # override the default output from pydantic by calling `to_dict()` of gabber
        if self.gabber:
            _dict['gabber'] = self.gabber.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionStreamResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "choices": [ChatCompletionStreamResponseChoice.from_dict(_item) for _item in obj["choices"]] if obj.get("choices") is not None else None,
            "created": obj.get("created"),
            "model": obj.get("model"),
            "object": obj.get("object"),
            "gabber": ChatCompletionResponseGabber.from_dict(obj["gabber"]) if obj.get("gabber") is not None else None
        })
        return _obj


