# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gabber.generated.gabber.models.context_message_tool_call import ContextMessageToolCall
from typing import Optional, Set
from typing_extensions import Self

class ContextMessageCreateParams(BaseModel):
    """
    ContextMessageCreateParams
    """ # noqa: E501
    speaking_ended_at: Optional[datetime] = None
    speaking_started_at: Optional[datetime] = None
    role: StrictStr
    content: StrictStr
    tool_calls: Optional[List[ContextMessageToolCall]] = None
    advanced_memory: Optional[StrictBool] = Field(default=None, description="When set to true, gabber will use it's advanced memory system to generate responses.")
    __properties: ClassVar[List[str]] = ["speaking_ended_at", "speaking_started_at", "role", "content", "tool_calls", "advanced_memory"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['assistant', 'system', 'user', 'tool', 'custom']):
            raise ValueError("must be one of enum values ('assistant', 'system', 'user', 'tool', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContextMessageCreateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tool_calls (list)
        _items = []
        if self.tool_calls:
            for _item_tool_calls in self.tool_calls:
                if _item_tool_calls:
                    _items.append(_item_tool_calls.to_dict())
            _dict['tool_calls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContextMessageCreateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "speaking_ended_at": obj.get("speaking_ended_at"),
            "speaking_started_at": obj.get("speaking_started_at"),
            "role": obj.get("role"),
            "content": obj.get("content"),
            "tool_calls": [ContextMessageToolCall.from_dict(_item) for _item in obj["tool_calls"]] if obj.get("tool_calls") is not None else None,
            "advanced_memory": obj.get("advanced_memory")
        })
        return _obj


