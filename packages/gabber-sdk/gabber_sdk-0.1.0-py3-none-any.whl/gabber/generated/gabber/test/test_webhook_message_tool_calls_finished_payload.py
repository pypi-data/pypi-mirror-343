# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.webhook_message_tool_calls_finished_payload import WebhookMessageToolCallsFinishedPayload

class TestWebhookMessageToolCallsFinishedPayload(unittest.TestCase):
    """WebhookMessageToolCallsFinishedPayload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhookMessageToolCallsFinishedPayload:
        """Test WebhookMessageToolCallsFinishedPayload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhookMessageToolCallsFinishedPayload`
        """
        model = WebhookMessageToolCallsFinishedPayload()
        if include_optional:
            return WebhookMessageToolCallsFinishedPayload(
                realtime_session = '',
                group = '',
                tool_calls = [
                    gabber.generated.gabber.models.webhook_message_tool_call.WebhookMessageToolCall(
                        id = '', 
                        tool_definition_id = '', 
                        function = gabber.generated.gabber.models.webhook_message_tool_call_function.WebhookMessageToolCallFunction(
                            name = '', 
                            arguments = gabber.generated.gabber.models.arguments.arguments(), ), )
                    ],
                tool_call_results = [
                    gabber.generated.gabber.models.tool_call_result.ToolCallResult(
                        tool_call_id = '', 
                        tool_definition_id = '', 
                        response_string = '', 
                        error_message = '', 
                        code = 56, )
                    ]
            )
        else:
            return WebhookMessageToolCallsFinishedPayload(
                group = '',
                tool_calls = [
                    gabber.generated.gabber.models.webhook_message_tool_call.WebhookMessageToolCall(
                        id = '', 
                        tool_definition_id = '', 
                        function = gabber.generated.gabber.models.webhook_message_tool_call_function.WebhookMessageToolCallFunction(
                            name = '', 
                            arguments = gabber.generated.gabber.models.arguments.arguments(), ), )
                    ],
                tool_call_results = [
                    gabber.generated.gabber.models.tool_call_result.ToolCallResult(
                        tool_call_id = '', 
                        tool_definition_id = '', 
                        response_string = '', 
                        error_message = '', 
                        code = 56, )
                    ],
        )
        """

    def testWebhookMessageToolCallsFinishedPayload(self):
        """Test WebhookMessageToolCallsFinishedPayload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
