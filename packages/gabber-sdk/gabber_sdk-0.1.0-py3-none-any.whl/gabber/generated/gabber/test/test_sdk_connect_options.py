# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.sdk_connect_options import SDKConnectOptions

class TestSDKConnectOptions(unittest.TestCase):
    """SDKConnectOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SDKConnectOptions:
        """Test SDKConnectOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SDKConnectOptions`
        """
        model = SDKConnectOptions()
        if include_optional:
            return SDKConnectOptions(
                connection_details = gabber.generated.gabber.models.realtime_session_connection_details.RealtimeSessionConnectionDetails(
                    url = '', 
                    token = '', ),
                token = '',
                config = gabber.generated.gabber.models.realtime_session_config_create.RealtimeSessionConfigCreate(
                    general = gabber.generated.gabber.models.realtime_session_general_config.RealtimeSessionGeneralConfig(
                        time_limit_s = 56, 
                        save_messages = True, ), 
                    input = gabber.generated.gabber.models.realtime_session_input_config.RealtimeSessionInputConfig(
                        interruptable = True, 
                        parallel_listening = True, ), 
                    generative = gabber.generated.gabber.models.realtime_session_generative_config_create.RealtimeSessionGenerativeConfigCreate(
                        llm = '', 
                        voice_override = '', 
                        persona = '', 
                        scenario = '', 
                        context = '', 
                        tool_definitions = [
                            ''
                            ], 
                        _extra = gabber.generated.gabber.models._extra._extra(), ), 
                    output = gabber.generated.gabber.models.realtime_session_output_config.RealtimeSessionOutputConfig(
                        stream_transcript = True, 
                        speech_synthesis_enabled = True, 
                        answer_message = '', ), )
            )
        else:
            return SDKConnectOptions(
                connection_details = gabber.generated.gabber.models.realtime_session_connection_details.RealtimeSessionConnectionDetails(
                    url = '', 
                    token = '', ),
                token = '',
                config = gabber.generated.gabber.models.realtime_session_config_create.RealtimeSessionConfigCreate(
                    general = gabber.generated.gabber.models.realtime_session_general_config.RealtimeSessionGeneralConfig(
                        time_limit_s = 56, 
                        save_messages = True, ), 
                    input = gabber.generated.gabber.models.realtime_session_input_config.RealtimeSessionInputConfig(
                        interruptable = True, 
                        parallel_listening = True, ), 
                    generative = gabber.generated.gabber.models.realtime_session_generative_config_create.RealtimeSessionGenerativeConfigCreate(
                        llm = '', 
                        voice_override = '', 
                        persona = '', 
                        scenario = '', 
                        context = '', 
                        tool_definitions = [
                            ''
                            ], 
                        _extra = gabber.generated.gabber.models._extra._extra(), ), 
                    output = gabber.generated.gabber.models.realtime_session_output_config.RealtimeSessionOutputConfig(
                        stream_transcript = True, 
                        speech_synthesis_enabled = True, 
                        answer_message = '', ), ),
        )
        """

    def testSDKConnectOptions(self):
        """Test SDKConnectOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
