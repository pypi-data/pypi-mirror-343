# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.webhook_message_realtime_session_message_committed_payload import WebhookMessageRealtimeSessionMessageCommittedPayload

class TestWebhookMessageRealtimeSessionMessageCommittedPayload(unittest.TestCase):
    """WebhookMessageRealtimeSessionMessageCommittedPayload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhookMessageRealtimeSessionMessageCommittedPayload:
        """Test WebhookMessageRealtimeSessionMessageCommittedPayload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhookMessageRealtimeSessionMessageCommittedPayload`
        """
        model = WebhookMessageRealtimeSessionMessageCommittedPayload()
        if include_optional:
            return WebhookMessageRealtimeSessionMessageCommittedPayload(
                message = gabber.generated.gabber.models.context_message.ContextMessage(
                    id = '', 
                    speaking_ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    speaking_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    role = 'assistant', 
                    realtime_session = '', 
                    content = [
                        null
                        ], 
                    tool_calls = [
                        gabber.generated.gabber.models.context_message_tool_call.ContextMessageToolCall(
                            id = '', 
                            type = 'function', 
                            function = gabber.generated.gabber.models.context_message_tool_call_function.ContextMessageToolCallFunction(
                                name = '', 
                                arguments = gabber.generated.gabber.models.arguments.arguments(), ), )
                        ], ),
                realtime_session_id = ''
            )
        else:
            return WebhookMessageRealtimeSessionMessageCommittedPayload(
                message = gabber.generated.gabber.models.context_message.ContextMessage(
                    id = '', 
                    speaking_ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    speaking_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    role = 'assistant', 
                    realtime_session = '', 
                    content = [
                        null
                        ], 
                    tool_calls = [
                        gabber.generated.gabber.models.context_message_tool_call.ContextMessageToolCall(
                            id = '', 
                            type = 'function', 
                            function = gabber.generated.gabber.models.context_message_tool_call_function.ContextMessageToolCallFunction(
                                name = '', 
                                arguments = gabber.generated.gabber.models.arguments.arguments(), ), )
                        ], ),
        )
        """

    def testWebhookMessageRealtimeSessionMessageCommittedPayload(self):
        """Test WebhookMessageRealtimeSessionMessageCommittedPayload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
