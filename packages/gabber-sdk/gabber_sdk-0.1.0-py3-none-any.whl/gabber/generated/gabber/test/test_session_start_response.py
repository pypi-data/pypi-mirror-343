# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.session_start_response import SessionStartResponse

class TestSessionStartResponse(unittest.TestCase):
    """SessionStartResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SessionStartResponse:
        """Test SessionStartResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SessionStartResponse`
        """
        model = SessionStartResponse()
        if include_optional:
            return SessionStartResponse(
                session = gabber.generated.gabber.models.session.Session(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    livekit_room = '', 
                    metadata = null, 
                    persona = '', 
                    project = '', 
                    scenario = '', 
                    llm = '', 
                    state = 'ended', 
                    voice_override = '', 
                    time_limit_s = 56, ),
                persona = gabber.generated.gabber.models.persona.Persona(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    id = '', 
                    image_url = '', 
                    name = '', 
                    project = '', 
                    human = '', 
                    gender = 'male', 
                    tags = [
                        gabber.generated.gabber.models.persona_tags_inner.Persona_tags_inner(
                            human_name = '', 
                            name = '', )
                        ], 
                    voice = '', ),
                scenario = gabber.generated.gabber.models.scenario.Scenario(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    name = '', 
                    project = '', 
                    prompt = '', 
                    human = '', ),
                connection_details = gabber.generated.gabber.models.session_start_response_connection_details.SessionStartResponse_connection_details(
                    token = '', 
                    url = '', )
            )
        else:
            return SessionStartResponse(
                session = gabber.generated.gabber.models.session.Session(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    livekit_room = '', 
                    metadata = null, 
                    persona = '', 
                    project = '', 
                    scenario = '', 
                    llm = '', 
                    state = 'ended', 
                    voice_override = '', 
                    time_limit_s = 56, ),
                connection_details = gabber.generated.gabber.models.session_start_response_connection_details.SessionStartResponse_connection_details(
                    token = '', 
                    url = '', ),
        )
        """

    def testSessionStartResponse(self):
        """Test SessionStartResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
