# coding: utf-8

"""
    Gabber API Reference

    The Gabber API is a set of APIs that allow you to interact with the Gabber platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gabber.generated.gabber.models.chat_completion_request import ChatCompletionRequest

class TestChatCompletionRequest(unittest.TestCase):
    """ChatCompletionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatCompletionRequest:
        """Test ChatCompletionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatCompletionRequest`
        """
        model = ChatCompletionRequest()
        if include_optional:
            return ChatCompletionRequest(
                messages = [
                    null
                    ],
                model = '',
                metadata = None,
                gabber = gabber.generated.gabber.models.chat_completion_request_gabber.ChatCompletionRequestGabber(
                    voice = '', 
                    context = '', 
                    advanced_memory = True, ),
                stream = True,
                temperature = 1.337,
                max_tokens = 56,
                tools = [
                    gabber.generated.gabber.models.chat_completion_tool.ChatCompletionTool(
                        type = 'function', 
                        function = gabber.generated.gabber.models.function_object.FunctionObject(
                            description = '', 
                            name = '', 
                            parameters = gabber.generated.gabber.models.parameters.parameters(), 
                            strict = True, ), )
                    ],
                tool_choice = None,
                parallel_tool_calls = True
            )
        else:
            return ChatCompletionRequest(
                messages = [
                    null
                    ],
                model = '',
        )
        """

    def testChatCompletionRequest(self):
        """Test ChatCompletionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
