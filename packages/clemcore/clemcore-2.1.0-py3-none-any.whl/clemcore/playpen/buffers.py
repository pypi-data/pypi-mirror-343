from typing import List, Dict

from clemcore.clemgame import Player
from clemcore.playpen.envs.game_env import GameEnv
from clemcore.playpen.envs.branching_env import GameBranchingEnv


class RolloutBuffer:

    def __init__(self, game_env):
        self.game_env = game_env
        self.initial_prompts: Dict[Player, Dict] = {}  # initial prompts that are not given in the initial context

    def on_step(self, context, response, done, info):
        pass

    def on_done(self):
        pass

    def reset(self):
        pass

    def get_perspective_of(self, player: Player):
        pass  # todo


class StepRolloutBuffer(RolloutBuffer):
    """ This buffer can collect the trajectories generated by a game env """

    def __init__(self, game_env: GameEnv):
        assert isinstance(game_env, GameEnv), "StepRolloutBuffer can only be used with GameEnv"
        super().__init__(game_env)
        self.trajectories: List = None
        self.current_trajectory: int = None
        self.reset()

    def on_step(self, context, response, done, info):
        step = dict(context=context, response=response, done=done, info=info)
        self.trajectories[self.current_trajectory].append(step)

    def on_done(self):
        self.trajectories.append([])
        self.current_trajectory += 1

    def reset(self):
        self.trajectories = [[]]
        self.current_trajectory = 0


class BranchingRolloutBuffer(RolloutBuffer):
    """ This buffer can collect the trajectories generated by the branching env """

    def __init__(self, game_env: GameBranchingEnv):
        assert isinstance(game_env, GameBranchingEnv), "TreeRolloutBuffer can only be used with GameBranchingEnv"
        super().__init__(game_env)
        self.forest: List = None
        self.reset()

    def on_done(self):
        active_tree = self.game_env.get_active_tree()
        self.forest.append(active_tree)

    def reset(self):
        self.forest = []
