{% raw %}
{#
Copyright (c) 2025-present Snowplow Analytics Ltd. All rights reserved.
This program is licensed to you under the Snowplow Personal and Academic License Version 1.0,
and you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.
You may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/
#}

{{
  config(
    materialized='table',
    dist=var('snowplow__entity_key', 'domain_userid'),
    partition_by = snowplow_utils.get_value_by_target_type(bigquery_val = {
      "field": "last_event_tstamp",
      "data_type": "timestamp"
    }, databricks_val='last_event_date'),
    sql_header=snowplow_utils.set_query_tag(var('snowplow__query_tag', 'snowplow_dbt')),
  )
}}

{%- set lower_limit, upper_limit = get_limits_for_attributes() %}

with aggregations as (

  select 
    entity_key
{% endraw %}
    {% for attribute in lifetime_aggregates %}
      , {{ attribute['aggregation_type'] }}({% if attribute['aggregation_type'] == 'array_agg' %}distinct {% endif %}{{ attribute["daily_agg_column_name"] }}) as {{ attribute["column_name"] }}
    {% endfor %}
    {% for attribute in last_n_day_aggregates %}
      , {{ attribute['aggregation_type'] }}({% if attribute['aggregation_type'] == 'array_agg' %}distinct {% endif %}{% raw %}case when event_date >= {{dbt.dateadd('day', -{% endraw %}{{ attribute["period"] }}{% raw %}, upper_limit)}} then {% endraw %}{{ attribute["daily_agg_column_name"] }} end) as {{ attribute["column_name"] }}
    {% endfor %}

{% raw %}
  from {{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates')}}

  group by 1
  
)

, window_calculations as (
  
  select distinct
    entity_key
{% endraw %}
{% for attribute in first_value_attributes %}
  {% if attribute['period'] %}
    , first_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by entity_key
                order by last_event_tstamp ASC
                ROWS BETWEEN {{ attribute['period'] }} PRECEDING AND CURRENT ROW
            ) as {{ attribute['column_name'] }}
  {% else %}
    , first_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by entity_key
                order by last_event_tstamp ASC
            ) as {{ attribute['column_name'] }}
  {% endif %}
{% endfor %}
{% for attribute in last_value_attributes %}
  {% if attribute['period'] %}
    , last_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by entity_key
                order by last_event_tstamp ASC
                ROWS BETWEEN {{ attribute['period'] }} PRECEDING AND CURRENT ROW
            ) as {{ attribute['column_name'] }}
  {% else %}
    , last_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by entity_key
                order by last_event_tstamp ASC
            ) as {{ attribute['column_name'] }}
  {% endif %}
{% endfor %}
{% raw %}
  from {{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates')}}
  
)

select
    
  w.entity_key as {% endraw %}{{ entity_key }}{% raw %},
  current_timestamp() as valid_at_tstamp,
  cast({{ lower_limit }} as date) as lower_limit,
  cast({{ upper_limit }} as date) as upper_limit
{% endraw %}
  {% for attribute in first_value_attributes %}
    , w.{{ attribute['column_name'] }} 
  {%- endfor %}

  -- time window based attributes
  {% for attribute in last_n_day_aggregates %}
    , {{ attribute['column_name'] }}
  {% endfor %}
    
  -- lifetime based attributes
  {% for attribute in lifetime_aggregates %}
    , {{ attribute['column_name'] }}
  {%- endfor %}

  -- user lasts
  {% for attribute in last_value_attributes %}
    , w.{{ attribute['column_name'] }}
  {%- endfor %}

from aggregations as a

left join window_calculations as w
on a.entity_key = w.entity_key


