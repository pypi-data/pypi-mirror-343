from math import cos,sin,sqrt,pi
import opensees as ops
from opensees.units.english import ft

from deck_sections import deck_sections


abut = [
    [10779.297, 31606.976, 194.965*ft], # 1010
    [10935.542, 31809.096, 193.626*ft], # 1020
    [10623.052, 31404.856, 196.183*ft], # 1030
],[
    [33870.061, 27006.373, 188.346*ft], # 15010
    [34094.051, 27297.117, 188.604*ft], # 15020
    [33646.070, 26715.629, 188.089*ft], # 15030
    [33179.709, 25737.199, 198.822*ft], # 15040
    [33257.634, 25838.348, 198.650*ft], # 15050
    [33101.704, 25635.948, 198.994*ft], # 15060
]

bents = {
  2: [
    [11758.709, 31062.549, 140.750*ft], # 201
    [11758.709, 31062.549, 192.776*ft], # 202
    [11758.709, 31062.549, 196.770*ft], # 203
    [11675.713, 30944.873, 197.490*ft], # 204
    [11571.969, 30797.777, 198.390*ft], # 205
    [11571.969, 30797.777, 194.397*ft], # 206
    [11571.969, 30797.777, 140.750*ft], # 207
  ],
  3: [
    [13326.879, 30097.235, 140.000*ft], # 301
    [13326.879, 30097.235, 195.330*ft], # 302
    [13326.879, 30097.235, 199.570*ft], # 303
    [13227.933, 29932.695, 200.530*ft], # 304
    [12935.732, 29446.785, 203.370*ft], # 305
    [12935.732, 29446.785, 199.070*ft], # 306
    [12935.732, 29446.785, 126.000*ft], # 307
  ],
  4: [
    [15603.570, 29883.836, 137.000*ft], # 401
    [15603.570, 29883.836, 189.910*ft], # 402
    [15603.570, 29883.836, 197.700*ft], # 403
    [15120.738, 28901.035, 203.145*ft], # 404
    [14983.164, 28621.004, 204.705*ft], # 405
    [14983.164, 28621.004, 196.930*ft], # 406
    [14983.164, 28621.004, 119.000*ft], # 407
  ],
  5: [
    [17372.788, 28118.938, 131.000*ft], # 501
    [17372.788, 28118.938, 198.740*ft], # 502
    [17372.788, 28118.938, 204.004*ft], # 503
    [17308.901, 27950.657, 204.904*ft], # 504
    [17040.574, 27243.878, 208.684*ft], # 505
    [17040.574, 27243.878, 203.420*ft], # 506
    [17040.574, 27243.878, 138.000*ft], # 507
  ],
  6: [
    [19284.324, 27591.751, 142.000*ft], # 601
    [19284.324, 27591.751, 199.780*ft], # 602
    [19284.324, 27591.751, 204.020*ft], # 603
    [19203.553, 27315.309, 205.460*ft], # 604
    [19047.059, 26779.703, 208.250*ft], # 605
    [19047.059, 26779.703, 204.010*ft], # 606
    [19047.059, 26779.703, 144.000*ft], # 607
  ],
  7: [
    [20759.780, 27596.583, 144.000*ft], # 701
    [20759.780, 27596.583, 198.470*ft], # 702
    [20759.780, 27596.583, 202.334*ft], # 703
    [20609.812, 26947.687, 205.664*ft], # 704
    [20571.982, 26784.002, 206.504*ft], # 705
    [20571.982, 26784.002, 202.650*ft], # 706
    [20571.982, 26784.002, 149.500*ft], # 707
  ],
  8: [
    [22434.979, 27020.686, 145.000*ft], # 801
    [22434.979, 27020.686, 199.690*ft], # 802
    [22434.979, 27020.686, 203.211*ft], # 803
    [22369.455, 26605.829, 205.311*ft], # 804
    [22332.013, 26368.768, 206.511*ft], # 805
    [22332.013, 26368.768, 202.990*ft], # 806
    [22332.013, 26368.768, 154.000*ft], # 807
  ],
  9: [
    [24104.380, 26573.310, 136.000*ft], # 901
    [24104.380, 26573.310, 199.000*ft], # 902
    [24104.380, 26573.310, 203.028*ft], # 903
    [24088.125, 26390.192, 203.947*ft], # 904
    [24038.586, 25832.224, 206.748*ft], # 905
    [24038.586, 25832.224, 202.720*ft], # 906
    [24038.586, 25832.224, 156.000*ft], # 907
  ],
  10: [
    [25885.617, 26694.425, 131.000*ft], # 1001
    [25885.617, 26694.425, 194.810*ft], # 1002
    [25885.617, 26694.425, 199.852*ft], # 1003
    [25877.420, 26241.067, 202.119*ft], # 1004
    [25872.332, 25854.531, 204.052*ft], # 1005
    [25872.332, 25854.531, 199.010*ft], # 1006
    [25872.332, 25854.531, 130.000*ft], # 1007
  ],
  11: [
    [27396.787, 26784.776, 141.500*ft], # 1101
    [27396.787, 26784.776, 192.090*ft], # 1102
    [27396.787, 26784.776, 197.154*ft], # 1103
    [27421.866, 26193.697, 200.112*ft], # 1104
    [27432.903, 25933.542, 201.414*ft], # 1105
    [27432.903, 25933.542, 196.350*ft], # 1106
    [27432.903, 25933.542, 139.000*ft], # 1107
  ],
  12: [
    [29283.281, 26610.345, 166.000*ft], # 1201
    [29283.281, 26610.345, 192.159*ft], # 1202
    [29283.281, 26610.345, 195.409*ft], # 1203
    [29300.043, 26467.348, 195.903*ft], # 1204
    [29326.939, 26237.895, 196.695*ft], # 1205
    [29372.201, 25851.750, 198.028*ft], # 1206
    [29370.596, 25865.445, 197.981*ft], # 1207
    [29370.596, 25865.445, 193.445*ft], # 1208
    [29370.596, 25865.445, 156.000*ft], # 1209
    [29326.939, 26237.895, 194.731*ft], # 1210
    [29326.939, 26237.895, 159.000*ft], # 1211
  ],
  13: [
    [30813.126, 26806.601, 163.750*ft], # 1301
    [30813.126, 26806.601, 189.331*ft], # 1302
    [30813.126, 26806.601, 192.581*ft], # 1303
    [30749.330, 26638.286, 193.022*ft], # 1304
    [30685.534, 26469.971, 193.463*ft], # 1305
    [30685.534, 26469.971, 190.215*ft], # 1306
    [30685.534, 26469.971, 161.750*ft], # 1307
    [30439.057, 25819.668, 151.000*ft], # 1313
    [30439.057, 25819.668, 193.333*ft], # 1314
    [30439.057, 25819.668, 196.584*ft], # 1315
  ],
  14: [
    [32390.923, 27030.687, 158.500*ft], # 1401
    [32390.923, 27030.687, 186.803*ft], # 1402
    [32390.923, 27030.687, 190.053*ft], # 1403
    [32222.481, 26812.047, 190.352*ft], # 1404
    [32054.040, 26593.407, 190.651*ft], # 1405
    [32054.040, 26593.407, 187.402*ft], # 1406
    [32054.040, 26593.407, 158.500*ft], # 1407
    [32222.481, 26812.047, 187.102*ft], # 1408
    [32222.481, 26812.047, 158.500*ft], # 1409
    [31434.869, 25789.667, 150.500*ft], # 1413
    [31434.869, 25789.667, 193.182*ft], # 1414
    [31434.869, 25789.667, 196.436*ft], # 1415
  ]
}

deck = [
    [10956.246, 31471.424, 195.779*ft], # 10001
    [11134.376, 31337.427, 196.224*ft], # 10002
    [11313.673, 31204.996, 196.658*ft], # 10003
    [11494.123, 31074.141, 197.082*ft], # 10004
  ],[
    [11980.192, 30733.432, 198.159*ft], # 20001
    [12287.718, 30526.451, 198.794*ft], # 20002
    [12598.228, 30323.972, 199.401*ft], # 20003
    [12911.655, 30126.039, 199.978*ft], # 20004
  ],[
    [13599.389, 29713.586, 201.129*ft], # 30001
    [13974.506, 29500.805, 201.691*ft], # 30002
    [14353.175, 29294.414, 202.215*ft], # 30003
    [14735.289, 29094.471, 202.700*ft], # 30004
  ],[
    [15551.083, 28694.603, 203.593*ft], # 40001
    [15985.225, 28496.280, 203.992*ft], # 40002
    [16423.012, 28306.138, 204.344*ft], # 40003
    [16864.289, 28124.242, 204.648*ft], # 40004
  ],[
    [17604.098, 27840.823, 205.081*ft], # 50001
    [18060.724, 27678.668, 205.225*ft], # 50002
    [18439.748, 27551.567, 205.335*ft], # 50003
    [18820.722, 27430.437, 205.412*ft], # 50004
  ],[
    [19483.087, 27235.365, 205.533*ft], # 60001
    [19763.517, 27158.622, 205.592*ft], # 60002
    [20044.806, 27085.088, 205.634*ft], # 60003
    [20326.916, 27014.773, 205.658*ft], # 60004
  ],[
    [20959.743, 26869.407, 205.648*ft], # 70001
    [21310.743, 26796.068, 205.604*ft], # 70002
    [21662.742, 26727.682, 205.534*ft], # 70003
    [22015.669, 26664.265, 205.436*ft], # 70004
  ],[
    [22712.048, 26554.108, 205.085*ft], # 80001
    [23122.231, 26498.529, 204.834*ft], # 80002
    [23399.187, 26464.685, 204.557*ft], # 80003
    [23743.626, 26427.172, 204.258*ft], # 80004
  ],[
    [24446.148, 26360.362, 203.584*ft], # 90001
    [24804.172, 26330.532, 203.220*ft], # 90002
    [25162.197, 26300.702, 202.854*ft], # 90003
    [25520.222, 26270.872, 202.486*ft], # 90004
  ],[
    [26186.309, 26231.593, 201.719*ft], # 100001
    [26495.198, 26222.119, 201.319*ft], # 100002
    [26804.087, 26212.645, 200.917*ft], # 100003
    [27112.976, 26203.171, 200.515*ft], # 100004
  ],[
    [27802.880, 26202.537, 199.488*ft], # 110001
    [28183.895, 26211.376, 198.835*ft], # 110002
    [28564.909, 26220.216, 198.143*ft], # 110003
    [28945.924, 26229.055, 197.397*ft], # 110004
  ],[
    [29526.646, 26494.061, 195.445*ft], # 120001
    [29879.758, 26535.723, 194.631*ft], # 120002
    [30169.615, 26569.911, 193.995*ft], # 120003
    [30459.472, 26604.098, 193.360*ft], # 120004
    [29603.224, 25845.334, 197.570*ft], # 120005
    [29798.944, 25838.917, 197.342*ft], # 120006
    [30012.315, 25832.501, 197.051*ft], # 120007
    [30225.686, 25826.084, 196.808*ft], # 120008
  ],[
    [31043.962, 26673.037, 192.337*ft], # 130001
    [31338.594, 26707.787, 191.745*ft], # 130002
    [31633.226, 26742.538, 191.188*ft], # 130003
    [31927.858, 26777.289, 190.665*ft], # 130004
    [30638.228, 25813.678, 196.460*ft], # 130005
    [30837.398, 25807.689, 196.384*ft], # 130006
    [31036.569, 25801.699, 196.353*ft], # 130007
    [31235.740, 25795.709, 196.368*ft], # 130008
  ],[
    [32552.005, 26850.906, 189.683*ft], # 140001
    [32881.519, 26889.773, 189.240*ft], # 140002
    [33211.033, 26928.640, 188.868*ft], # 140003
    [33540.547, 26967.506, 188.566*ft], # 140004
    [31783.829, 25779.163, 196.639*ft], # 140005
    [32132.789, 25768.658, 196.984*ft], # 140006
    [32481.748, 25758.154, 197.462*ft], # 140007
    [32830.708, 25747.650, 198.074*ft], # 140008
]

if __name__ == "__main__":

    model = ops.model(ndm=3, ndf=6)

    trnf = ops.lib.LinearTransform(301, [0, 0, 1])
    beam = ops.element.ElasticBeamColumn3D(
            A=1.0, E=1.0, G=1.0, J=1.0, ixc=1.0, iyc=1.0, geom=trnf, cMass=True)

    for bent in bents:
        # Create bent nodes
        for i,node in enumerate(bents[bent]):
            model.node(bent*100+i+1, node)

        # Create deck nodes
        for j,coords in enumerate(deck[bent-2]):
            model.node(bent*10000+j+1, coords)

#       if bent == 5: break

    # elements = {}
    for ib in 2, 3, 4, 5, 6, 7, 8, 9, 10:
        elements = {
            (ib, 0, 10*ib+0): (  100*ib+4,   10000*ib+1),
            (ib, 1, 10*ib+1): (10000*ib+1,   10000*ib+2),
            (ib, 2, 10*ib+2): (10000*ib+2,   10000*ib+3),
            (ib, 3, 10*ib+3): (10000*ib+3,   10000*ib+4),
            (ib, 4, 10*ib+4): (10000*ib+4, 100*(ib+1)+4)
        }

        for el in elements:
            try:
                model.elem(beam, el[2], elements[el])
            except:
                pass

#       if ib == 5: break

    print(ops.tcl.dumps(model))



  # for bent in bents:
  #     for column in col_data[bent]:
  #         if Oct:
  #             section = Oct(**col_data[bent][column])
  #         elif Wide:
  #             section = Wide(**col_data[bent][column])
  # 
  #         model.elem(element.Force(None, [vert[bent][%]], section))
  # 
  # for gird in long_nodes:
  #     for i, segm in enumerate(long_nodes[gird]):
  #         pass
  # 
  # def get_section(dat: dict, bent: int, nr=0, nn=0):
  #     pass
  # 


