[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Display settings
console_output_style = count
addopts = 
    --verbose
    --showlocals
    --tb=short
    --strict-markers
    --cov=taskinator
    --cov-report=term-missing
    --cov-report=html
    --no-cov-on-fail

# Custom markers
markers =
    asyncio: mark a test as an asyncio coroutine
    slow: mark a test as slow (skipped by default)
    integration: mark a test as an integration test (requires external services)
    unit: mark a test as a unit test
    cli: mark test as CLI test
    ai: mark test as AI service test

# Test categories
# Run specific categories with: pytest -m "category"
# e.g., pytest -m "not integration" to skip integration tests

# Environment variables
env =
    D:ANTHROPIC_API_KEY=test-key
    D:PERPLEXITY_API_KEY=test-key
    D:DEBUG=false

# Logging settings
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warning settings
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    error::RuntimeWarning

# Coverage settings
[coverage:run]
branch = True
source = taskinator

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    if TYPE_CHECKING:

# HTML coverage report settings
[coverage:html]
directory = coverage_html
title = Taskinator Test Coverage Report