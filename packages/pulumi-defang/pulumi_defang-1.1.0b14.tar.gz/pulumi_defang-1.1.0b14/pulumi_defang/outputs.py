# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import types as _types

__all__ = [
    'ProjectConfig',
    'ServiceState',
]

@pulumi.output_type
class ProjectConfig(dict):
    def __init__(__self__, *,
                 services: Mapping[str, '_types.outputs.ServiceConfig'],
                 configs: Optional[Mapping[str, '_types.outputs.ConfigObjConfig']] = None,
                 name: Optional[builtins.str] = None,
                 networks: Optional[Mapping[str, '_types.outputs.NetworkConfig']] = None,
                 secrets: Optional[Mapping[str, '_types.outputs.SecretConfig']] = None,
                 volumes: Optional[Mapping[str, '_types.outputs.VolumeConfig']] = None):
        pulumi.set(__self__, "services", services)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def services(self) -> Mapping[str, '_types.outputs.ServiceConfig']:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Mapping[str, '_types.outputs.ConfigObjConfig']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Mapping[str, '_types.outputs.NetworkConfig']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Mapping[str, '_types.outputs.SecretConfig']]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Mapping[str, '_types.outputs.VolumeConfig']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ServiceState(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 task_role: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "task_role", task_role)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def task_role(self) -> builtins.str:
        return pulumi.get(self, "task_role")


