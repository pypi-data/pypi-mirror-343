# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BlkioConfig',
    'BuildConfig',
    'ConfigObjConfig',
    'CredentialSpecConfig',
    'DeployConfig',
    'DevelopConfig',
    'DeviceMapping',
    'DeviceRequest',
    'DiscreteGenericResource',
    'EnvFile',
    'ExtendsConfig',
    'GenericResource',
    'HealthCheckConfig',
    'IPAMConfig',
    'IPAMPool',
    'LoggingConfig',
    'NetworkConfig',
    'Placement',
    'PlacementPreferences',
    'Resource',
    'Resources',
    'RestartPolicy',
    'SSHKey',
    'SecretConfig',
    'ServiceConfig',
    'ServiceConfigObjConfig',
    'ServiceDependency',
    'ServiceHook',
    'ServiceNetworkConfig',
    'ServicePortConfig',
    'ServiceSecretConfig',
    'ServiceVolumeBind',
    'ServiceVolumeConfig',
    'ServiceVolumeTmpfs',
    'ServiceVolumeVolume',
    'ThrottleDevice',
    'Trigger',
    'UlimitsConfig',
    'UpdateConfig',
    'VolumeConfig',
    'WeightDevice',
]

@pulumi.output_type
class BlkioConfig(dict):
    def __init__(__self__, *,
                 device_read_bps: Optional[Sequence['outputs.ThrottleDevice']] = None,
                 device_read_iops: Optional[Sequence['outputs.ThrottleDevice']] = None,
                 device_write_bps: Optional[Sequence['outputs.ThrottleDevice']] = None,
                 device_write_iops: Optional[Sequence['outputs.ThrottleDevice']] = None,
                 weight: Optional[builtins.int] = None,
                 weight_device: Optional[Sequence['outputs.WeightDevice']] = None):
        if device_read_bps is not None:
            pulumi.set(__self__, "device_read_bps", device_read_bps)
        if device_read_iops is not None:
            pulumi.set(__self__, "device_read_iops", device_read_iops)
        if device_write_bps is not None:
            pulumi.set(__self__, "device_write_bps", device_write_bps)
        if device_write_iops is not None:
            pulumi.set(__self__, "device_write_iops", device_write_iops)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_device is not None:
            pulumi.set(__self__, "weight_device", weight_device)

    @property
    @pulumi.getter
    def device_read_bps(self) -> Optional[Sequence['outputs.ThrottleDevice']]:
        return pulumi.get(self, "device_read_bps")

    @property
    @pulumi.getter
    def device_read_iops(self) -> Optional[Sequence['outputs.ThrottleDevice']]:
        return pulumi.get(self, "device_read_iops")

    @property
    @pulumi.getter
    def device_write_bps(self) -> Optional[Sequence['outputs.ThrottleDevice']]:
        return pulumi.get(self, "device_write_bps")

    @property
    @pulumi.getter
    def device_write_iops(self) -> Optional[Sequence['outputs.ThrottleDevice']]:
        return pulumi.get(self, "device_write_iops")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def weight_device(self) -> Optional[Sequence['outputs.WeightDevice']]:
        return pulumi.get(self, "weight_device")


@pulumi.output_type
class BuildConfig(dict):
    def __init__(__self__, *,
                 additional_contexts: Optional[Mapping[str, builtins.str]] = None,
                 args: Optional[Mapping[str, builtins.str]] = None,
                 cache_from: Optional[Sequence[builtins.str]] = None,
                 cache_to: Optional[Sequence[builtins.str]] = None,
                 context: Optional[builtins.str] = None,
                 dockerfile: Optional[builtins.str] = None,
                 dockerfile_inline: Optional[builtins.str] = None,
                 entitlements: Optional[Sequence[builtins.str]] = None,
                 extra_hosts: Optional[Mapping[str, Sequence[builtins.str]]] = None,
                 isolation: Optional[builtins.str] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 network: Optional[builtins.str] = None,
                 no_cache: Optional[builtins.bool] = None,
                 platforms: Optional[Sequence[builtins.str]] = None,
                 privileged: Optional[builtins.bool] = None,
                 pull: Optional[builtins.bool] = None,
                 secrets: Optional[Sequence['outputs.ServiceSecretConfig']] = None,
                 shm_size: Optional[builtins.int] = None,
                 ssh: Optional[Sequence['outputs.SSHKey']] = None,
                 tags: Optional[Sequence[builtins.str]] = None,
                 target: Optional[builtins.str] = None,
                 ulimits: Optional[Mapping[str, 'outputs.UlimitsConfig']] = None):
        if additional_contexts is not None:
            pulumi.set(__self__, "additional_contexts", additional_contexts)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if cache_from is not None:
            pulumi.set(__self__, "cache_from", cache_from)
        if cache_to is not None:
            pulumi.set(__self__, "cache_to", cache_to)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if dockerfile_inline is not None:
            pulumi.set(__self__, "dockerfile_inline", dockerfile_inline)
        if entitlements is not None:
            pulumi.set(__self__, "entitlements", entitlements)
        if extra_hosts is not None:
            pulumi.set(__self__, "extra_hosts", extra_hosts)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)
        if platforms is not None:
            pulumi.set(__self__, "platforms", platforms)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if pull is not None:
            pulumi.set(__self__, "pull", pull)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if shm_size is not None:
            pulumi.set(__self__, "shm_size", shm_size)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if ulimits is not None:
            pulumi.set(__self__, "ulimits", ulimits)

    @property
    @pulumi.getter
    def additional_contexts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "additional_contexts")

    @property
    @pulumi.getter
    def args(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def cache_from(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "cache_from")

    @property
    @pulumi.getter
    def cache_to(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "cache_to")

    @property
    @pulumi.getter
    def context(self) -> Optional[builtins.str]:
        return pulumi.get(self, "context")

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dockerfile")

    @property
    @pulumi.getter
    def dockerfile_inline(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dockerfile_inline")

    @property
    @pulumi.getter
    def entitlements(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter
    def extra_hosts(self) -> Optional[Mapping[str, Sequence[builtins.str]]]:
        return pulumi.get(self, "extra_hosts")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def network(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def no_cache(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "no_cache")

    @property
    @pulumi.getter
    def platforms(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "platforms")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter
    def pull(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "pull")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.ServiceSecretConfig']]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def shm_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "shm_size")

    @property
    @pulumi.getter
    def ssh(self) -> Optional[Sequence['outputs.SSHKey']]:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def ulimits(self) -> Optional[Mapping[str, 'outputs.UlimitsConfig']]:
        return pulumi.get(self, "ulimits")


@pulumi.output_type
class ConfigObjConfig(dict):
    def __init__(__self__, *,
                 content: Optional[builtins.str] = None,
                 driver: Optional[builtins.str] = None,
                 driver_opts: Optional[Mapping[str, builtins.str]] = None,
                 environment: Optional[builtins.str] = None,
                 external: Optional[builtins.bool] = None,
                 file: Optional[builtins.str] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 template_driver: Optional[builtins.str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if driver_opts is not None:
            pulumi.set(__self__, "driver_opts", driver_opts)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_driver is not None:
            pulumi.set(__self__, "template_driver", template_driver)

    @property
    @pulumi.getter
    def content(self) -> Optional[builtins.str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def driver_opts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "driver_opts")

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def external(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def file(self) -> Optional[builtins.str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def template_driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "template_driver")


@pulumi.output_type
class CredentialSpecConfig(dict):
    def __init__(__self__, *,
                 config: Optional[builtins.str] = None,
                 file: Optional[builtins.str] = None,
                 registry: Optional[builtins.str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def config(self) -> Optional[builtins.str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def file(self) -> Optional[builtins.str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def registry(self) -> Optional[builtins.str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class DeployConfig(dict):
    def __init__(__self__, *,
                 resources: 'outputs.Resources',
                 endpoint_mode: Optional[builtins.str] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 mode: Optional[builtins.str] = None,
                 placement: Optional['outputs.Placement'] = None,
                 replicas: Optional[builtins.int] = None,
                 restart_policy: Optional['outputs.RestartPolicy'] = None,
                 rollback_config: Optional['outputs.UpdateConfig'] = None,
                 update_config: Optional['outputs.UpdateConfig'] = None):
        pulumi.set(__self__, "resources", resources)
        if endpoint_mode is not None:
            pulumi.set(__self__, "endpoint_mode", endpoint_mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if rollback_config is not None:
            pulumi.set(__self__, "rollback_config", rollback_config)
        if update_config is not None:
            pulumi.set(__self__, "update_config", update_config)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.Resources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def endpoint_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "endpoint_mode")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def placement(self) -> Optional['outputs.Placement']:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[builtins.int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def restart_policy(self) -> Optional['outputs.RestartPolicy']:
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter
    def rollback_config(self) -> Optional['outputs.UpdateConfig']:
        return pulumi.get(self, "rollback_config")

    @property
    @pulumi.getter
    def update_config(self) -> Optional['outputs.UpdateConfig']:
        return pulumi.get(self, "update_config")


@pulumi.output_type
class DevelopConfig(dict):
    def __init__(__self__, *,
                 watch: Optional[Sequence['outputs.Trigger']] = None):
        if watch is not None:
            pulumi.set(__self__, "watch", watch)

    @property
    @pulumi.getter
    def watch(self) -> Optional[Sequence['outputs.Trigger']]:
        return pulumi.get(self, "watch")


@pulumi.output_type
class DeviceMapping(dict):
    def __init__(__self__, *,
                 permissions: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None):
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[builtins.str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class DeviceRequest(dict):
    def __init__(__self__, *,
                 capabilities: Optional[Sequence[builtins.str]] = None,
                 count: Optional[builtins.int] = None,
                 device_ids: Optional[Sequence[builtins.str]] = None,
                 driver: Optional[builtins.str] = None,
                 options: Optional[Mapping[str, builtins.str]] = None):
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if device_ids is not None:
            pulumi.set(__self__, "device_ids", device_ids)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def device_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "device_ids")

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "options")


@pulumi.output_type
class DiscreteGenericResource(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 value: builtins.int):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def value(self) -> builtins.int:
        return pulumi.get(self, "value")


@pulumi.output_type
class EnvFile(dict):
    def __init__(__self__, *,
                 required: builtins.bool,
                 format: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        pulumi.set(__self__, "required", required)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def required(self) -> builtins.bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def format(self) -> Optional[builtins.str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class ExtendsConfig(dict):
    def __init__(__self__, *,
                 file: Optional[builtins.str] = None,
                 service: Optional[builtins.str] = None):
        if file is not None:
            pulumi.set(__self__, "file", file)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def file(self) -> Optional[builtins.str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def service(self) -> Optional[builtins.str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GenericResource(dict):
    def __init__(__self__, *,
                 discrete_resource_spec: Optional['outputs.DiscreteGenericResource'] = None):
        if discrete_resource_spec is not None:
            pulumi.set(__self__, "discrete_resource_spec", discrete_resource_spec)

    @property
    @pulumi.getter
    def discrete_resource_spec(self) -> Optional['outputs.DiscreteGenericResource']:
        return pulumi.get(self, "discrete_resource_spec")


@pulumi.output_type
class HealthCheckConfig(dict):
    def __init__(__self__, *,
                 disable: Optional[builtins.bool] = None,
                 interval: Optional[builtins.int] = None,
                 retries: Optional[builtins.int] = None,
                 start_interval: Optional[builtins.int] = None,
                 start_period: Optional[builtins.int] = None,
                 test: Optional[Sequence[builtins.str]] = None,
                 timeout: Optional[builtins.int] = None):
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if start_interval is not None:
            pulumi.set(__self__, "start_interval", start_interval)
        if start_period is not None:
            pulumi.set(__self__, "start_period", start_period)
        if test is not None:
            pulumi.set(__self__, "test", test)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def disable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def retries(self) -> Optional[builtins.int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def start_interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start_interval")

    @property
    @pulumi.getter
    def start_period(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start_period")

    @property
    @pulumi.getter
    def test(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "test")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class IPAMConfig(dict):
    def __init__(__self__, *,
                 config: Optional[Sequence['outputs.IPAMPool']] = None,
                 driver: Optional[builtins.str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)

    @property
    @pulumi.getter
    def config(self) -> Optional[Sequence['outputs.IPAMPool']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")


@pulumi.output_type
class IPAMPool(dict):
    def __init__(__self__, *,
                 aux_addresses: Optional[Mapping[str, builtins.str]] = None,
                 gateway: Optional[builtins.str] = None,
                 ip_range: Optional[builtins.str] = None,
                 subnet: Optional[builtins.str] = None):
        if aux_addresses is not None:
            pulumi.set(__self__, "aux_addresses", aux_addresses)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def aux_addresses(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "aux_addresses")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip_range(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class LoggingConfig(dict):
    def __init__(__self__, *,
                 driver: Optional[builtins.str] = None,
                 options: Optional[Mapping[str, builtins.str]] = None):
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "options")


@pulumi.output_type
class NetworkConfig(dict):
    def __init__(__self__, *,
                 ipam: 'outputs.IPAMConfig',
                 attachable: Optional[builtins.bool] = None,
                 driver: Optional[builtins.str] = None,
                 driver_opts: Optional[Mapping[str, builtins.str]] = None,
                 enable_ipv6: Optional[builtins.bool] = None,
                 external: Optional[builtins.bool] = None,
                 internal: Optional[builtins.bool] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 name: Optional[builtins.str] = None):
        pulumi.set(__self__, "ipam", ipam)
        if attachable is not None:
            pulumi.set(__self__, "attachable", attachable)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if driver_opts is not None:
            pulumi.set(__self__, "driver_opts", driver_opts)
        if enable_ipv6 is not None:
            pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ipam(self) -> 'outputs.IPAMConfig':
        return pulumi.get(self, "ipam")

    @property
    @pulumi.getter
    def attachable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attachable")

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def driver_opts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "driver_opts")

    @property
    @pulumi.getter
    def enable_ipv6(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter
    def external(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def internal(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "internal")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class Placement(dict):
    def __init__(__self__, *,
                 constraints: Optional[Sequence[builtins.str]] = None,
                 max_replicas_per_node: Optional[builtins.int] = None,
                 preferences: Optional[Sequence['outputs.PlacementPreferences']] = None):
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if max_replicas_per_node is not None:
            pulumi.set(__self__, "max_replicas_per_node", max_replicas_per_node)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def max_replicas_per_node(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_replicas_per_node")

    @property
    @pulumi.getter
    def preferences(self) -> Optional[Sequence['outputs.PlacementPreferences']]:
        return pulumi.get(self, "preferences")


@pulumi.output_type
class PlacementPreferences(dict):
    def __init__(__self__, *,
                 spread: Optional[builtins.str] = None):
        if spread is not None:
            pulumi.set(__self__, "spread", spread)

    @property
    @pulumi.getter
    def spread(self) -> Optional[builtins.str]:
        return pulumi.get(self, "spread")


@pulumi.output_type
class Resource(dict):
    def __init__(__self__, *,
                 cpus: Optional[builtins.float] = None,
                 devices: Optional[Sequence['outputs.DeviceRequest']] = None,
                 generic_resources: Optional[Sequence['outputs.GenericResource']] = None,
                 memory: Optional[builtins.int] = None,
                 pids: Optional[builtins.int] = None):
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if generic_resources is not None:
            pulumi.set(__self__, "generic_resources", generic_resources)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if pids is not None:
            pulumi.set(__self__, "pids", pids)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[builtins.float]:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.DeviceRequest']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def generic_resources(self) -> Optional[Sequence['outputs.GenericResource']]:
        return pulumi.get(self, "generic_resources")

    @property
    @pulumi.getter
    def memory(self) -> Optional[builtins.int]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def pids(self) -> Optional[builtins.int]:
        return pulumi.get(self, "pids")


@pulumi.output_type
class Resources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.Resource'] = None,
                 reservations: Optional['outputs.Resource'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if reservations is not None:
            pulumi.set(__self__, "reservations", reservations)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.Resource']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def reservations(self) -> Optional['outputs.Resource']:
        return pulumi.get(self, "reservations")


@pulumi.output_type
class RestartPolicy(dict):
    def __init__(__self__, *,
                 condition: Optional[builtins.str] = None,
                 delay: Optional[builtins.int] = None,
                 max_attempts: Optional[builtins.int] = None,
                 window: Optional[builtins.int] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if max_attempts is not None:
            pulumi.set(__self__, "max_attempts", max_attempts)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def delay(self) -> Optional[builtins.int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def max_attempts(self) -> Optional[builtins.int]:
        return pulumi.get(self, "max_attempts")

    @property
    @pulumi.getter
    def window(self) -> Optional[builtins.int]:
        return pulumi.get(self, "window")


@pulumi.output_type
class SSHKey(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class SecretConfig(dict):
    def __init__(__self__, *,
                 content: Optional[builtins.str] = None,
                 driver: Optional[builtins.str] = None,
                 driver_opts: Optional[Mapping[str, builtins.str]] = None,
                 environment: Optional[builtins.str] = None,
                 external: Optional[builtins.bool] = None,
                 file: Optional[builtins.str] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 template_driver: Optional[builtins.str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if driver_opts is not None:
            pulumi.set(__self__, "driver_opts", driver_opts)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_driver is not None:
            pulumi.set(__self__, "template_driver", template_driver)

    @property
    @pulumi.getter
    def content(self) -> Optional[builtins.str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def driver_opts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "driver_opts")

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def external(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def file(self) -> Optional[builtins.str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def template_driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "template_driver")


@pulumi.output_type
class ServiceConfig(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, builtins.str]] = None,
                 attach: Optional[builtins.bool] = None,
                 blkio_config: Optional['outputs.BlkioConfig'] = None,
                 build: Optional['outputs.BuildConfig'] = None,
                 cap_add: Optional[Sequence[builtins.str]] = None,
                 cap_drop: Optional[Sequence[builtins.str]] = None,
                 cgroup: Optional[builtins.str] = None,
                 cgroup_parent: Optional[builtins.str] = None,
                 command: Optional[Sequence[builtins.str]] = None,
                 configs: Optional[Sequence['outputs.ServiceConfigObjConfig']] = None,
                 container_name: Optional[builtins.str] = None,
                 cpu_count: Optional[builtins.int] = None,
                 cpu_percent: Optional[builtins.float] = None,
                 cpu_period: Optional[builtins.int] = None,
                 cpu_quota: Optional[builtins.int] = None,
                 cpu_rt_period: Optional[builtins.int] = None,
                 cpu_rt_runtime: Optional[builtins.int] = None,
                 cpu_shares: Optional[builtins.int] = None,
                 cpus: Optional[builtins.float] = None,
                 cpuset: Optional[builtins.str] = None,
                 credential_spec: Optional['outputs.CredentialSpecConfig'] = None,
                 defang_llm: Optional[builtins.bool] = None,
                 defang_postgres: Optional[builtins.bool] = None,
                 defang_redis: Optional[builtins.bool] = None,
                 defang_static_files: Optional[builtins.bool] = None,
                 depends_on: Optional[Mapping[str, 'outputs.ServiceDependency']] = None,
                 deploy: Optional['outputs.DeployConfig'] = None,
                 develop: Optional['outputs.DevelopConfig'] = None,
                 device_cgroup_rules: Optional[Sequence[builtins.str]] = None,
                 devices: Optional[Sequence['outputs.DeviceMapping']] = None,
                 dns: Optional[Sequence[builtins.str]] = None,
                 dns_opt: Optional[Sequence[builtins.str]] = None,
                 dns_search: Optional[Sequence[builtins.str]] = None,
                 dockerfile: Optional[builtins.str] = None,
                 domainname: Optional[builtins.str] = None,
                 entrypoint: Optional[Sequence[builtins.str]] = None,
                 env_file: Optional[Sequence['outputs.EnvFile']] = None,
                 environment: Optional[Mapping[str, builtins.str]] = None,
                 expose: Optional[Sequence[builtins.str]] = None,
                 extends: Optional['outputs.ExtendsConfig'] = None,
                 external_links: Optional[Sequence[builtins.str]] = None,
                 extra_hosts: Optional[Mapping[str, Sequence[builtins.str]]] = None,
                 gpus: Optional[Sequence['outputs.DeviceRequest']] = None,
                 group_add: Optional[Sequence[builtins.str]] = None,
                 healthcheck: Optional['outputs.HealthCheckConfig'] = None,
                 hostname: Optional[builtins.str] = None,
                 image: Optional[builtins.str] = None,
                 init: Optional[builtins.bool] = None,
                 ipc: Optional[builtins.str] = None,
                 isolation: Optional[builtins.str] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 links: Optional[Sequence[builtins.str]] = None,
                 log_driver: Optional[builtins.str] = None,
                 log_opt: Optional[Mapping[str, builtins.str]] = None,
                 logging: Optional['outputs.LoggingConfig'] = None,
                 mac_address: Optional[builtins.str] = None,
                 mem_limit: Optional[builtins.int] = None,
                 mem_reservation: Optional[builtins.int] = None,
                 mem_swappiness: Optional[builtins.int] = None,
                 memswap_limit: Optional[builtins.int] = None,
                 net: Optional[builtins.str] = None,
                 network_mode: Optional[builtins.str] = None,
                 networks: Optional[Mapping[str, 'outputs.ServiceNetworkConfig']] = None,
                 oom_kill_disable: Optional[builtins.bool] = None,
                 oom_score_adj: Optional[builtins.int] = None,
                 pid: Optional[builtins.str] = None,
                 pids_limit: Optional[builtins.int] = None,
                 platform: Optional[builtins.str] = None,
                 ports: Optional[Sequence['outputs.ServicePortConfig']] = None,
                 post_start: Optional[Sequence['outputs.ServiceHook']] = None,
                 pre_stop: Optional[Sequence['outputs.ServiceHook']] = None,
                 privileged: Optional[builtins.bool] = None,
                 profiles: Optional[Sequence[builtins.str]] = None,
                 pull_policy: Optional[builtins.str] = None,
                 read_only: Optional[builtins.bool] = None,
                 restart: Optional[builtins.str] = None,
                 runtime: Optional[builtins.str] = None,
                 scale: Optional[builtins.int] = None,
                 secrets: Optional[Sequence['outputs.ServiceSecretConfig']] = None,
                 security_opt: Optional[Sequence[builtins.str]] = None,
                 shm_size: Optional[builtins.int] = None,
                 stdin_open: Optional[builtins.bool] = None,
                 stop_grace_period: Optional[builtins.int] = None,
                 stop_signal: Optional[builtins.str] = None,
                 storage_opt: Optional[Mapping[str, builtins.str]] = None,
                 sysctls: Optional[Mapping[str, builtins.str]] = None,
                 tmpfs: Optional[Sequence[builtins.str]] = None,
                 tty: Optional[builtins.bool] = None,
                 ulimits: Optional[Mapping[str, 'outputs.UlimitsConfig']] = None,
                 user: Optional[builtins.str] = None,
                 userns_mode: Optional[builtins.str] = None,
                 uts: Optional[builtins.str] = None,
                 volume_driver: Optional[builtins.str] = None,
                 volumes: Optional[Sequence['outputs.ServiceVolumeConfig']] = None,
                 volumes_from: Optional[Sequence[builtins.str]] = None,
                 working_dir: Optional[builtins.str] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if attach is not None:
            pulumi.set(__self__, "attach", attach)
        if blkio_config is not None:
            pulumi.set(__self__, "blkio_config", blkio_config)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if cap_add is not None:
            pulumi.set(__self__, "cap_add", cap_add)
        if cap_drop is not None:
            pulumi.set(__self__, "cap_drop", cap_drop)
        if cgroup is not None:
            pulumi.set(__self__, "cgroup", cgroup)
        if cgroup_parent is not None:
            pulumi.set(__self__, "cgroup_parent", cgroup_parent)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if cpu_percent is not None:
            pulumi.set(__self__, "cpu_percent", cpu_percent)
        if cpu_period is not None:
            pulumi.set(__self__, "cpu_period", cpu_period)
        if cpu_quota is not None:
            pulumi.set(__self__, "cpu_quota", cpu_quota)
        if cpu_rt_period is not None:
            pulumi.set(__self__, "cpu_rt_period", cpu_rt_period)
        if cpu_rt_runtime is not None:
            pulumi.set(__self__, "cpu_rt_runtime", cpu_rt_runtime)
        if cpu_shares is not None:
            pulumi.set(__self__, "cpu_shares", cpu_shares)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if cpuset is not None:
            pulumi.set(__self__, "cpuset", cpuset)
        if credential_spec is not None:
            pulumi.set(__self__, "credential_spec", credential_spec)
        if defang_llm is not None:
            pulumi.set(__self__, "defang_llm", defang_llm)
        if defang_postgres is not None:
            pulumi.set(__self__, "defang_postgres", defang_postgres)
        if defang_redis is not None:
            pulumi.set(__self__, "defang_redis", defang_redis)
        if defang_static_files is not None:
            pulumi.set(__self__, "defang_static_files", defang_static_files)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if deploy is not None:
            pulumi.set(__self__, "deploy", deploy)
        if develop is not None:
            pulumi.set(__self__, "develop", develop)
        if device_cgroup_rules is not None:
            pulumi.set(__self__, "device_cgroup_rules", device_cgroup_rules)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_opt is not None:
            pulumi.set(__self__, "dns_opt", dns_opt)
        if dns_search is not None:
            pulumi.set(__self__, "dns_search", dns_search)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if domainname is not None:
            pulumi.set(__self__, "domainname", domainname)
        if entrypoint is not None:
            pulumi.set(__self__, "entrypoint", entrypoint)
        if env_file is not None:
            pulumi.set(__self__, "env_file", env_file)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if expose is not None:
            pulumi.set(__self__, "expose", expose)
        if extends is not None:
            pulumi.set(__self__, "extends", extends)
        if external_links is not None:
            pulumi.set(__self__, "external_links", external_links)
        if extra_hosts is not None:
            pulumi.set(__self__, "extra_hosts", extra_hosts)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if group_add is not None:
            pulumi.set(__self__, "group_add", group_add)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init is not None:
            pulumi.set(__self__, "init", init)
        if ipc is not None:
            pulumi.set(__self__, "ipc", ipc)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if log_driver is not None:
            pulumi.set(__self__, "log_driver", log_driver)
        if log_opt is not None:
            pulumi.set(__self__, "log_opt", log_opt)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mem_limit is not None:
            pulumi.set(__self__, "mem_limit", mem_limit)
        if mem_reservation is not None:
            pulumi.set(__self__, "mem_reservation", mem_reservation)
        if mem_swappiness is not None:
            pulumi.set(__self__, "mem_swappiness", mem_swappiness)
        if memswap_limit is not None:
            pulumi.set(__self__, "memswap_limit", memswap_limit)
        if net is not None:
            pulumi.set(__self__, "net", net)
        if network_mode is not None:
            pulumi.set(__self__, "network_mode", network_mode)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if oom_kill_disable is not None:
            pulumi.set(__self__, "oom_kill_disable", oom_kill_disable)
        if oom_score_adj is not None:
            pulumi.set(__self__, "oom_score_adj", oom_score_adj)
        if pid is not None:
            pulumi.set(__self__, "pid", pid)
        if pids_limit is not None:
            pulumi.set(__self__, "pids_limit", pids_limit)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if security_opt is not None:
            pulumi.set(__self__, "security_opt", security_opt)
        if shm_size is not None:
            pulumi.set(__self__, "shm_size", shm_size)
        if stdin_open is not None:
            pulumi.set(__self__, "stdin_open", stdin_open)
        if stop_grace_period is not None:
            pulumi.set(__self__, "stop_grace_period", stop_grace_period)
        if stop_signal is not None:
            pulumi.set(__self__, "stop_signal", stop_signal)
        if storage_opt is not None:
            pulumi.set(__self__, "storage_opt", storage_opt)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if tmpfs is not None:
            pulumi.set(__self__, "tmpfs", tmpfs)
        if tty is not None:
            pulumi.set(__self__, "tty", tty)
        if ulimits is not None:
            pulumi.set(__self__, "ulimits", ulimits)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if userns_mode is not None:
            pulumi.set(__self__, "userns_mode", userns_mode)
        if uts is not None:
            pulumi.set(__self__, "uts", uts)
        if volume_driver is not None:
            pulumi.set(__self__, "volume_driver", volume_driver)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if volumes_from is not None:
            pulumi.set(__self__, "volumes_from", volumes_from)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def attach(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attach")

    @property
    @pulumi.getter
    def blkio_config(self) -> Optional['outputs.BlkioConfig']:
        return pulumi.get(self, "blkio_config")

    @property
    @pulumi.getter
    def build(self) -> Optional['outputs.BuildConfig']:
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def cap_add(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "cap_add")

    @property
    @pulumi.getter
    def cap_drop(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "cap_drop")

    @property
    @pulumi.getter
    def cgroup(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cgroup")

    @property
    @pulumi.getter
    def cgroup_parent(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cgroup_parent")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.ServiceConfigObjConfig']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def container_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def cpu_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter
    def cpu_percent(self) -> Optional[builtins.float]:
        return pulumi.get(self, "cpu_percent")

    @property
    @pulumi.getter
    def cpu_period(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_period")

    @property
    @pulumi.getter
    def cpu_quota(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_quota")

    @property
    @pulumi.getter
    def cpu_rt_period(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_rt_period")

    @property
    @pulumi.getter
    def cpu_rt_runtime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_rt_runtime")

    @property
    @pulumi.getter
    def cpu_shares(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cpu_shares")

    @property
    @pulumi.getter
    def cpus(self) -> Optional[builtins.float]:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def cpuset(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cpuset")

    @property
    @pulumi.getter
    def credential_spec(self) -> Optional['outputs.CredentialSpecConfig']:
        return pulumi.get(self, "credential_spec")

    @property
    @pulumi.getter
    def defang_llm(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "defang_llm")

    @property
    @pulumi.getter
    def defang_postgres(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "defang_postgres")

    @property
    @pulumi.getter
    def defang_redis(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "defang_redis")

    @property
    @pulumi.getter
    def defang_static_files(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "defang_static_files")

    @property
    @pulumi.getter
    def depends_on(self) -> Optional[Mapping[str, 'outputs.ServiceDependency']]:
        return pulumi.get(self, "depends_on")

    @property
    @pulumi.getter
    def deploy(self) -> Optional['outputs.DeployConfig']:
        return pulumi.get(self, "deploy")

    @property
    @pulumi.getter
    def develop(self) -> Optional['outputs.DevelopConfig']:
        return pulumi.get(self, "develop")

    @property
    @pulumi.getter
    def device_cgroup_rules(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "device_cgroup_rules")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.DeviceMapping']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def dns_opt(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "dns_opt")

    @property
    @pulumi.getter
    def dns_search(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "dns_search")

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dockerfile")

    @property
    @pulumi.getter
    def domainname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domainname")

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "entrypoint")

    @property
    @pulumi.getter
    def env_file(self) -> Optional[Sequence['outputs.EnvFile']]:
        return pulumi.get(self, "env_file")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def expose(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "expose")

    @property
    @pulumi.getter
    def extends(self) -> Optional['outputs.ExtendsConfig']:
        return pulumi.get(self, "extends")

    @property
    @pulumi.getter
    def external_links(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "external_links")

    @property
    @pulumi.getter
    def extra_hosts(self) -> Optional[Mapping[str, Sequence[builtins.str]]]:
        return pulumi.get(self, "extra_hosts")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[Sequence['outputs.DeviceRequest']]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def group_add(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "group_add")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional['outputs.HealthCheckConfig']:
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def image(self) -> Optional[builtins.str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def init(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "init")

    @property
    @pulumi.getter
    def ipc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipc")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def log_driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "log_driver")

    @property
    @pulumi.getter
    def log_opt(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "log_opt")

    @property
    @pulumi.getter
    def logging(self) -> Optional['outputs.LoggingConfig']:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def mac_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mem_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mem_limit")

    @property
    @pulumi.getter
    def mem_reservation(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mem_reservation")

    @property
    @pulumi.getter
    def mem_swappiness(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mem_swappiness")

    @property
    @pulumi.getter
    def memswap_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "memswap_limit")

    @property
    @pulumi.getter
    def net(self) -> Optional[builtins.str]:
        return pulumi.get(self, "net")

    @property
    @pulumi.getter
    def network_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_mode")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Mapping[str, 'outputs.ServiceNetworkConfig']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def oom_kill_disable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "oom_kill_disable")

    @property
    @pulumi.getter
    def oom_score_adj(self) -> Optional[builtins.int]:
        return pulumi.get(self, "oom_score_adj")

    @property
    @pulumi.getter
    def pid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pid")

    @property
    @pulumi.getter
    def pids_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "pids_limit")

    @property
    @pulumi.getter
    def platform(self) -> Optional[builtins.str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ServicePortConfig']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def post_start(self) -> Optional[Sequence['outputs.ServiceHook']]:
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter
    def pre_stop(self) -> Optional[Sequence['outputs.ServiceHook']]:
        return pulumi.get(self, "pre_stop")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter
    def pull_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pull_policy")

    @property
    @pulumi.getter
    def read_only(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def restart(self) -> Optional[builtins.str]:
        return pulumi.get(self, "restart")

    @property
    @pulumi.getter
    def runtime(self) -> Optional[builtins.str]:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def scale(self) -> Optional[builtins.int]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence['outputs.ServiceSecretConfig']]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def security_opt(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "security_opt")

    @property
    @pulumi.getter
    def shm_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "shm_size")

    @property
    @pulumi.getter
    def stdin_open(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stdin_open")

    @property
    @pulumi.getter
    def stop_grace_period(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stop_grace_period")

    @property
    @pulumi.getter
    def stop_signal(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stop_signal")

    @property
    @pulumi.getter
    def storage_opt(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "storage_opt")

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "sysctls")

    @property
    @pulumi.getter
    def tmpfs(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "tmpfs")

    @property
    @pulumi.getter
    def tty(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "tty")

    @property
    @pulumi.getter
    def ulimits(self) -> Optional[Mapping[str, 'outputs.UlimitsConfig']]:
        return pulumi.get(self, "ulimits")

    @property
    @pulumi.getter
    def user(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def userns_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "userns_mode")

    @property
    @pulumi.getter
    def uts(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uts")

    @property
    @pulumi.getter
    def volume_driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "volume_driver")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ServiceVolumeConfig']]:
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def volumes_from(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "volumes_from")

    @property
    @pulumi.getter
    def working_dir(self) -> Optional[builtins.str]:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class ServiceConfigObjConfig(dict):
    def __init__(__self__, *,
                 gid: Optional[builtins.str] = None,
                 mode: Optional[builtins.int] = None,
                 source: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None,
                 uid: Optional[builtins.str] = None):
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def gid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def uid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid")


@pulumi.output_type
class ServiceDependency(dict):
    def __init__(__self__, *,
                 required: builtins.bool,
                 condition: Optional[builtins.str] = None,
                 restart: Optional[builtins.bool] = None):
        pulumi.set(__self__, "required", required)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)

    @property
    @pulumi.getter
    def required(self) -> builtins.bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def condition(self) -> Optional[builtins.str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def restart(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "restart")


@pulumi.output_type
class ServiceHook(dict):
    def __init__(__self__, *,
                 command: Sequence[builtins.str],
                 environment: Optional[Mapping[str, builtins.str]] = None,
                 privileged: Optional[builtins.bool] = None,
                 user: Optional[builtins.str] = None,
                 working_dir: Optional[builtins.str] = None):
        pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def command(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter
    def user(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def working_dir(self) -> Optional[builtins.str]:
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class ServiceNetworkConfig(dict):
    def __init__(__self__, *,
                 aliases: Optional[Sequence[builtins.str]] = None,
                 driver_opts: Optional[Mapping[str, builtins.str]] = None,
                 ipv4_address: Optional[builtins.str] = None,
                 ipv6_address: Optional[builtins.str] = None,
                 link_local_ips: Optional[Sequence[builtins.str]] = None,
                 mac_address: Optional[builtins.str] = None,
                 priority: Optional[builtins.int] = None):
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if driver_opts is not None:
            pulumi.set(__self__, "driver_opts", driver_opts)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if link_local_ips is not None:
            pulumi.set(__self__, "link_local_ips", link_local_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def driver_opts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "driver_opts")

    @property
    @pulumi.getter
    def ipv4_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def ipv6_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter
    def link_local_ips(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "link_local_ips")

    @property
    @pulumi.getter
    def mac_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class ServicePortConfig(dict):
    def __init__(__self__, *,
                 app_protocol: Optional[builtins.str] = None,
                 defang_listener: Optional[builtins.str] = None,
                 host_ip: Optional[builtins.str] = None,
                 mode: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 protocol: Optional[builtins.str] = None,
                 published: Optional[builtins.str] = None,
                 target: Optional[builtins.int] = None):
        if app_protocol is not None:
            pulumi.set(__self__, "app_protocol", app_protocol)
        if defang_listener is not None:
            pulumi.set(__self__, "defang_listener", defang_listener)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if published is not None:
            pulumi.set(__self__, "published", published)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def app_protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "app_protocol")

    @property
    @pulumi.getter
    def defang_listener(self) -> Optional[builtins.str]:
        return pulumi.get(self, "defang_listener")

    @property
    @pulumi.getter
    def host_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def published(self) -> Optional[builtins.str]:
        return pulumi.get(self, "published")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.int]:
        return pulumi.get(self, "target")


@pulumi.output_type
class ServiceSecretConfig(dict):
    def __init__(__self__, *,
                 gid: Optional[builtins.str] = None,
                 mode: Optional[builtins.int] = None,
                 source: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None,
                 uid: Optional[builtins.str] = None):
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def gid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def uid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid")


@pulumi.output_type
class ServiceVolumeBind(dict):
    def __init__(__self__, *,
                 create_host_path: Optional[builtins.bool] = None,
                 propagation: Optional[builtins.str] = None,
                 recursive: Optional[builtins.str] = None,
                 selinux: Optional[builtins.str] = None):
        if create_host_path is not None:
            pulumi.set(__self__, "create_host_path", create_host_path)
        if propagation is not None:
            pulumi.set(__self__, "propagation", propagation)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if selinux is not None:
            pulumi.set(__self__, "selinux", selinux)

    @property
    @pulumi.getter
    def create_host_path(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "create_host_path")

    @property
    @pulumi.getter
    def propagation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "propagation")

    @property
    @pulumi.getter
    def recursive(self) -> Optional[builtins.str]:
        return pulumi.get(self, "recursive")

    @property
    @pulumi.getter
    def selinux(self) -> Optional[builtins.str]:
        return pulumi.get(self, "selinux")


@pulumi.output_type
class ServiceVolumeConfig(dict):
    def __init__(__self__, *,
                 bind: Optional['outputs.ServiceVolumeBind'] = None,
                 consistency: Optional[builtins.str] = None,
                 read_only: Optional[builtins.bool] = None,
                 source: Optional[builtins.str] = None,
                 target: Optional[builtins.str] = None,
                 tmpfs: Optional['outputs.ServiceVolumeTmpfs'] = None,
                 type: Optional[builtins.str] = None,
                 volume: Optional['outputs.ServiceVolumeVolume'] = None):
        if bind is not None:
            pulumi.set(__self__, "bind", bind)
        if consistency is not None:
            pulumi.set(__self__, "consistency", consistency)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if tmpfs is not None:
            pulumi.set(__self__, "tmpfs", tmpfs)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def bind(self) -> Optional['outputs.ServiceVolumeBind']:
        return pulumi.get(self, "bind")

    @property
    @pulumi.getter
    def consistency(self) -> Optional[builtins.str]:
        return pulumi.get(self, "consistency")

    @property
    @pulumi.getter
    def read_only(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def tmpfs(self) -> Optional['outputs.ServiceVolumeTmpfs']:
        return pulumi.get(self, "tmpfs")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ServiceVolumeVolume']:
        return pulumi.get(self, "volume")


@pulumi.output_type
class ServiceVolumeTmpfs(dict):
    def __init__(__self__, *,
                 mode: Optional[builtins.int] = None,
                 size: Optional[builtins.int] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")


@pulumi.output_type
class ServiceVolumeVolume(dict):
    def __init__(__self__, *,
                 nocopy: Optional[builtins.bool] = None,
                 subpath: Optional[builtins.str] = None):
        if nocopy is not None:
            pulumi.set(__self__, "nocopy", nocopy)
        if subpath is not None:
            pulumi.set(__self__, "subpath", subpath)

    @property
    @pulumi.getter
    def nocopy(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "nocopy")

    @property
    @pulumi.getter
    def subpath(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subpath")


@pulumi.output_type
class ThrottleDevice(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class Trigger(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 path: builtins.str,
                 ignore: Optional[Sequence[builtins.str]] = None,
                 target: Optional[builtins.str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "path", path)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class UlimitsConfig(dict):
    def __init__(__self__, *,
                 hard: Optional[builtins.int] = None,
                 single: Optional[builtins.int] = None,
                 soft: Optional[builtins.int] = None):
        if hard is not None:
            pulumi.set(__self__, "hard", hard)
        if single is not None:
            pulumi.set(__self__, "single", single)
        if soft is not None:
            pulumi.set(__self__, "soft", soft)

    @property
    @pulumi.getter
    def hard(self) -> Optional[builtins.int]:
        return pulumi.get(self, "hard")

    @property
    @pulumi.getter
    def single(self) -> Optional[builtins.int]:
        return pulumi.get(self, "single")

    @property
    @pulumi.getter
    def soft(self) -> Optional[builtins.int]:
        return pulumi.get(self, "soft")


@pulumi.output_type
class UpdateConfig(dict):
    def __init__(__self__, *,
                 delay: Optional[builtins.int] = None,
                 failure_action: Optional[builtins.str] = None,
                 max_failure_ratio: Optional[builtins.float] = None,
                 monitor: Optional[builtins.int] = None,
                 order: Optional[builtins.str] = None,
                 parallelism: Optional[builtins.int] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if failure_action is not None:
            pulumi.set(__self__, "failure_action", failure_action)
        if max_failure_ratio is not None:
            pulumi.set(__self__, "max_failure_ratio", max_failure_ratio)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)

    @property
    @pulumi.getter
    def delay(self) -> Optional[builtins.int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def failure_action(self) -> Optional[builtins.str]:
        return pulumi.get(self, "failure_action")

    @property
    @pulumi.getter
    def max_failure_ratio(self) -> Optional[builtins.float]:
        return pulumi.get(self, "max_failure_ratio")

    @property
    @pulumi.getter
    def monitor(self) -> Optional[builtins.int]:
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def order(self) -> Optional[builtins.str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[builtins.int]:
        return pulumi.get(self, "parallelism")


@pulumi.output_type
class VolumeConfig(dict):
    def __init__(__self__, *,
                 driver: Optional[builtins.str] = None,
                 driver_opts: Optional[Mapping[str, builtins.str]] = None,
                 external: Optional[builtins.bool] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 name: Optional[builtins.str] = None):
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if driver_opts is not None:
            pulumi.set(__self__, "driver_opts", driver_opts)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def driver(self) -> Optional[builtins.str]:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def driver_opts(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "driver_opts")

    @property
    @pulumi.getter
    def external(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WeightDevice(dict):
    def __init__(__self__):
        pass


