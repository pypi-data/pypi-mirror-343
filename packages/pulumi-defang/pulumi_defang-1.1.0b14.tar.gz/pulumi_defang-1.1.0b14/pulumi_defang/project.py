# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from . import types as _types
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ProjectConfigArgs']] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Project resource.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if config_paths is not None:
            pulumi.set(__self__, "config_paths", config_paths)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ProjectConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ProjectConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="configPaths")
    def config_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "config_paths")

    @config_paths.setter
    def config_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "config_paths", value)


class Project(pulumi.CustomResource):

    pulumi_type = "defang:index:Project"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ProjectConfigArgs', 'ProjectConfigArgsDict']]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProjectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ProjectConfigArgs', 'ProjectConfigArgsDict']]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["config_paths"] = config_paths
            __props__.__dict__["alb_arn"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["services"] = None
        super(Project, __self__).__init__(
            'defang:index:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ProjectArgs.__new__(ProjectArgs)

        __props__.__dict__["alb_arn"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["config_paths"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["services"] = None
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="albArn")
    def alb_arn(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "alb_arn")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.ProjectConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="configPaths")
    def config_paths(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "config_paths")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Mapping[str, 'outputs.ServiceState']]:
        return pulumi.get(self, "services")

