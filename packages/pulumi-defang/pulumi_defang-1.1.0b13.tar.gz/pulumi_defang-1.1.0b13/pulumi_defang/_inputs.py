# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import types as _types

__all__ = [
    'ProjectConfigArgs',
    'ProjectConfigArgsDict',
]

MYPY = False

if not MYPY:
    class ProjectConfigArgsDict(TypedDict):
        services: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgsDict']]]
        configs: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgsDict']]]]
        name: NotRequired[pulumi.Input[builtins.str]]
        networks: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgsDict']]]]
        secrets: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgsDict']]]]
        volumes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgsDict']]]]
elif False:
    ProjectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectConfigArgs:
    def __init__(__self__, *,
                 services: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]],
                 configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]] = None):
        pulumi.set(__self__, "services", services)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Mapping[str, pulumi.Input['_types.ServiceConfigArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.ConfigObjConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.NetworkConfigArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.SecretConfigArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['_types.VolumeConfigArgs']]]]):
        pulumi.set(self, "volumes", value)


