# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 cloud_provider_id: Optional[pulumi.Input[builtins.str]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 deployment_mode: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.str] cloud_provider_id: The cloud provider to use. Can be one of [auto aws gcp digitalocean].
        :param pulumi.Input[builtins.str] deployment_mode: The deployment mode to use. Can be one of [DEVELOPMENT STAGING PRODUCTION].
        """
        if cloud_provider_id is None:
            cloud_provider_id = 'auto'
        if cloud_provider_id is not None:
            pulumi.set(__self__, "cloud_provider_id", cloud_provider_id)
        if debug is None:
            debug = False
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if deployment_mode is None:
            deployment_mode = 'DEVELOPMENT'
        if deployment_mode is not None:
            pulumi.set(__self__, "deployment_mode", deployment_mode)

    @property
    @pulumi.getter(name="cloudProviderID")
    def cloud_provider_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cloud provider to use. Can be one of [auto aws gcp digitalocean].
        """
        return pulumi.get(self, "cloud_provider_id")

    @cloud_provider_id.setter
    def cloud_provider_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cloud_provider_id", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The deployment mode to use. Can be one of [DEVELOPMENT STAGING PRODUCTION].
        """
        return pulumi.get(self, "deployment_mode")

    @deployment_mode.setter
    def deployment_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deployment_mode", value)


class Provider(pulumi.ProviderResource):

    pulumi_type = "pulumi:providers:defang"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider_id: Optional[pulumi.Input[builtins.str]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 deployment_mode: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Defang resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cloud_provider_id: The cloud provider to use. Can be one of [auto aws gcp digitalocean].
        :param pulumi.Input[builtins.str] deployment_mode: The deployment mode to use. Can be one of [DEVELOPMENT STAGING PRODUCTION].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Defang resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider_id: Optional[pulumi.Input[builtins.str]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 deployment_mode: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if cloud_provider_id is None:
                cloud_provider_id = 'auto'
            __props__.__dict__["cloud_provider_id"] = cloud_provider_id
            if debug is None:
                debug = False
            __props__.__dict__["debug"] = pulumi.Output.from_input(debug).apply(pulumi.runtime.to_json) if debug is not None else None
            if deployment_mode is None:
                deployment_mode = 'DEVELOPMENT'
            __props__.__dict__["deployment_mode"] = deployment_mode
        super(Provider, __self__).__init__(
            'defang',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="cloudProviderID")
    def cloud_provider_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The cloud provider to use. Can be one of [auto aws gcp digitalocean].
        """
        return pulumi.get(self, "cloud_provider_id")

    @property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The deployment mode to use. Can be one of [DEVELOPMENT STAGING PRODUCTION].
        """
        return pulumi.get(self, "deployment_mode")

