# generated by datamodel-codegen:
#   filename:  gts.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .....platform.common.search.web.v0.filter import (
    ListFilterFunctionV0,
    SimpleFilterFunctionV0,
)


class DistributionFunctionV0IntervalV0(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    from_: Annotated[int | None, Field(alias='from')] = None
    to: int | None = None
    frequency: Annotated[int, Field(ge=0)]


class EvaluationFunctionV0(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    function_name: str | None = None
    function_params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class DistributionFunctionV0(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    scope: Literal['PROJECT', 'BATCH'] | None = None
    window_days: int
    intervals: Sequence[DistributionFunctionV0IntervalV0] | None = None


class GroundTruthConfigForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str | None = None
    bucket_id: str | None = None
    mixer_portion: Annotated[float | None, Field(ge=0.0, le=1.0)] = None
    distribution_function: DistributionFunctionV0 | None = None
    filter_function: ListFilterFunctionV0 | SimpleFilterFunctionV0 | None = None
    evaluation_function: EvaluationFunctionV0 | None = None
    blocking_exclusions: Sequence[str] | None = None
