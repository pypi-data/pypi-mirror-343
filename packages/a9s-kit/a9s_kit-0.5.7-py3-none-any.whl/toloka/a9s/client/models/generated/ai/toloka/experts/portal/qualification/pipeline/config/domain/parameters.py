# generated by datamodel-codegen:
#   filename:  experts-portal-qualification.json

from __future__ import annotations

from datetime import timedelta
from typing import Annotated, Any, Literal, Mapping

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .step.criteria import (
    DirectusStatusCriteria,
    DirectusStringFieldCriteria,
    DocVerificationStatusCriteria,
    ExternallyControlledCriteria,
    InformerClosedCriteria,
    QualificationFilterCriteria,
    SopCandidateIntFieldCriteria,
    TolokaSkillCriteria,
)


class ActionParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['ACTION_SERVICE'] | None = None


class ActionServiceActionParameters(ActionParameters):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    override_parameters: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    disabled: bool | None = None


class ContextParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: (
        Literal[
            'TOLOKA_TASK',
            'INFORMER',
            'QUALIFICATION_EXERCISE',
            'QUALIFICATION_PIPELINE',
        ]
        | None
    ) = None


class OnIdleActionParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    action: ActionServiceActionParameters | None = None
    idle_timeout: Annotated[timedelta | None, Field(examples=['PT1H'])] = None


class QualificationExerciseContextParameters(ContextParameters):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    min_threshold: float | None = None
    min_thresholds_by_metric: Mapping[str, float] | None = None
    on_review_informer: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class StepEdgeParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    actions: Mapping[str, ActionServiceActionParameters] | None = None


class StepOnIdleParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    actions: Mapping[str, OnIdleActionParameters] | None = None


class StepConfigParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    informer: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    context: QualificationExerciseContextParameters | None = None
    pass_criteria: (
        DirectusStatusCriteria
        | DirectusStringFieldCriteria
        | DocVerificationStatusCriteria
        | ExternallyControlledCriteria
        | InformerClosedCriteria
        | QualificationFilterCriteria
        | SopCandidateIntFieldCriteria
        | TolokaSkillCriteria
        | None
    ) = None
    fail_criteria: (
        DirectusStatusCriteria
        | DirectusStringFieldCriteria
        | DocVerificationStatusCriteria
        | ExternallyControlledCriteria
        | InformerClosedCriteria
        | QualificationFilterCriteria
        | SopCandidateIntFieldCriteria
        | TolokaSkillCriteria
        | None
    ) = None
    skip_criteria: (
        DirectusStatusCriteria
        | DirectusStringFieldCriteria
        | DocVerificationStatusCriteria
        | ExternallyControlledCriteria
        | InformerClosedCriteria
        | QualificationFilterCriteria
        | SopCandidateIntFieldCriteria
        | TolokaSkillCriteria
        | None
    ) = None
    on_pass: StepEdgeParameters | None = None
    on_fail: StepEdgeParameters | None = None
    on_idle: StepOnIdleParameters | None = None


class PipelineStepsConfigV1Parameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    steps: Mapping[str, StepConfigParameters] | None = None
    spec_version: str | None = None
