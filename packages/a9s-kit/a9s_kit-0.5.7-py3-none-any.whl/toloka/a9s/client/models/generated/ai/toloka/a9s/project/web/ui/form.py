# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .viewform import ProjectConfigViewForm


class ProjectExtensionInstanceConfigForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    extension_id: str
    instance_id: str


class ProjectExtensionsForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    instances: Annotated[
        Sequence[ProjectExtensionInstanceConfigForm] | None,
        Field(max_length=100, min_length=0),
    ] = None


class SpecForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    viewSpec: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    inputSpec: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    outputSpec: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class InstructionForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    instruction: str | None = None


class ProjectForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    project_template_id: str | None = None
    private_comment: str | None = None
    config: ProjectConfigViewForm | None = None
    metadata: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    extensions: ProjectExtensionsForm | None = None
    tags: Annotated[Sequence[str] | None, Field(max_length=100, min_length=0)] = None
    hidden: bool | None = None
    name: Annotated[str, Field(max_length=100, min_length=0)]
