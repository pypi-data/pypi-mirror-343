# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Literal, Sequence

from pydantic import BaseModel, ConfigDict, Field


class FilterCondition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: (
        Literal[
            'SINGLE_FILTER_CONDITION',
            'LIST_FILTER_CONDITION',
            'MULTI_VALUE_FILTER_CONDITION',
        ]
        | None
    ) = None


class ListFilterCondition(FilterCondition):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    condition_join_type: Literal['AND', 'OR']
    conditions: Annotated[Sequence[FilterCondition], Field(max_length=2147483647, min_length=1)]


class MultiValueFilterCondition(FilterCondition):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: str
    operator: Literal[
        'INCLUDE_ANY_OF',
        'INCLUDE_ALL_OF',
        'EXCLUDE_ANY_OF',
        'EXCLUDE_ALL_OF',
        'BETWEEN',
    ]
    value: Sequence[str]


class SingleFilterCondition(FilterCondition):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: str
    operator: Literal[
        'EQUALS',
        'NOT_EQUALS',
        'STARTS_WITH',
        'CONTAINS',
        'NOT_CONTAINS',
        'IS_EMPTY',
        'IS_NOT_EMPTY',
        'IS',
        'IS_NOT',
        'GREATER_THAN',
        'GREATER_THAN_OR_EQUALS',
        'LESS_THAN',
        'LESS_THAN_OR_EQUALS',
        'OLDER_THAN',
        'YOUNGER_THAN',
    ]
    value: str | None = None
