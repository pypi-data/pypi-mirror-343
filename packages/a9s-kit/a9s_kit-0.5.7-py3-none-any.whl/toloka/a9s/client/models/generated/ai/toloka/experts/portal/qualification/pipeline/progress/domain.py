# generated by datamodel-codegen:
#   filename:  experts-portal-qualification.json

from __future__ import annotations

from typing import Annotated, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field


class ProgressLogResultData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    step_type: (
        Literal[
            'TOLOKA_TASK',
            'INFORMER',
            'QUALIFICATION_EXERCISE',
            'QUALIFICATION_PIPELINE',
        ]
        | None
    ) = None


class QualificationExerciseStateChangeTaskMetadata(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    project_id: str | None = None
    batch_id: str | None = None
    annotation_edit_id: str | None = None
    annotation_id: str | None = None


class QualificationExerciseStateChangeTaskInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    edit_id: str | None = None
    task_id: str | None = None
    status: Literal['PENDING', 'IN_PROGRESS', 'REDO', 'ON_REVIEW', 'ACCEPTED', 'REJECTED'] | None = None
    comment: str | None = None
    created_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    modified_at: Annotated[str | None, Field(examples=['2024-08-12T12:41:07.629'])] = None
    metadata: QualificationExerciseStateChangeTaskMetadata | None = None


class QualificationExerciseLogResultData(ProgressLogResultData):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    test_results: Mapping[str, float] | None = None
    tasks: Sequence[QualificationExerciseStateChangeTaskInfo] | None = None
