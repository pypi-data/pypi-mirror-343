# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, SerializeAsAny

from ....annotation.parameters import (
    QuorumAnnotationProcessParameters,
    StatusWorkflowAnnotationProcessParameters,
    TemporalAnnotationProcessParameters,
)


class UploadFormV1Data(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_group_id: str | None = None
    external_id: str | None = None
    draft_values: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    metadata: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    params: (
        Sequence[
            QuorumAnnotationProcessParameters
            | StatusWorkflowAnnotationProcessParameters
            | TemporalAnnotationProcessParameters
        ]
        | None
    ) = None


class UploadViewV1AnnotationProcess(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    id: str | None = None
    type: str | None = None


class UploadViewV1Data(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    annotation_group_id: str | None = None
    external_id: str | None = None
    annotation_id: str | None = None
    annotation_processes: Sequence[UploadViewV1AnnotationProcess] | None = None


class UploadFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    batch_id: str
    data: Sequence[UploadFormV1Data]
    skip_on_repeated_external_id_in_single_request: bool | None = None


class UploadViewV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    data: Sequence[UploadViewV1Data] | None = None
