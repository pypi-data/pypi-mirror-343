# generated by datamodel-codegen:
#   filename:  qms.json

from __future__ import annotations

from typing import Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, SerializeAsAny

from .condition import (
    AggregationByAccountConditionViewForm,
    AggregationByAnnotationByAccountConditionViewForm,
    AggregationByAnnotationBySignalNameByAccountConditionViewForm,
)


class FilterRestrictionViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    scope_access_level: Literal['NO_ACCESS', 'ONLY_ASSIGNED']


class QualityMetricViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['AGREEMENT', 'ANNOTATION_EDIT_TIME']
    params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class TagFilterViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    any_of: Sequence[str] | None = None
    none_of: Sequence[str] | None = None
    all_of: Sequence[str] | None = None


class QualityActionViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    action: str
    params: Mapping[str, Any] | SerializeAsAny[BaseModel]
    comment: str | None = None
    reset_history: bool | None = None


class QualityRuleViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str
    params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    actions: Sequence[QualityActionViewForm]
    filter: TagFilterViewForm | None = None


class RevokeAccessRuleViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str
    params: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    filter: TagFilterViewForm


class QualityTriggerViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    conditions: Sequence[
        AggregationByAccountConditionViewForm
        | AggregationByAnnotationByAccountConditionViewForm
        | AggregationByAnnotationBySignalNameByAccountConditionViewForm
    ]
    actions: Sequence[QualityActionViewForm]
    name: str | None = None


class QualityFilterViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    conditions: Sequence[
        AggregationByAccountConditionViewForm
        | AggregationByAnnotationByAccountConditionViewForm
        | AggregationByAnnotationBySignalNameByAccountConditionViewForm
    ]
    restriction: FilterRestrictionViewForm | None = None
    name: str | None = None
    meta: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
