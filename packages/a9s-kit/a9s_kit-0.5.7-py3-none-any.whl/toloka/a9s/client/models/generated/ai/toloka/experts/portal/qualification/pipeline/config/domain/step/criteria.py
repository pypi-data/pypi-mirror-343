# generated by datamodel-codegen:
#   filename:  experts-portal-qualification.json

from __future__ import annotations

from typing import FrozenSet, Literal

from pydantic import BaseModel, ConfigDict

from .....domain import QualificationFilterRequirements


class Criteria(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: (
        Literal[
            'TOLOKA_SKILL',
            'DIRECTUS_STATUS',
            'DIRECTUS_STRING_FIELD',
            'CLOSED_INFORMER',
            'QUALIFICATION_FILTER',
            'SOP_CANDIDATE_INT_FIELD',
            'DOC_VERIFICATION_STATUS',
            'EXTERNALLY_CONTROLLED',
        ]
        | None
    ) = None


class DirectusStatusCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    status: str


class DirectusStringFieldCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    field: Literal['y_verification_status']
    values: FrozenSet[str]


class DocVerificationStatusCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    reached: Literal['NOT_STARTED', 'STARTED', 'ON_REVIEW', 'APPROVED', 'DECLINED']


class ExternallyControlledCriteria(Criteria):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class InformerClosedCriteria(Criteria):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class SopCandidateIntFieldCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    operator: Literal['EQ', 'NE', 'GT', 'GTE', 'LT', 'LTE'] | None = None
    field: Literal['APPLICATION_PUBLIC_STAGE_POSITION'] | None = None
    value: int | None = None


class TolokaSkillCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    skill_id: int | None = None
    skill_threshold: float | None = None
    skill_operator: Literal['EQ', 'NE', 'GT', 'GTE', 'LT', 'LTE'] | None = None


class QualificationFilterCriteria(Criteria):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    requirements: QualificationFilterRequirements
