# generated by datamodel-codegen:
#   filename:  qms.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .aggregation_function import AggregationFunctionViewForm


class AggregatedByAccountThresholdConditionViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    aggregated_value_gte: float | None = None
    aggregated_value_lte: float | None = None


class AnnotationNumberViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    required_min: Annotated[int | None, Field(ge=1)] = None
    required_max: Annotated[int | None, Field(ge=1)] = None
    use_last_n: Annotated[int | None, Field(ge=1)] = None


class ConditionViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    query_template: str


class SignalNumberViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    required_min: Annotated[int | None, Field(ge=1)] = None
    required_max: Annotated[int | None, Field(ge=1)] = None
    use_last_n: Annotated[int | None, Field(ge=1)] = None


class SignalViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    source: str | None = None
    name: str


class TagsViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    any_of: Sequence[str] | None = None
    none_of: Sequence[str] | None = None
    all_of: Sequence[str] | None = None


class WindowViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['SLIDING', 'CURRENT_DAY_UTC']
    length_hours: Annotated[int | None, Field(ge=1, le=2160)] = None


class AggregationByAccountConditionViewForm(ConditionViewForm):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    signals: Sequence[SignalViewForm]
    tags: TagsViewForm
    window: WindowViewForm | None = None
    signal_number: SignalNumberViewForm | None = None
    aggregate_by_account_function: AggregationFunctionViewForm
    aggregate_by_account_thresholds: AggregatedByAccountThresholdConditionViewForm
    meta: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    query_template: str


class AggregationByAnnotationByAccountConditionViewForm(ConditionViewForm):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    signals: Sequence[SignalViewForm]
    tags: TagsViewForm
    window: WindowViewForm | None = None
    annotations_number: AnnotationNumberViewForm | None = None
    aggregate_by_annotation_function: AggregationFunctionViewForm
    aggregate_by_account_function: AggregationFunctionViewForm
    aggregate_by_account_thresholds: AggregatedByAccountThresholdConditionViewForm
    meta: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    query_template: str


class AggregationByAnnotationBySignalNameByAccountConditionViewForm(ConditionViewForm):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    signals: Sequence[SignalViewForm]
    tags: TagsViewForm
    window: WindowViewForm | None = None
    annotations_number: AnnotationNumberViewForm | None = None
    aggregate_by_annotation_by_signal_name_function: AggregationFunctionViewForm
    aggregate_by_account_function: AggregationFunctionViewForm
    aggregate_by_account_thresholds: AggregatedByAccountThresholdConditionViewForm
    meta: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    query_template: str
