# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ActiveTaskLimitViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    value: int | None = None


class BatchCompletionViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['AUTO', 'MANUAL']


class FirstNTaskLimitViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    value: int | None = None


class Dimension(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[str, Field(max_length=10, min_length=0)]


class StageConfigViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    enabled: bool | None = None
    dimensions: Mapping[str, Sequence[Dimension]] | None = None


class TimeLimitViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    edit_ttl_in_seconds: Annotated[int | None, Field(ge=1, le=604800)] = None


class ProjectConfigViewForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    batch_completion: BatchCompletionViewForm | None = None
    time_limit: TimeLimitViewForm | None = None
    active_task_limit: ActiveTaskLimitViewForm | None = None
    first_n_task_limit: FirstNTaskLimitViewForm | None = None
    stage_config: StageConfigViewForm | None = None
