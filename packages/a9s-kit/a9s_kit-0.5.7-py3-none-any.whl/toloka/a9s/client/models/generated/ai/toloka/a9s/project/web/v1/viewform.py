# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Literal, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, RootModel, SerializeAsAny


class ActiveTaskLimitViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    value: int | None = None


class BatchCompletionViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['AUTO', 'MANUAL']


class FirstNTaskLimitViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    value: int | None = None


class ProjectExtensionInstanceConfigViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    extension_id: str | None = None
    instance_id: str | None = None


class ProjectExtensionsViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    instances: Annotated[
        Sequence[ProjectExtensionInstanceConfigViewFormV1] | None,
        Field(max_length=100, min_length=0),
    ] = None


class PublicInstructionViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: Literal['MARKDOWN', 'HTML', 'TEXT'] | None = None
    value: str | None = None


class SpecificationViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: str
    view: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    input: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    output: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None


class Dimension(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[str, Field(max_length=10, min_length=0)]


class StageConfigViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    enabled: bool | None = None
    dimensions: Mapping[str, Sequence[Dimension]] | None = None


class TimeLimitViewFormV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    edit_ttl_in_seconds: Annotated[int | None, Field(ge=1, le=604800)] = None
