# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import vizierapi_pb2 as src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2


class VizierServiceStub(object):
    """The API that manages all communication with a particular Vizier cluster.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteScript = channel.unary_stream(
                '/px.api.vizierpb.VizierService/ExecuteScript',
                request_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptRequest.SerializeToString,
                response_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptResponse.FromString,
                )
        self.HealthCheck = channel.unary_stream(
                '/px.api.vizierpb.VizierService/HealthCheck',
                request_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckResponse.FromString,
                )
        self.GenerateOTelScript = channel.unary_unary(
                '/px.api.vizierpb.VizierService/GenerateOTelScript',
                request_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptRequest.SerializeToString,
                response_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptResponse.FromString,
                )


class VizierServiceServicer(object):
    """The API that manages all communication with a particular Vizier cluster.
    """

    def ExecuteScript(self, request, context):
        """Execute a script on the Vizier cluster and stream the results of that execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Start a stream to receive health updates from the Vizier service. For most practical
        purposes, users should only need `ExecuteScript()` and can safely ignore this call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateOTelScript(self, request, context):
        """GenerateScript takes in a script that returns DataFrames and generates an OTel Export script
        that sends the DataFrames over to an OpenTelemetry collector. If the input script does
        not return a DataFrame, an error is returned.
        If the generator is unable to export columns from any DataFrames, an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VizierServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteScript': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteScript,
                    request_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptRequest.FromString,
                    response_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_stream_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckRequest.FromString,
                    response_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GenerateOTelScript': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateOTelScript,
                    request_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptRequest.FromString,
                    response_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'px.api.vizierpb.VizierService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VizierService(object):
    """The API that manages all communication with a particular Vizier cluster.
    """

    @staticmethod
    def ExecuteScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/px.api.vizierpb.VizierService/ExecuteScript',
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptRequest.SerializeToString,
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.ExecuteScriptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/px.api.vizierpb.VizierService/HealthCheck',
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckRequest.SerializeToString,
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateOTelScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/px.api.vizierpb.VizierService/GenerateOTelScript',
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptRequest.SerializeToString,
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.GenerateOTelScriptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VizierDebugServiceStub(object):
    """Service used to run debug commands on Vizier.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DebugLog = channel.unary_stream(
                '/px.api.vizierpb.VizierDebugService/DebugLog',
                request_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogRequest.SerializeToString,
                response_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogResponse.FromString,
                )
        self.DebugPods = channel.unary_stream(
                '/px.api.vizierpb.VizierDebugService/DebugPods',
                request_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsRequest.SerializeToString,
                response_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsResponse.FromString,
                )


class VizierDebugServiceServicer(object):
    """Service used to run debug commands on Vizier.
    """

    def DebugLog(self, request, context):
        """Get a debug log for a specific vizier pod.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugPods(self, request, context):
        """Returns a list of Vizier pods and their statuses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VizierDebugServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DebugLog': grpc.unary_stream_rpc_method_handler(
                    servicer.DebugLog,
                    request_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogRequest.FromString,
                    response_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogResponse.SerializeToString,
            ),
            'DebugPods': grpc.unary_stream_rpc_method_handler(
                    servicer.DebugPods,
                    request_deserializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsRequest.FromString,
                    response_serializer=src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'px.api.vizierpb.VizierDebugService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VizierDebugService(object):
    """Service used to run debug commands on Vizier.
    """

    @staticmethod
    def DebugLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/px.api.vizierpb.VizierDebugService/DebugLog',
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogRequest.SerializeToString,
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugPods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/px.api.vizierpb.VizierDebugService/DebugPods',
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsRequest.SerializeToString,
            src_dot_api_dot_proto_dot_vizierpb_dot_vizierapi__pb2.DebugPodsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
