# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lndgrpc.compiled import neutrino_pb2 as lndgrpc_dot_compiled_dot_neutrino__pb2


class NeutrinoKitStub(object):
    """NeutrinoKit is a service that can be used to get information about the
    current state of the neutrino instance, fetch blocks and add/remove peers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/Status',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.StatusRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.StatusResponse.FromString,
                )
        self.AddPeer = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/AddPeer',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerResponse.FromString,
                )
        self.DisconnectPeer = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/DisconnectPeer',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerResponse.FromString,
                )
        self.IsBanned = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/IsBanned',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedResponse.FromString,
                )
        self.GetBlockHeader = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/GetBlockHeader',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderResponse.FromString,
                )
        self.GetBlock = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/GetBlock',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockResponse.FromString,
                )
        self.GetCFilter = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/GetCFilter',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterResponse.FromString,
                )
        self.GetBlockHash = channel.unary_unary(
                '/neutrinorpc.NeutrinoKit/GetBlockHash',
                request_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashResponse.FromString,
                )


class NeutrinoKitServicer(object):
    """NeutrinoKit is a service that can be used to get information about the
    current state of the neutrino instance, fetch blocks and add/remove peers.
    """

    def Status(self, request, context):
        """
        Status returns the status of the light client neutrino instance,
        along with height and hash of the best block, and a list of connected
        peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPeer(self, request, context):
        """
        AddPeer adds a new peer that has already been connected to the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectPeer(self, request, context):
        """
        DisconnectPeer disconnects a peer by target address. Both outbound and
        inbound nodes will be searched for the target node. An error message will
        be returned if the peer was not found.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsBanned(self, request, context):
        """
        IsBanned returns true if the peer is banned, otherwise false.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockHeader(self, request, context):
        """
        GetBlockHeader returns a block header with a particular block hash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
        """
        GetBlock returns a block with a particular block hash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCFilter(self, request, context):
        """
        GetCFilter returns a compact filter from a block.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockHash(self, request, context):
        """
        GetBlockHash returns the header hash of a block at a given height.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NeutrinoKitServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.StatusRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.StatusResponse.SerializeToString,
            ),
            'AddPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPeer,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerResponse.SerializeToString,
            ),
            'DisconnectPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectPeer,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerResponse.SerializeToString,
            ),
            'IsBanned': grpc.unary_unary_rpc_method_handler(
                    servicer.IsBanned,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedResponse.SerializeToString,
            ),
            'GetBlockHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockHeader,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderResponse.SerializeToString,
            ),
            'GetBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlock,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockResponse.SerializeToString,
            ),
            'GetCFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCFilter,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterResponse.SerializeToString,
            ),
            'GetBlockHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockHash,
                    request_deserializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'neutrinorpc.NeutrinoKit', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NeutrinoKit(object):
    """NeutrinoKit is a service that can be used to get information about the
    current state of the neutrino instance, fetch blocks and add/remove peers.
    """

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/Status',
            lndgrpc_dot_compiled_dot_neutrino__pb2.StatusRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/AddPeer',
            lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.AddPeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisconnectPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/DisconnectPeer',
            lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.DisconnectPeerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsBanned(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/IsBanned',
            lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.IsBannedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/GetBlockHeader',
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/GetBlock',
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/GetCFilter',
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetCFilterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutrinorpc.NeutrinoKit/GetBlockHash',
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_neutrino__pb2.GetBlockHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
