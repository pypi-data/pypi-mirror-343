import 'examples/Games/Misc/PredictBitString.game';

Game PredictBitStringIntermdiate1(Int lambda) {
    Bool bad;

    Void Initialize() {
        bad = false;
    }

    Bool Predict(BitString<lambda> x) {
        BitString<lambda> s <- BitString<lambda>;
        if (x == s) {
            bad = true;
            return true;
        }
        return false;
    }
}

Game PredictBitStringItermediate2(Int lambda) {
    Bool bad;

    Void Initialize() {
        bad = false;
    }

    Bool Predict(BitString<lambda> x) {
        BitString<lambda> s <- BitString<lambda>;
        if (x == s) {
            bad = true;
        }
        return false;
    }
}

proof:

let:
    Int lambda;

assume:

theorem:
    Predict(lambda);

games:
    Predict(lambda).Real against PredictBitString(lambda).Adversary;
    PredictBitStringIntermediate1(lambda) against PredictBitString(lambda).Adversary;
    PredictBitStringIntermediate2(lambda) against PredictBitString(lambda).Adversary;
    Predict(lambda).Random against PredictBitString(lambda).Adversary;
