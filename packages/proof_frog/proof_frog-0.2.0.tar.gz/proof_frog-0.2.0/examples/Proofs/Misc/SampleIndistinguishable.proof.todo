import 'examples/Games/Misc/Sample.game';

Game SampleIntermediate1(Int lambda) {
    Set<BitString<lambda>> R;
    Bool bad;

    Void Initialize() {
        R = {};
        bad = false;
    }

    BitString<lambda> Samp() {
        BitString<lambda> r <- BitString<lambda>;
        if (r in R) {
            bad = true;
        }
        R = R + r;
        return r;
    }
}

Game SampleIntermediate2(Int lambda) {
    Set<BitString<lambda>> R;
    Bool bad;

    Void Initialize() {
        R = {};
        bad = false;
    }

    BitString<lambda> Samp() {
        BitString<lambda> r <- BitString<lambda>;
        if (r in R) {
            bad = true;
            r <- BitString<lambda> \ R;
        }
        R = R + r;
        return r;
    }
}

proof:

let:
    Int lambda;

assume:

theorem:
    Sample(lambda);

games:
    Sample(lambda).Replacement against Sample(lambda).Adversary;
    SampleIntermediate1(lambda) against Sample(lambda).Adversary;
    SampleIntermediate2(lambda) against Sample(lambda).Adversary;
    Sample(lambda).NoReplacement against Sample(lambda).Adversary;
