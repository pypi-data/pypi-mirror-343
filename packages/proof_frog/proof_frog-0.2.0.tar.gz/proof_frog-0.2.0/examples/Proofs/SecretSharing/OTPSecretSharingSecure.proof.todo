import 'examples/Primitives/SecretSharing.primitive';
import 'examples/Scheme/SecretSharing/OTP.scheme';
import 'examples/Games/Misc/OTPOTS.game';
import 'examples/Games/SecretSharing/Security.game';

Game SecurityIntermediate1(SecretSharing E) {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        E.Share s0 <- E.Share;
        E.Share s1 <- s0 + mL;

        Array<E.Share, E.shareCount> s = [s0, s1];

        Array<E.Share, E.shareCount> toReturn = [];
        for (Int index in U) {
            if (index >= 0 && index <= |s|) {
                toReturn.push(s[index]);
            }
        }

        return toReturn;
    }
}

Game SecurityIntermdiate2(SecretSharing E) {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        if (U == {0}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mL;
            return {s1};
        } else if (U == {1}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mL;
            return {s1};
        } else {
            return {};
        }
    }
}

Game SecurityIntermdiate3(SecretSharing E) {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        if (U == {0}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mR;
        } else if (U == {1}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mL;
        } else {
            return {};
        }
    }
}

Reduction R(SecretSharing E, Int l) compose OTPOTS(l) against Security(E).Adversary {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        if (U == {0}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mR;
        } else if (U == {1}) {
            E.Share s1 <- g.Eavesdrop(mL, mR);
        } else {
            return {};
        }
    }
}

Game SecurityIntermediate4(SecretSharing E) {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        if (U == {0}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mR;
        } else if (U == {1}) {
            E.Share s0 <- E.Share;
            E.Share s1 <- s0 + mR;
        } else {
            return {};
        }
    }
}

Game SecurityIntermediate5(SecretSharing E) {
    Array<E.Share, E.shareCount>? Share(E.Message mL, E.message mR, Set<Int> U) {
        if (|U| >= E.threshold) {
            return None;
        }

        E.Share s0 <- E.Share;
        E.Share s1 <- s0 + mR;

        Array<E.Share, E.shareCount> s = [s0, s1];

        Array<E.Share, E.shareCount> toReturn = [];
        for (Int index in U) {
            if (index >= 0 && index <= |s|) {
                toReturn.push(s[index]);
            }
        }

        return toReturn;
    }
}

proof:

let:
    Int l;
    OTP E = OTP(l);

assume:
    OTPOTS(l);

theorem:
    Security(E);

games:
    Security(E).Left against Security(E).Adversary;

    SecurityIntermediate1(E) against Security(E).Adversary;

    SecurityIntermediate2(E) against Security(E).Adversary;

    SecurityIntermediate3(E) against Security(E).Adversary;

    OTPOTS(l).Left compose R(E) against Security(E).Adversary;

    OTPOTS(l).Right compose R(E) against Security(E).Adversary;

    SecurityIntermediate4(E) against Security(E).Adversary;

    SecurityIntermediate5(E) against Security(E).Adversary;

    Security(E).Right against Security(E).Adversary;
