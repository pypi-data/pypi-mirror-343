import 'examples/Primitives/NonNullableSymEnc.primitive';
import 'examples/Schemes/SymEnc/GeneralDoubleSymEnc.scheme';
import 'examples/Games/SymEnc/OneTimeUniformCiphertexts.game';

Reduction R1(GeneralDoubleSymEnc D, SymEnc S, SymEnc T) compose OneTimeUniformCiphertexts(T) against OneTimeUniformCiphertexts(D).Adversary {
    D.Ciphertext CTXT(D.Message m) {
        S.Key k1 = S.KeyGen();
        S.Ciphertext c1 = S.Enc(k1, m);
        T.Ciphertext c2 = challenger.CTXT(c1);
        return c2;
    }
}

proof:

let:
    Set MessageSpace;
    Set KeySpace1;
    Set KeySpace2;

    Set IntermediateSpace;
    Set CiphertextSpace;

    SymEnc S = SymEnc(MessageSpace, IntermediateSpace, KeySpace1);
    SymEnc T = SymEnc(IntermediateSpace, CiphertextSpace, KeySpace2);
    GeneralDoubleSymEnc D = GeneralDoubleSymEnc(S, T);

assume:
    OneTimeUniformCiphertexts(T);

theorem:
    OneTimeUniformCiphertexts(D);

games:
    OneTimeUniformCiphertexts(D).Real against OneTimeUniformCiphertexts(D).Adversary;

    // By codewise equivalency
    OneTimeUniformCiphertexts(T).Real compose R1(D, S, T) against OneTimeUniformCiphertexts(D).Adversary;

    // By assumption
    OneTimeUniformCiphertexts(T).Random compose R1(D, S, T) against OneTimeUniformCiphertexts(D).Adversary;

    // By codewise equivalency
    OneTimeUniformCiphertexts(D).Random against OneTimeUniformCiphertexts(D).Adversary;
