import 'examples/Primitives/NonNullableSymEnc.primitive';
import 'examples/Schemes/SymEnc/GeneralDoubleSymEnc.scheme';
import 'examples/Games/SymEnc/CPA$.game';

Reduction R1(SymEnc D, SymEnc E, GeneralDoubleSymEnc DSE) compose CPA$(E) against CPA$(DSE).Adversary {
    D.Key dKey;
    Void Initialize() {
        dKey = D.KeyGen();
    }
    DSE.Ciphertext CTXT(DSE.Message m) {
        D.Ciphertext c1 = D.Enc(dKey, m);
        E.Ciphertext c2 = challenger.CTXT(c1);
        return c2;
    }
}

proof:

let:
    Set D_K;
    Set E_K;
    Set M;
    Set C_1;
    Set C_2;

    SymEnc D = SymEnc(M, C_1, D_K);
    SymEnc E = SymEnc(C_1, C_2, E_K);
    GeneralDoubleSymEnc DSE = GeneralDoubleSymEnc(D, E);

assume:
    CPA$(E);

theorem:
    CPA$(DSE);

games:
    CPA$(DSE).Real against CPA$(DSE).Adversary;

    CPA$(E).Real compose R1(D, E, DSE) against CPA$(DSE).Adversary;

    CPA$(E).Random compose R1(D, E, DSE) against CPA$(DSE).Adversary;

    CPA$(DSE).Random against CPA$(DSE).Adversary;
