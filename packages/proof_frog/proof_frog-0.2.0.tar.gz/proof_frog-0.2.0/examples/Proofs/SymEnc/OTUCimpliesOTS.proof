import 'examples/Primitives/SymEnc.primitive';
import 'examples/Games/SymEnc/OneTimeSecrecy.game';
import 'examples/Games/SymEnc/OneTimeUniformCiphertexts.game';

Reduction R1(SymEnc se) compose OneTimeUniformCiphertexts(se) against OneTimeSecrecy(se).Adversary {
    se.Ciphertext Eavesdrop(se.Message mL, se.Message mR) {
        return challenger.CTXT(mL);
    }
}

Reduction R2(SymEnc se2) compose OneTimeUniformCiphertexts(se2) against OneTimeSecrecy(se2).Adversary {
    se2.Ciphertext Eavesdrop(se2.Message mL, se2.Message mR) {
        return challenger.CTXT(mR);
    }
}

proof:

let:

    Set ProofMessageSpace;
    Set ProofCiphertextSpace;
    Set ProofKeySpace;

    SymEnc proofE = SymEnc(ProofMessageSpace, ProofCiphertextSpace, ProofKeySpace);

assume:
    OneTimeUniformCiphertexts(proofE);

theorem:
    OneTimeSecrecy(proofE);

games:

    OneTimeSecrecy(proofE).Left against OneTimeSecrecy(proofE).Adversary;

    // Codewise-equivalency
    OneTimeUniformCiphertexts(proofE).Real compose R1(proofE) against OneTimeSecrecy(proofE).Adversary;

    // By assumption
    OneTimeUniformCiphertexts(proofE).Random compose R1(proofE) against OneTimeSecrecy(proofE).Adversary;

    // mL argument is not used in R
    OneTimeUniformCiphertexts(proofE).Random compose R2(proofE) against OneTimeSecrecy(proofE).Adversary;

    // By assumption
    OneTimeUniformCiphertexts(proofE).Real compose R2(proofE) against OneTimeSecrecy(proofE).Adversary;

    // Codewise equivalency
    OneTimeSecrecy(proofE).Right against OneTimeSecrecy(proofE).Adversary;
