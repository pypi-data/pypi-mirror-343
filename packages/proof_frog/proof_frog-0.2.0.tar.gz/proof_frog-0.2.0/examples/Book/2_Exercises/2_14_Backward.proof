import 'examples/Primitives/SymEnc.primitive';
import 'examples/Book/2_Exercises/2_14.game';
import 'examples/Games/SymEnc/OneTimeSecrecy.game';

Reduction R1(SymEnc E) compose Foo(E) against OneTimeSecrecy(E).Adversary {
    E.Ciphertext Eavesdrop(E.Message mL, E.Message mR) {
        E.Ciphertext c = challenger.Foo(mL);
        return c;
    }
}

Reduction R2(SymEnc E) compose Foo(E) against OneTimeSecrecy(E).Adversary {
    E.Ciphertext Eavesdrop(E.Message mL, E.Message mR) {
        E.Ciphertext c = challenger.Foo(mR);
        return c;
    }
}

proof:

let:
    Set MessageSpace;
    Set CiphertextSpace;
    Set KeySpace;

    SymEnc E = SymEnc(MessageSpace, CiphertextSpace, KeySpace);

assume:
    Foo(E);

theorem:
    OneTimeSecrecy(E);

games:
    OneTimeSecrecy(E).Left against OneTimeSecrecy(E).Adversary;
    
    // By codewise equivalency
    Foo(E).Left compose R1(E) against OneTimeSecrecy(E).Adversary;
    
    // By assumption
    Foo(E).Right compose R1(E) against OneTimeSecrecy(E).Adversary;

    // mL argument is not used in R1, replace with mR
    Foo(E).Right compose R2(E) against OneTimeSecrecy(E).Adversary;

    // By assumption
    Foo(E).Left compose R2(E) against OneTimeSecrecy(E).Adversary;
    
    // By codewise equivalency
    OneTimeSecrecy(E).Right against OneTimeSecrecy(E).Adversary;
