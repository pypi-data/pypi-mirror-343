import 'examples/Primitives/SymEnc.primitive';
import 'examples/Book/2_Exercises/2_13_SymEncSquared.scheme';
import 'examples/Games/SymEnc/OneTimeSecrecy.game';

Reduction R(SymEncSquared S, SymEnc E) 
compose OneTimeSecrecy(E) against OneTimeSecrecy(S).Adversary {
    S.Ciphertext Eavesdrop(S.Message mL, S.Message mR) {
        E.Ciphertext c1 = challenger.Eavesdrop(mL, mR);
        E.Ciphertext c2 = challenger.Eavesdrop(mL, mR);
        return [c1, c2];
    }
}

proof:

let:
    Set MessageSpace;
    Set CiphertextSpace;
    Set KeySpace;

    SymEnc E = SymEnc(MessageSpace, CiphertextSpace, KeySpace);
    SymEncSquared S = SymEncSquared(E);

assume:
    OneTimeSecrecy(E);

theorem:
    OneTimeSecrecy(S);

games:
    OneTimeSecrecy(S).Left against OneTimeSecrecy(S).Adversary;
    
    // By codewise equivalency
    OneTimeSecrecy(E).Left compose R(S, E) against OneTimeSecrecy(S).Adversary;
    
    // By assumption
    OneTimeSecrecy(E).Right compose R(S, E) against OneTimeSecrecy(S).Adversary;
    
    // By codewise equivalency
    OneTimeSecrecy(S).Right against OneTimeSecrecy(S).Adversary;
