import 'examples/Primitives/PRG.primitive';
import 'examples/Book/5_Exercises/5_8_e.scheme';
import 'examples/Book/5/5_2_PseudoOTP.scheme';
import 'examples/Games/PRG/Security.game';
import 'examples/Games/SymEnc/OneTimeUniformCiphertexts.game';

Reduction R1(PRG G, PRG_5_8_e H) compose Security(G) against Security(H).Adversary {
    BitString<H.lambda + H.stretch> Query() {
        return challenger.Query() + G.evaluate(0b0);
    }
}

Reduction R2(PseudoOTP P, PRG G, PRG_5_8_e H) compose OneTimeUniformCiphertexts(P) against Security(H).Adversary {
    BitString<H.lambda + H.stretch> Query() {
        BitString<3 * H.lambda> result = challenger.CTXT(G.evaluate(0b0));
        return result;
    }
}

proof:

let:
    Int lambda;
    PRG G = PRG(lambda, 2 * lambda);
    PRG_5_8_e H = PRG_5_8_e(G);
    PseudoOTP P = PseudoOTP(lambda, 2 * lambda, G);

assume:
    Security(G);
    OneTimeUniformCiphertexts(P); // see 'examples/Book/5_Exercises/5_8_PseudoOTP_OTUC.proof'

theorem:
    Security(H);

games:
    Security(H).Real against Security(H).Adversary;

    Security(G).Real compose R1(G, H) against Security(H).Adversary;

    OneTimeUniformCiphertexts(P).Real compose R2(P, G, H) against Security(H).Adversary;

    OneTimeUniformCiphertexts(P).Random compose R2(P, G, H) against Security(H).Adversary;

    Security(H).Random against Security(H).Adversary;
