import 'examples/Primitives/PRG.primitive';
import 'examples/Book/5/5_2_PseudoOTP.scheme';
import 'examples/Games/SymEnc/OneTimeUniformCiphertexts.game';
import 'examples/Games/PRG/Security.game';
import 'examples/Schemes/SymEnc/OTP.scheme';

Reduction R1(OTP E, PRG G, PseudoOTP P) compose Security(G) against OneTimeUniformCiphertexts(P).Adversary {
    E.Ciphertext CTXT(E.Message m) {
        return challenger.Query() + m;
    }
}

Reduction R2(OTP E, PseudoOTP P) compose OneTimeUniformCiphertexts(E) against OneTimeUniformCiphertexts(P).Adversary {
    E.Ciphertext CTXT(E.Message m) {
        E.Ciphertext result = challenger.CTXT(m);
        return result;
    }
}

proof:

let:
    Int lambda;
    PRG G = PRG(lambda, 2 * lambda);
    PseudoOTP P = PseudoOTP(lambda, 2 * lambda, G);
    OTP E = OTP(3 * lambda);

assume:
    Security(G);
    OneTimeUniformCiphertexts(E);

theorem:
    OneTimeUniformCiphertexts(P);

games:
    OneTimeUniformCiphertexts(P).Real against OneTimeUniformCiphertexts(P).Adversary;

    Security(G).Real compose R1(E, G, P) against OneTimeUniformCiphertexts(P).Adversary;

    Security(G).Random compose R1(E, G, P) against OneTimeUniformCiphertexts(P).Adversary;

    OneTimeUniformCiphertexts(E).Real compose R2(E, P) against OneTimeUniformCiphertexts(P).Adversary;

    OneTimeUniformCiphertexts(E).Random compose R2(E, P) against OneTimeUniformCiphertexts(P).Adversary;

    OneTimeUniformCiphertexts(P).Random against OneTimeUniformCiphertexts(P).Adversary;
