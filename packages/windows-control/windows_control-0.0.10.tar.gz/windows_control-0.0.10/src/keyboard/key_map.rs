use enigo::Key;
use pyo3::pyfunction;

#[pyfunction]
/// ref:https://stackoverflow.com/questions/73431203/how-to-check-if-a-key-is-currently-pressed-in-rust
pub fn get_pressed_key_strs(key_index: Option<Vec<i32>>) -> Vec<String> {
    let mut key_strs = Vec::new();
    let key_index = key_index.unwrap_or_else(get_pressed_key_index);

    for i in &key_index {
        if WIN_KEY_MAP.contains_key(i) {
            key_strs.push(WIN_KEY_MAP.get(i).unwrap().0.into());
        }
    }

    key_strs
}

#[pyfunction]
pub fn get_pressed_key_index() -> Vec<i32> {
    let mut keys = Vec::new();
    for i in 0x1..0xFE {
        let is_pressed = unsafe { winapi::um::winuser::GetAsyncKeyState(i) } & (1 << 15) != 0;
        if is_pressed {
            //     let key = match i as i32 {
            //         winapi::um::winuser::VK_BACK => Key::Backspace,
            //         winapi::um::winuser::VK_TAB => Key::Tab,
            //         winapi::um::winuser::VK_RETURN => Key::Return,
            //         winapi::um::winuser::VK_SHIFT => Key::Shift,
            //         winapi::um::winuser::VK_CONTROL => Key::Control,
            //         winapi::um::winuser::VK_MENU => Key::Alt,
            //         winapi::um::winuser::VK_PAUSE => Key::Pause,
            //         winapi::um::winuser::VK_CAPITAL => Key::CapsLock,
            //         winapi::um::winuser::VK_ESCAPE => Key::Escape,
            //         winapi::um::winuser::VK_SPACE => Key::Space,
            //         winapi::um::winuser::VK_PRIOR => Key::PageUp,
            //         winapi::um::winuser::VK_NEXT => Key::PageDown,
            //         winapi::um::winuser::VK_END => Key::End,
            //         winapi::um::winuser::VK_HOME => Key::Home,
            //         winapi::um::winuser::VK_LEFT => Key::LeftArrow,
            //         winapi::um::winuser::VK_UP => Key::UpArrow,
            //         winapi::um::winuser::VK_RIGHT => Key::RightArrow,
            //         winapi::um::winuser::VK_DOWN => Key::DownArrow,
            //         winapi::um::winuser::VK_SELECT => Key::Select,
            //         winapi::um::winuser::VK_PRINT => Key::Print,
            //         winapi::um::winuser::VK_EXECUTE => Key::Execute,
            //         winapi::um::winuser::VK_SNAPSHOT => Key::Snapshot,
            //         winapi::um::winuser::VK_INSERT => Key::Insert,
            //         winapi::um::winuser::VK_DELETE => Key::Delete,
            //         winapi::um::winuser::VK_HELP => Key::Help,
            //         winapi::um::winuser::VK_LWIN => Key::Meta,
            //         winapi::um::winuser::VK_RWIN => Key::Meta,
            //         winapi::um::winuser::VK_APPS => Key::Apps,
            //         winapi::um::winuser::VK_SLEEP => Key::Sleep,
            //         winapi::um::winuser::VK_NUMPAD0 => Key::Numpad0,
            //         winapi::um::winuser::VK_NUMPAD1 => Key::Numpad1,
            //         winapi::um::winuser::VK_NUMPAD2 => Key::Numpad2,
            //         winapi::um::winuser::VK_NUMPAD3 => Key::Numpad3,
            //         winapi::um::winuser::VK_NUMPAD4 => Key::Numpad4,
            //         winapi::um::winuser::VK_NUMPAD5 => Key::Numpad5,
            //         winapi::um::winuser::VK_NUMPAD6 => Key::Numpad6,
            //         winapi::um::winuser::VK_NUMPAD7 => Key::Numpad7,
            //         winapi::um::winuser::VK_NUMPAD8 => Key::Numpad8,
            //         winapi::um::winuser::VK_NUMPAD9 => Key::Numpad9,
            //         winapi::um::winuser::VK_MULTIPLY => Key::Multiply,
            //         winapi::um::winuser::VK_ADD => Key::Add,
            //         winapi::um::winuser::VK_SEPARATOR => Key::OEMComma,
            //         winapi::um::winuser::VK_SUBTRACT => Key::Subtract,
            //         winapi::um::winuser::VK_DECIMAL => Key::Decimal,
            //         winapi::um::winuser::VK_DIVIDE => Key::Divide,
            //         winapi::um::winuser::VK_F1 => Key::F1,
            //         winapi::um::winuser::VK_F2 => Key::F2,
            //         winapi::um::winuser::VK_F3 => Key::F3,
            //         winapi::um::winuser::VK_F4 => Key::F4,
            //         winapi::um::winuser::VK_F5 => Key::F5,
            //         winapi::um::winuser::VK_F6 => Key::F6,
            //         winapi::um::winuser::VK_F7 => Key::F7,
            //         winapi::um::winuser::VK_F8 => Key::F8,
            //         winapi::um::winuser::VK_F9 => Key::F9,
            //         winapi::um::winuser::VK_F10 => Key::F10,
            //         winapi::um::winuser::VK_F11 => Key::F11,
            //         winapi::um::winuser::VK_F12 => Key::F12,
            //         winapi::um::winuser::VK_NUMLOCK => Key::Numlock,
            //         winapi::um::winuser::VK_SCROLL => Key::Scroll,
            //         winapi::um::winuser::VK_LSHIFT => Key::LShift,
            //         winapi::um::winuser::VK_RSHIFT => Key::RShift,
            //         winapi::um::winuser::VK_LCONTROL => Key::LControl,
            //         winapi::um::winuser::VK_RCONTROL => Key::RControl,
            //         winapi::um::winuser::VK_LMENU => Key::LMenu,
            //         winapi::um::winuser::VK_RMENU => Key::RMenu,
            //         winapi::um::winuser::VK_BROWSER_BACK => Key::BrowserBack,
            //         winapi::um::winuser::VK_BROWSER_FORWARD => Key::BrowserForward,
            //         winapi::um::winuser::VK_BROWSER_REFRESH => Key::BrowserRefresh,
            //         winapi::um::winuser::VK_BROWSER_STOP => Key::BrowserStop,
            //         winapi::um::winuser::VK_BROWSER_SEARCH => Key::BrowserSearch,
            //         winapi::um::winuser::VK_BROWSER_FAVORITES => Key::BrowserFavorites,
            //         winapi::um::winuser::VK_BROWSER_HOME => Key::BrowserHome,
            //         winapi::um::winuser::VK_VOLUME_MUTE => Key::VolumeMute,
            //         winapi::um::winuser::VK_VOLUME_DOWN => Key::VolumeDown,
            //         winapi::um::winuser::VK_VOLUME_UP => Key::VolumeUp,
            //         winapi::um::winuser::VK_MEDIA_NEXT_TRACK => Key::MediaNextTrack,
            //         winapi::um::winuser::VK_MEDIA_PREV_TRACK => Key::MediaPrevTrack,
            //         winapi::um::winuser::VK_MEDIA_STOP => Key::MediaStop,
            //         winapi::um::winuser::VK_MEDIA_PLAY_PAUSE => Key::MediaPlayPause,
            //         winapi::um::winuser::VK_LAUNCH_MAIL => Key::LaunchMail,
            //         winapi::um::winuser::VK_LAUNCH_MEDIA_SELECT => Key::LaunchMediaSelect,
            //         winapi::um::winuser::VK_LAUNCH_APP1 => Key::LaunchApp1,
            //         winapi::um::winuser::VK_LAUNCH_APP2 => Key::LaunchApp2,
            //         winapi::um::winuser::VK_OEM_1 => Key::OEM1,
            //         winapi::um::winuser::VK_OEM_PLUS => Key::OEMPlus,
            //         winapi::um::winuser::VK_OEM_COMMA => Key::OEMComma,
            //         winapi::um::winuser::VK_OEM_MINUS => Key::OEMMinus,
            //         winapi::um::winuser::VK_OEM_PERIOD => Key::OEMPeriod,
            //         winapi::um::winuser::VK_OEM_2 => Key::OEM2,
            //         winapi::um::winuser::VK_OEM_3 => Key::OEM3,
            //         winapi::um::winuser::VK_OEM_4 => Key::OEM4,
            //         winapi::um::winuser::VK_OEM_5 => Key::OEM5,
            //         winapi::um::winuser::VK_OEM_6 => Key::OEM6,
            //         winapi::um::winuser::VK_OEM_7 => Key::OEM7,
            //         winapi::um::winuser::VK_OEM_8 => Key::OEM8,
            //         winapi::um::winuser::VK_OEM_AX => Key::OEMAx,
            //         winapi::um::winuser::VK_OEM_102 => Key::OEM102,
            //         winapi::um::winuser::VK_ICO_HELP => Key::IcoHelp,
            //         winapi::um::winuser::VK_ICO_00 => Key::Ico00,
            //         winapi::um::winuser::VK_PROCESSKEY => Key::Processkey,
            //         winapi::um::winuser::VK_ICO_CLEAR => Key::IcoClear,
            //         winapi::um::winuser::VK_PACKET => Key::Packet,
            //         winapi::um::winuser::VK_OEM_RESET => Key::OEMReset,
            //         winapi::um::winuser::VK_OEM_JUMP => Key::OEMJump,
            //         winapi::um::winuser::VK_OEM_PA1 => Key::OEMPA1,
            //         winapi::um::winuser::VK_OEM_PA2 => Key::OEMPA2,
            //         winapi::um::winuser::VK_OEM_PA3 => Key::OEMPA3,
            //         winapi::um::winuser::VK_OEM_WSCTRL => Key::OEMWsctrl,
            //         winapi::um::winuser::VK_OEM_CUSEL => Key::OEMCusel,
            //         winapi::um::winuser::VK_OEM_ATTN => Key::OEMAttn,
            //         winapi::um::winuser::VK_OEM_FINISH => Key::OEMFinish,
            //         winapi::um::winuser::VK_OEM_COPY => Key::OEMCopy,
            //         winapi::um::winuser::VK_OEM_AUTO => Key::OEMAuto,
            //         winapi::um::winuser::VK_OEM_ENLW => Key::OEMEnlw,
            //         winapi::um::winuser::VK_OEM_BACKTAB => Key::OEMBacktab,
            //         winapi::um::winuser::VK_ATTN => Key::Attn,
            //         winapi::um::winuser::VK_CRSEL => Key::Crsel,
            //         winapi::um::winuser::VK_EXSEL => Key::Exsel,
            //         winapi::um::winuser::VK_EREOF => Key::Ereof,
            //         winapi::um::winuser::VK_PLAY => Key::Play,
            //         winapi::um::winuser::VK_ZOOM => Key::Zoom,
            //         winapi::um::winuser::VK_NONAME => Key::NoName,
            //         winapi::um::winuser::VK_PA1 => Key::PA1,
            //         winapi::um::winuser::VK_OEM_CLEAR => Key::OEMClear,
            //         _ => {
            //             let c = i as u8 as char;
            //             println!("got customized char: {}", c);
            //             Key::Layout(c)
            //         }
            //     };
            //     println!("{:?} is pressed, add it to keys", key);
            keys.push(i);
        }
    }

    // println!("keys: {:?}", keys);
    keys
}

use phf::phf_map;
// for the key, the corresponding macro is defined in `winapi::um::winuser::VK_*`
// Official explanation: https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
// detect your present key: https://www.keycode.info/
pub static WIN_KEY_MAP: phf::Map<i32, (&'static str, Key)> = phf_map! {
    0x08i32=> ("Backspace", Key::Backspace),
    0x09i32=> ("Tab", Key::Tab),
    0x0Ci32=> ("Clear", Key::Clear),
    0x0Di32=> ("Enter", Key::Return),
    0x10i32=> ("Shift", Key::Shift),
    0x11i32=> ("Ctrl", Key::Control),
    0x12i32=> ("Menu/Alt", Key::Alt), // NOTE: it is exactly the alt key
    0x13i32=> ("Pause", Key::Pause),
    0x14i32=> ("CapsLock", Key::CapsLock),
    0x1Bi32=> ("Esc", Key::Escape),
    0x20i32=> ("Space", Key::Space),
    0x21i32=> ("PageUp", Key::PageUp),
    0x22i32=> ("PageDown", Key::PageDown),
    0x23i32=> ("End", Key::End),
    0x24i32=> ("Home", Key::Home),
    0x25i32=> ("Left", Key::LeftArrow),
    0x26i32=> ("Up", Key::UpArrow),
    0x27i32=> ("Right", Key::RightArrow),
    0x28i32=> ("Down", Key::DownArrow),
    0x2Di32=> ("Insert", Key::Insert),
    0x2Ei32=> ("Delete", Key::Delete),
    0x30i32=> ("0", Key::Layout('0')),
    0x31i32=> ("1", Key::Layout('1')),
    0x32i32=> ("2", Key::Layout('2')),
    0x33i32=> ("3", Key::Layout('3')),
    0x34i32=> ("4", Key::Layout('4')),
    0x35i32=> ("5", Key::Layout('5')),
    0x36i32=> ("6", Key::Layout('6')),
    0x37i32=> ("7", Key::Layout('7')),
    0x38i32=> ("8", Key::Layout('8')),
    0x39i32=> ("9", Key::Layout('9')),
    0x41i32=> ("a", Key::Layout('a')),
    0x42i32=> ("b", Key::Layout('b')),
    0x43i32=> ("c", Key::Layout('c')),
    0x44i32=> ("d", Key::Layout('d')),
    0x45i32=> ("e", Key::Layout('e')),
    0x46i32=> ("f", Key::Layout('f')),
    0x47i32=> ("g", Key::Layout('g')),
    0x48i32=> ("h", Key::Layout('h')),
    0x49i32=> ("i", Key::Layout('i')),
    0x4Ai32=> ("j", Key::Layout('j')),
    0x4Bi32=> ("k", Key::Layout('k')),
    0x4Ci32=> ("l", Key::Layout('l')),
    0x4Di32=> ("m", Key::Layout('m')),
    0x4Ei32=> ("n", Key::Layout('n')),
    0x4Fi32=> ("o", Key::Layout('o')),
    0x50i32=> ("p", Key::Layout('p')),
    0x51i32=> ("q", Key::Layout('q')),
    0x52i32=> ("r", Key::Layout('r')),
    0x53i32=> ("s", Key::Layout('s')),
    0x54i32=> ("t", Key::Layout('t')),
    0x55i32=> ("u", Key::Layout('u')),
    0x56i32=> ("v", Key::Layout('v')),
    0x57i32=> ("w", Key::Layout('w')),
    0x58i32=> ("x", Key::Layout('x')),
    0x59i32=> ("y", Key::Layout('y')),
    0x5Ai32=> ("z", Key::Layout('z')),
    0x5Bi32=> ("LWin", Key::Meta),
    0x5Ci32=> ("RWin", Key::Meta),
    0x60i32=> ("NumPad0", Key::Numpad0,),
    0x61i32=> ("NumPad1", Key::Numpad1,),
    0x62i32=> ("NumPad2", Key::Numpad2,),
    0x63i32=> ("NumPad3", Key::Numpad3,),
    0x64i32=> ("NumPad4", Key::Numpad4,),
    0x65i32=> ("NumPad5", Key::Numpad5,),
    0x66i32=> ("NumPad6", Key::Numpad6,),
    0x67i32=> ("NumPad7", Key::Numpad7,),
    0x68i32=> ("NumPad8", Key::Numpad8,),
    0x69i32=> ("NumPad9", Key::Numpad9,),
    0x6Ai32=> ("*", Key::Layout('*')),
    0x6Bi32=> ("+", Key::Layout('+')),
    0x6Ci32=> ("Separator", Key::Layout(',')),
    0x6Di32=> ("-", Key::Subtract),
    0x6Ei32=> (".", Key::Decimal),
    0x6Fi32=> ("/", Key::Layout('/')),
    0x70i32=> ("F1", Key::F1),
    0x71i32=> ("F2", Key::F2),
    0x72i32=> ("F3", Key::F3),
    0x73i32=> ("F4", Key::F4),
    0x74i32=> ("F5", Key::F5),
    0x75i32=> ("F6", Key::F6),
    0x76i32=> ("F7", Key::F7),
    0x77i32=> ("F8", Key::F8),
    0x78i32=> ("F9", Key::F9),
    0x79i32=> ("F10", Key::F10),
    0x7Ai32=> ("F11", Key::F11),
    0x7Bi32=> ("F12", Key::F12),
    0x90i32=> ("NumLock", Key::Numlock),
    0x91i32=> ("ScrollLock", Key::Scroll),
    0xA0i32=> ("LShift", Key::LShift),
    0xA1i32=> ("RShift", Key::RShift),
    0xA2i32=> ("LCtrl", Key::LControl),
    0xA3i32=> ("RCtrl", Key::RControl),
    0xA4i32=> ("LMenu/LAlt", Key::LMenu),
    0xA5i32=> ("RMenu/RAlt", Key::RMenu),
    // NOTE: some of the below are numpad keys
    0xBAi32=> (";", Key::Layout(';')),
    0xBBi32=> ("=", Key::Layout('=')),
    0xBCi32=> (",", Key::Layout(',')),
    0xBDi32=> ("-", Key::Layout('-')),
    0xBEi32=> (".", Key::Layout('.')),
    0xBFi32=> ("/", Key::Layout('/')),
    0xC0i32=> ("`", Key::Layout('`')),
    0xDBi32=> ("[", Key::Layout('[')),
    0xDCi32=> ("\\", Key::Layout('\\')),
    0xDDi32=> ("]", Key::Layout(']')),
    0xDEi32=> ("'", Key::Layout('\'')),
};
