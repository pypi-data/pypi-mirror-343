from _typeshed import Incomplete
from collections.abc import Iterator
from concurrent.futures import Future
from tlc.core.url import Scheme as Scheme, Url as Url
from tlc.core.url_adapter import IfExistsOption as IfExistsOption, UrlAdapter as UrlAdapter, UrlAdapterDirEntry as UrlAdapterDirEntry
from tlc.core.url_adapter_registry import UrlAdapterRegistry as UrlAdapterRegistry

class ApiUrlAdapter(UrlAdapter):
    '''
    A mostly dummy adapter for resolving URLs starting with `api://`.

    In fact, there is never a need to resolve "api://" URLs because the
    objects will already be in the ObjectRegistry, but this is a convenient
    place for putting other related functionality.
    '''
    api_scheme: Incomplete
    api_protocol: Incomplete
    def schemes(self) -> list[Scheme]: ...
    def read_string_content_from_url(self, url: Url) -> str: ...
    def read_string_content_from_url_async(self, url: Url) -> Future: ...
    def write_string_content_to_url_async(self, url: Url, content: str, options: IfExistsOption = ...) -> Future: ...
    def read_binary_content_from_url(self, url: Url) -> bytes: ...
    def read_binary_content_from_url_async(self, url: Url) -> Future: ...
    def write_binary_content_to_url_async(self, url: Url, content: bytes, options: IfExistsOption = ...) -> Future: ...
    def delete_url(self, url: Url) -> None: ...
    def delete_url_async(self, url: Url) -> Future: ...
    def copy_url_async(self, source: Url, destination: Url, options: IfExistsOption = ...) -> Future: ...
    def make_dirs(self, url: Url, exist_ok: bool = False) -> None: ...
    def make_dirs_async(self, url: Url, exist_ok: bool = False) -> Future: ...
    def get_file_size(self, url: Url) -> int: ...
    def get_file_size_async(self, url: Url) -> Future: ...
    def list_dir(self, url: Url) -> Iterator[UrlAdapterDirEntry]: ...
    def list_dir_async(self, url: Url) -> Future: ...
    def exists(self, url: Url) -> bool: ...
    def exists_async(self, url: Url) -> Future: ...
    def is_dir(self, url: Url) -> bool: ...
    def is_dir_async(self, url: Url) -> Future: ...
    def is_writable(self, url: Url) -> bool: ...
    def is_writable_async(self, url: Url) -> Future: ...
    def stat(self, url: Url) -> UrlAdapterDirEntry:
        """API URLs don't support file status operations.

        :param url: The URL to get status for
        :raises NotImplementedError: Always, as API URLs don't support stat
        """
    def stat_async(self, url: Url) -> Future: ...
    def touch(self, url: Url) -> None:
        """API URLs don't support file modification operations.

        :param url: The URL to touch
        :raises NotImplementedError: Always, as API URLs don't support touch
        """
