Metadata-Version: 2.1
Name: robotframework-domretrylibrary
Version: 4.0.1
Summary: AI-powered smart locator with retry functionality for Robot Framework using OpenAI
Home-page: https://github.com/plaushku/robotframework-domretrylibrary
Author: Kristijan Plaushku
Author-email: info@plaushkusolutions.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Framework :: Robot Framework
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: robotframework (>=4.0.0)
Requires-Dist: python-dotenv (>=0.19.0)
Requires-Dist: requests (>=2.25.0)

# Robot Framework DomRetryLibrary

A Robot Framework library with AI-powered fallback for locator variables, enhancing test reliability by using OpenAI to dynamically generate element locators when primary locators fail.

## What's New in Version 4.0.0

- **Major improvement in reliability** with a complete redesign of XPath generation strategy
- New **ID-First approach** that prioritizes direct element selection using unique attributes 
- Simplified selectors that don't break with complex DOM structures or forms
- Optimized for modern web applications with dynamic and nested elements

## Installation

Install the library using pip:

```bash
pip install robotframework-domretrylibrary
```

## Usage

Import the library in your Robot Framework test file:

```robotframework
*** Settings ***
Library           SeleniumLibrary
Library           DomRetryLibrary
```

Define your locators and AI fallback descriptions:

```robotframework
*** Variables ***
${USERNAME_FIELD}      css=#username_id
${AI_USERNAME_FIELD}   the username input field
```

Use the AI fallback in your tests (either with variable name or resolved variable):

```robotframework
*** Test Cases ***
Login Test
    Open Browser    https://example.com    chrome
    # Both syntaxes work in version 3.1.0+
    AI Fallback Locator    Input Text    USERNAME_FIELD    myusername
    # OR directly use the resolved variable
    AI Fallback Locator    Input Text    ${USERNAME_FIELD}    myusername
    Close Browser
```

You can also use custom keywords with fallback:

```robotframework
*** Keywords ***
Wait And Input Text
    [Arguments]    ${locator}    ${text}    ${timeout}=10
    [Documentation]    Input text with AI fallback if the primary locator fails
    ${status}    ${error}=    Run Keyword And Ignore Error    Input Text    ${locator}    ${text}
    Run Keyword If    '${status}' == 'FAIL'    AI Fallback Locator    Input Text    ${locator}    ${text}
```

## How The New Selectors Work (v4.0.0+)

The library now uses a prioritized approach to find elements:

1. **ID-First**: If an element has an ID, use it directly: `//*[@id='login-button']`
2. **Test Attributes**: Look for testing-specific attributes: `//*[@data-test='username']`
3. **Form Attributes**: For inputs, use name/placeholder: `//*[@placeholder='Enter username']`
4. **Meaningful Classes**: Only if needed: `//*[contains(@class, 'login-button')]`

This approach is much more reliable than complex hierarchical selectors and works even in deeply nested DOM structures with forms and dynamic elements.

## API Key Setup

Store your OpenAI API key in a .env file or provide it when initializing the library:

```robotframework
*** Settings ***
Library    DomRetryLibrary    api_key=${OPENAI_API_KEY}
```

## License

MIT 

