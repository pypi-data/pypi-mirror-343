# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawKnowledgeBasesClient
import datetime as dt
from ..core.request_options import RequestOptions
from .types.knowledge_bases_list_response_item import KnowledgeBasesListResponseItem
from .types.knowledge_bases_create_request import KnowledgeBasesCreateRequest
from .types.knowledge_bases_create_response import KnowledgeBasesCreateResponse
from .types.knowledge_bases_get_response import KnowledgeBasesGetResponse
from .types.knowledge_bases_delete_response import KnowledgeBasesDeleteResponse
from .types.knowledge_bases_update_request import KnowledgeBasesUpdateRequest
from .types.knowledge_bases_update_response import KnowledgeBasesUpdateResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawKnowledgeBasesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class KnowledgeBasesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawKnowledgeBasesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawKnowledgeBasesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawKnowledgeBasesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[KnowledgeBasesListResponseItem]:
        """
        Parameters
        ----------
        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[KnowledgeBasesListResponseItem]

        """
        response = self._raw_client.list(
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return response.data

    def create(
        self, *, request: KnowledgeBasesCreateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesCreateResponse:
        """
        Parameters
        ----------
        request : KnowledgeBasesCreateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesCreateResponse

        """
        response = self._raw_client.create(request=request, request_options=request_options)
        return response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> KnowledgeBasesGetResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesGetResponse

        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesDeleteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesDeleteResponse

        """
        response = self._raw_client.delete(id, request_options=request_options)
        return response.data

    def update(
        self, id: str, *, request: KnowledgeBasesUpdateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesUpdateResponse:
        """
        Parameters
        ----------
        id : str

        request : KnowledgeBasesUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesUpdateResponse

        """
        response = self._raw_client.update(id, request=request, request_options=request_options)
        return response.data


class AsyncKnowledgeBasesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawKnowledgeBasesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawKnowledgeBasesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawKnowledgeBasesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[KnowledgeBasesListResponseItem]:
        """
        Parameters
        ----------
        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[KnowledgeBasesListResponseItem]

        """
        response = await self._raw_client.list(
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return response.data

    async def create(
        self, *, request: KnowledgeBasesCreateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesCreateResponse:
        """
        Parameters
        ----------
        request : KnowledgeBasesCreateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesCreateResponse

        """
        response = await self._raw_client.create(request=request, request_options=request_options)
        return response.data

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesGetResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesGetResponse

        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesDeleteResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesDeleteResponse

        """
        response = await self._raw_client.delete(id, request_options=request_options)
        return response.data

    async def update(
        self, id: str, *, request: KnowledgeBasesUpdateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> KnowledgeBasesUpdateResponse:
        """
        Parameters
        ----------
        id : str

        request : KnowledgeBasesUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KnowledgeBasesUpdateResponse

        """
        response = await self._raw_client.update(id, request=request, request_options=request_options)
        return response.data
