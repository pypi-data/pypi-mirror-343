# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from .types.logging_controller_logs_delete_query_request_type import LoggingControllerLogsDeleteQueryRequestType
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse


class RawLogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def logging_controller_logs_delete_query(
        self,
        *,
        type: typing.Optional[LoggingControllerLogsDeleteQueryRequestType] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        type : typing.Optional[LoggingControllerLogsDeleteQueryRequestType]
            This is the type of the log.

        assistant_id : typing.Optional[str]

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "logs",
            method="DELETE",
            params={
                "type": type,
                "assistantId": assistant_id,
                "phoneNumberId": phone_number_id,
                "customerId": customer_id,
                "squadId": squad_id,
                "callId": call_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def logging_controller_logs_delete_query(
        self,
        *,
        type: typing.Optional[LoggingControllerLogsDeleteQueryRequestType] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        type : typing.Optional[LoggingControllerLogsDeleteQueryRequestType]
            This is the type of the log.

        assistant_id : typing.Optional[str]

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "logs",
            method="DELETE",
            params={
                "type": type,
                "assistantId": assistant_id,
                "phoneNumberId": phone_number_id,
                "customerId": customer_id,
                "squadId": squad_id,
                "callId": call_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
