# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BackoffPlan(UncheckedBaseModel):
    max_retries: typing_extensions.Annotated[float, FieldMetadata(alias="maxRetries")] = pydantic.Field()
    """
    This is the maximum number of retries to attempt if the request fails. Defaults to 0 (no retries).
    
    @default 0
    """

    type: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    This is the type of backoff plan to use. Defaults to fixed.
    
    @default fixed
    """

    base_delay_seconds: typing_extensions.Annotated[float, FieldMetadata(alias="baseDelaySeconds")] = pydantic.Field()
    """
    This is the base delay in seconds. For linear backoff, this is the delay between each retry. For exponential backoff, this is the initial delay.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
