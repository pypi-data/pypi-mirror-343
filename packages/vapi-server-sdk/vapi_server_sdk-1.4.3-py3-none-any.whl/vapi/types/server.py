# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .backoff_plan import BackoffPlan
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Server(UncheckedBaseModel):
    timeout_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="timeoutSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the timeout in seconds for the request to your server. Defaults to 20 seconds.
    
    @default 20
    """

    url: str = pydantic.Field()
    """
    API endpoint to send requests to.
    """

    secret: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.
    
    Same precedence logic as server.
    """

    headers: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    These are the custom headers to include in the request sent to your server.
    
    Each key-value pair represents a header name and its value.
    """

    backoff_plan: typing_extensions.Annotated[typing.Optional[BackoffPlan], FieldMetadata(alias="backoffPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the backoff plan to use if the request fails.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
