# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
import typing_extensions
from .client_message_tool_calls_tool_with_tool_call_list_item import ClientMessageToolCallsToolWithToolCallListItem
from ..core.serialization import FieldMetadata
from .tool_call import ToolCall
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ClientMessageToolCalls(UncheckedBaseModel):
    type: typing.Optional[typing.Literal["tool-calls"]] = pydantic.Field(default=None)
    """
    This is the type of the message. "tool-calls" is sent to call a tool.
    """

    tool_with_tool_call_list: typing_extensions.Annotated[
        typing.List[ClientMessageToolCallsToolWithToolCallListItem], FieldMetadata(alias="toolWithToolCallList")
    ] = pydantic.Field()
    """
    This is the list of tools calls that the model is requesting along with the original tool configuration.
    """

    tool_call_list: typing_extensions.Annotated[typing.List[ToolCall], FieldMetadata(alias="toolCallList")] = (
        pydantic.Field()
    )
    """
    This is the list of tool calls that the model is requesting.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
