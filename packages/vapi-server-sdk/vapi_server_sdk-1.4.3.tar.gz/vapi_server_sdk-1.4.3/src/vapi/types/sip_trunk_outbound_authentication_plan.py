# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .sip_trunk_outbound_sip_register_plan import SipTrunkOutboundSipRegisterPlan
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SipTrunkOutboundAuthenticationPlan(UncheckedBaseModel):
    auth_password: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="authPassword")] = (
        pydantic.Field(default=None)
    )
    """
    This is not returned in the API.
    """

    auth_username: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="authUsername")] = None
    sip_register_plan: typing_extensions.Annotated[
        typing.Optional[SipTrunkOutboundSipRegisterPlan], FieldMetadata(alias="sipRegisterPlan")
    ] = pydantic.Field(default=None)
    """
    This can be used to configure if SIP register is required by the SIP trunk. If not provided, no SIP registration will be attempted.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
