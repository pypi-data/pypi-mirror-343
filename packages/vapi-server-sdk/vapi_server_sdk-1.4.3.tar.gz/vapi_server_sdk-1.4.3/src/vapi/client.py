# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import VapiEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .calls.client import CallsClient
from .assistants.client import AssistantsClient
from .phone_numbers.client import PhoneNumbersClient
from .tools.client import ToolsClient
from .files.client import FilesClient
from .knowledge_bases.client import KnowledgeBasesClient
from .workflow.client import WorkflowClient
from .squads.client import SquadsClient
from .test_suites.client import TestSuitesClient
from .test_suite_tests.client import TestSuiteTestsClient
from .test_suite_runs.client import TestSuiteRunsClient
from .analytics.client import AnalyticsClient
from .logs.client import LogsClient
from .core.client_wrapper import AsyncClientWrapper
from .calls.client import AsyncCallsClient
from .assistants.client import AsyncAssistantsClient
from .phone_numbers.client import AsyncPhoneNumbersClient
from .tools.client import AsyncToolsClient
from .files.client import AsyncFilesClient
from .knowledge_bases.client import AsyncKnowledgeBasesClient
from .workflow.client import AsyncWorkflowClient
from .squads.client import AsyncSquadsClient
from .test_suites.client import AsyncTestSuitesClient
from .test_suite_tests.client import AsyncTestSuiteTestsClient
from .test_suite_runs.client import AsyncTestSuiteRunsClient
from .analytics.client import AsyncAnalyticsClient
from .logs.client import AsyncLogsClient


class Vapi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : VapiEnvironment
        The environment to use for requests from the client. from .environment import VapiEnvironment



        Defaults to VapiEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from vapi import Vapi

    client = Vapi(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: VapiEnvironment = VapiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.calls = CallsClient(client_wrapper=self._client_wrapper)
        self.assistants = AssistantsClient(client_wrapper=self._client_wrapper)
        self.phone_numbers = PhoneNumbersClient(client_wrapper=self._client_wrapper)
        self.tools = ToolsClient(client_wrapper=self._client_wrapper)
        self.files = FilesClient(client_wrapper=self._client_wrapper)
        self.knowledge_bases = KnowledgeBasesClient(client_wrapper=self._client_wrapper)
        self.workflow = WorkflowClient(client_wrapper=self._client_wrapper)
        self.squads = SquadsClient(client_wrapper=self._client_wrapper)
        self.test_suites = TestSuitesClient(client_wrapper=self._client_wrapper)
        self.test_suite_tests = TestSuiteTestsClient(client_wrapper=self._client_wrapper)
        self.test_suite_runs = TestSuiteRunsClient(client_wrapper=self._client_wrapper)
        self.analytics = AnalyticsClient(client_wrapper=self._client_wrapper)
        self.logs = LogsClient(client_wrapper=self._client_wrapper)


class AsyncVapi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : VapiEnvironment
        The environment to use for requests from the client. from .environment import VapiEnvironment



        Defaults to VapiEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from vapi import AsyncVapi

    client = AsyncVapi(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: VapiEnvironment = VapiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.calls = AsyncCallsClient(client_wrapper=self._client_wrapper)
        self.assistants = AsyncAssistantsClient(client_wrapper=self._client_wrapper)
        self.phone_numbers = AsyncPhoneNumbersClient(client_wrapper=self._client_wrapper)
        self.tools = AsyncToolsClient(client_wrapper=self._client_wrapper)
        self.files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        self.knowledge_bases = AsyncKnowledgeBasesClient(client_wrapper=self._client_wrapper)
        self.workflow = AsyncWorkflowClient(client_wrapper=self._client_wrapper)
        self.squads = AsyncSquadsClient(client_wrapper=self._client_wrapper)
        self.test_suites = AsyncTestSuitesClient(client_wrapper=self._client_wrapper)
        self.test_suite_tests = AsyncTestSuiteTestsClient(client_wrapper=self._client_wrapper)
        self.test_suite_runs = AsyncTestSuiteRunsClient(client_wrapper=self._client_wrapper)
        self.analytics = AsyncAnalyticsClient(client_wrapper=self._client_wrapper)
        self.logs = AsyncLogsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: VapiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
