import abc
import pandas as pd
from abc import ABC, abstractmethod
from gllm_datastore.sql_data_store.types import QueryFilter as QueryFilter, QueryOptions as QueryOptions
from typing import Any

class BaseSQLDataStore(ABC, metaclass=abc.ABCMeta):
    """Abstract base class for SQL data stores.

    This class defines the interface for all SQL data store implementations.
    Subclasses must implement the abstract methods.
    """
    @abstractmethod
    async def query(self, query: str, params: dict[str, Any] | None = None) -> pd.DataFrame:
        """Executes raw SQL query.

        This method must be implemented by subclasses to execute a raw SQL query.
        Use this method for raw queries, complex queries, or for executing a query generated by LLM.

        Args:
            query (str): The query string to execute.
            params (dict[str, Any] | None, optional): Parameters to bind to the query. Defaults to None.

        Returns:
            pd.DataFrame: A DataFrame of query results.

        Raises:
            NotImplementedError: If the method is not implemented.
        """
    @abstractmethod
    def create(self, **kwargs: Any) -> None:
        """Create data using available information in kwargs.

        This method must be implemented by subclasses to create data in the data store.

        Args:
            **kwargs (Any): A dictionary of information to create data.

        Raises:
            NotImplementedError: If the method is not implemented.
        """
    @abstractmethod
    def read(self, filters: QueryFilter | None = None, options: QueryOptions | None = None, **kwargs: Any) -> pd.DataFrame:
        """Read data from the data store using optional filters and options.

        This method must be implemented by subclasses to read data from the data store.
        Use this method for simple queries with filters and options.

        Args:
            filters (QueryFilter | None, optional): Filters to apply to the query. Defaults to None.
            options (QueryOptions | None, optional): Options to apply to the query. Defaults to None.
            **kwargs (Any): A dictionary of additional information to support the read method.

        Returns:
            pd.DataFrame: A DataFrame of query results.

        Raises:
            NotImplementedError: If the method is not implemented.
        """
    @abstractmethod
    def update(self, update_values: dict[str, Any], filters: QueryFilter | None = None, **kwargs: Any) -> None:
        """Update data in the data store using optional filters and update values.

        This method must be implemented by subclasses to update data in the data store.

        Args:
            update_values (dict[str, Any]): Values to update in the data store.
            filters (QueryFilter | None, optional): Filters to apply to the query. Defaults to None.
            **kwargs (Any): A dictionary of additional information to support the update method.

        Raises:
            NotImplementedError: If the method is not implemented.
        """
    @abstractmethod
    def delete(self, filters: QueryFilter | None = None, allow_delete_all: bool = False, **kwargs: Any) -> None:
        """Delete data in the data store using filters.

        This method must be implemented by subclasses to delete data in the data store.

        Args:
            filters (QueryFilter | None, optional): Filters to apply to the query. Defaults to None.
            allow_delete_all (bool, optional): A flag to allow deleting all data. Defaults to False.
            **kwargs (Any): A dictionary of additional information to support the delete method.

        Raises:
            NotImplementedError: If the method is not implemented.
        """
