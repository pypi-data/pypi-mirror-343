(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["packages_nbformat_lib_index_js-_b1e10"],{

/***/ "../packages/nbformat/lib/index.js":
/*!*****************************************!*\
  !*** ../packages/nbformat/lib/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAJOR_VERSION": () => (/* binding */ MAJOR_VERSION),
/* harmony export */   "MINOR_VERSION": () => (/* binding */ MINOR_VERSION),
/* harmony export */   "validateMimeValue": () => (/* binding */ validateMimeValue),
/* harmony export */   "isRaw": () => (/* binding */ isRaw),
/* harmony export */   "isMarkdown": () => (/* binding */ isMarkdown),
/* harmony export */   "isCode": () => (/* binding */ isCode),
/* harmony export */   "isExecuteResult": () => (/* binding */ isExecuteResult),
/* harmony export */   "isDisplayData": () => (/* binding */ isDisplayData),
/* harmony export */   "isDisplayUpdate": () => (/* binding */ isDisplayUpdate),
/* harmony export */   "isStream": () => (/* binding */ isStream),
/* harmony export */   "isError": () => (/* binding */ isError)
/* harmony export */ });
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ "webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils");
/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/**
 * @packageDocumentation
 * @module nbformat
 */
// Notebook format interfaces
// https://nbformat.readthedocs.io/en/latest/format_description.html
// https://github.com/jupyter/nbformat/blob/master/nbformat/v4/nbformat.v4.schema.json

/**
 * The earliest major version of the notebook format we support.
 */
const MAJOR_VERSION = 4;
/**
 * The earliest minor version of the notebook format we support.
 */
const MINOR_VERSION = 4;
/**
 * Validate a mime type/value pair.
 *
 * @param type - The mimetype name.
 *
 * @param value - The value associated with the type.
 *
 * @returns Whether the type/value pair are valid.
 */
function validateMimeValue(type, value) {
    // Check if "application/json" or "application/foo+json"
    const jsonTest = /^application\/(.*?)+\+json$/;
    const isJSONType = type === 'application/json' || jsonTest.test(type);
    const isString = (x) => {
        return Object.prototype.toString.call(x) === '[object String]';
    };
    // If it is an array, make sure if is not a JSON type and it is an
    // array of strings.
    if (Array.isArray(value)) {
        if (isJSONType) {
            return false;
        }
        let valid = true;
        value.forEach(v => {
            if (!isString(v)) {
                valid = false;
            }
        });
        return valid;
    }
    // If it is a string, make sure we are not a JSON type.
    if (isString(value)) {
        return !isJSONType;
    }
    // It is not a string, make sure it is a JSON type.
    if (!isJSONType) {
        return false;
    }
    // It is a JSON type, make sure it is a valid JSON object.
    return _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.JSONExt.isObject(value);
}
/**
 * Test whether a cell is a raw cell.
 */
function isRaw(cell) {
    return cell.cell_type === 'raw';
}
/**
 * Test whether a cell is a markdown cell.
 */
function isMarkdown(cell) {
    return cell.cell_type === 'markdown';
}
/**
 * Test whether a cell is a code cell.
 */
function isCode(cell) {
    return cell.cell_type === 'code';
}
/**
 * Test whether an output is an execute result.
 */
function isExecuteResult(output) {
    return output.output_type === 'execute_result';
}
/**
 * Test whether an output is from display data.
 */
function isDisplayData(output) {
    return output.output_type === 'display_data';
}
/**
 * Test whether an output is from updated display data.
 */
function isDisplayUpdate(output) {
    return output.output_type === 'update_display_data';
}
/**
 * Test whether an output is from a stream.
 */
function isStream(output) {
    return output.output_type === 'stream';
}
/**
 * Test whether an output is an error.
 */
function isError(output) {
    return output.output_type === 'error';
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi4vcGFja2FnZXMvbmJmb3JtYXQvc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsMkRBQTJEO0FBQzNEOzs7R0FHRztBQUVILDZCQUE2QjtBQUM3QixvRUFBb0U7QUFDcEUsc0ZBQXNGO0FBRXZCO0FBRS9EOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQVcsQ0FBQyxDQUFDO0FBRXZDOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQVcsQ0FBQyxDQUFDO0FBcUV2Qzs7Ozs7Ozs7R0FRRztBQUNJLFNBQVMsaUJBQWlCLENBQy9CLElBQVksRUFDWixLQUEwQztJQUUxQyx3REFBd0Q7SUFDeEQsTUFBTSxRQUFRLEdBQUcsNkJBQTZCLENBQUM7SUFDL0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdEUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTtRQUMxQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztJQUNqRSxDQUFDLENBQUM7SUFFRixrRUFBa0U7SUFDbEUsb0JBQW9CO0lBQ3BCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDaEIsS0FBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDaEIsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNmO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsdURBQXVEO0lBQ3ZELElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDcEI7SUFFRCxtREFBbUQ7SUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCwwREFBMEQ7SUFDMUQsT0FBTywrREFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBME1EOztHQUVHO0FBQ0ksU0FBUyxLQUFLLENBQUMsSUFBVztJQUMvQixPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7R0FFRztBQUNJLFNBQVMsVUFBVSxDQUFDLElBQVc7SUFDcEMsT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQztBQUN2QyxDQUFDO0FBRUQ7O0dBRUc7QUFDSSxTQUFTLE1BQU0sQ0FBQyxJQUFXO0lBQ2hDLE9BQU8sSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUM7QUFDbkMsQ0FBQztBQXNKRDs7R0FFRztBQUNJLFNBQVMsZUFBZSxDQUFDLE1BQWU7SUFDN0MsT0FBTyxNQUFNLENBQUMsV0FBVyxLQUFLLGdCQUFnQixDQUFDO0FBQ2pELENBQUM7QUFFRDs7R0FFRztBQUNJLFNBQVMsYUFBYSxDQUFDLE1BQWU7SUFDM0MsT0FBTyxNQUFNLENBQUMsV0FBVyxLQUFLLGNBQWMsQ0FBQztBQUMvQyxDQUFDO0FBRUQ7O0dBRUc7QUFDSSxTQUFTLGVBQWUsQ0FBQyxNQUFlO0lBQzdDLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxxQkFBcUIsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSSxTQUFTLFFBQVEsQ0FBQyxNQUFlO0lBQ3RDLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUM7QUFDekMsQ0FBQztBQUVEOztHQUVHO0FBQ0ksU0FBUyxPQUFPLENBQUMsTUFBZTtJQUNyQyxPQUFPLE1BQU0sQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDO0FBQ3hDLENBQUMiLCJmaWxlIjoicGFja2FnZXNfbmJmb3JtYXRfbGliX2luZGV4X2pzLV9iMWUxMC42ZjYxMTY1ODUxNDA0MTQ1M2I3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSnVweXRlciBEZXZlbG9wbWVudCBUZWFtLlxuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNb2RpZmllZCBCU0QgTGljZW5zZS5cbi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIG5iZm9ybWF0XG4gKi9cblxuLy8gTm90ZWJvb2sgZm9ybWF0IGludGVyZmFjZXNcbi8vIGh0dHBzOi8vbmJmb3JtYXQucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2Zvcm1hdF9kZXNjcmlwdGlvbi5odG1sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanVweXRlci9uYmZvcm1hdC9ibG9iL21hc3Rlci9uYmZvcm1hdC92NC9uYmZvcm1hdC52NC5zY2hlbWEuanNvblxuXG5pbXBvcnQgeyBKU09ORXh0LCBQYXJ0aWFsSlNPTk9iamVjdCB9IGZyb20gJ0BsdW1pbm8vY29yZXV0aWxzJztcblxuLyoqXG4gKiBUaGUgZWFybGllc3QgbWFqb3IgdmVyc2lvbiBvZiB0aGUgbm90ZWJvb2sgZm9ybWF0IHdlIHN1cHBvcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBNQUpPUl9WRVJTSU9OOiBudW1iZXIgPSA0O1xuXG4vKipcbiAqIFRoZSBlYXJsaWVzdCBtaW5vciB2ZXJzaW9uIG9mIHRoZSBub3RlYm9vayBmb3JtYXQgd2Ugc3VwcG9ydC5cbiAqL1xuZXhwb3J0IGNvbnN0IE1JTk9SX1ZFUlNJT046IG51bWJlciA9IDQ7XG5cbi8qKlxuICogVGhlIGtlcm5lbHNwZWMgbWV0YWRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUtlcm5lbHNwZWNNZXRhZGF0YSBleHRlbmRzIFBhcnRpYWxKU09OT2JqZWN0IHtcbiAgbmFtZTogc3RyaW5nO1xuICBkaXNwbGF5X25hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgbGFuZ3VhZ2UgaW5mbyBtZXRhZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMYW5ndWFnZUluZm9NZXRhZGF0YSBleHRlbmRzIFBhcnRpYWxKU09OT2JqZWN0IHtcbiAgbmFtZTogc3RyaW5nO1xuICBjb2RlbWlycm9yX21vZGU/OiBzdHJpbmcgfCBQYXJ0aWFsSlNPTk9iamVjdDtcbiAgZmlsZV9leHRlbnNpb24/OiBzdHJpbmc7XG4gIG1pbWV0eXBlPzogc3RyaW5nO1xuICBweWdtZW50c19sZXhlcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBtZXRhZGF0YSBmb3IgdGhlIG5vdGVib29rLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElOb3RlYm9va01ldGFkYXRhIGV4dGVuZHMgUGFydGlhbEpTT05PYmplY3Qge1xuICBrZXJuZWxzcGVjPzogSUtlcm5lbHNwZWNNZXRhZGF0YTtcbiAgbGFuZ3VhZ2VfaW5mbz86IElMYW5ndWFnZUluZm9NZXRhZGF0YTtcbiAgb3JpZ19uYmZvcm1hdD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUaGUgbm90ZWJvb2sgY29udGVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTm90ZWJvb2tDb250ZW50IGV4dGVuZHMgUGFydGlhbEpTT05PYmplY3Qge1xuICBtZXRhZGF0YTogSU5vdGVib29rTWV0YWRhdGE7XG4gIG5iZm9ybWF0X21pbm9yOiBudW1iZXI7XG4gIG5iZm9ybWF0OiBudW1iZXI7XG4gIGNlbGxzOiBJQ2VsbFtdO1xufVxuXG4vKipcbiAqIEEgbXVsdGlsaW5lIHN0cmluZy5cbiAqL1xuZXhwb3J0IHR5cGUgTXVsdGlsaW5lU3RyaW5nID0gc3RyaW5nIHwgc3RyaW5nW107XG5cbi8qKlxuICogQSBtaW1lLXR5cGUga2V5ZWQgZGljdGlvbmFyeSBvZiBkYXRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElNaW1lQnVuZGxlIGV4dGVuZHMgUGFydGlhbEpTT05PYmplY3Qge1xuICBba2V5OiBzdHJpbmddOiBNdWx0aWxpbmVTdHJpbmcgfCBQYXJ0aWFsSlNPTk9iamVjdDtcbn1cblxuLyoqXG4gKiBNZWRpYSBhdHRhY2htZW50cyAoZS5nLiBpbmxpbmUgaW1hZ2VzKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQXR0YWNobWVudHMge1xuICBba2V5OiBzdHJpbmddOiBJTWltZUJ1bmRsZSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBUaGUgY29kZSBjZWxsJ3MgcHJvbXB0IG51bWJlci4gV2lsbCBiZSBudWxsIGlmIHRoZSBjZWxsIGhhcyBub3QgYmVlbiBydW4uXG4gKi9cbmV4cG9ydCB0eXBlIEV4ZWN1dGlvbkNvdW50ID0gbnVtYmVyIHwgbnVsbDtcblxuLyoqXG4gKiBDZWxsIG91dHB1dCBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IHR5cGUgT3V0cHV0TWV0YWRhdGEgPSBQYXJ0aWFsSlNPTk9iamVjdDtcblxuLyoqXG4gKiBWYWxpZGF0ZSBhIG1pbWUgdHlwZS92YWx1ZSBwYWlyLlxuICpcbiAqIEBwYXJhbSB0eXBlIC0gVGhlIG1pbWV0eXBlIG5hbWUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHlwZS5cbiAqXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB0eXBlL3ZhbHVlIHBhaXIgYXJlIHZhbGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVNaW1lVmFsdWUoXG4gIHR5cGU6IHN0cmluZyxcbiAgdmFsdWU6IE11bHRpbGluZVN0cmluZyB8IFBhcnRpYWxKU09OT2JqZWN0XG4pOiBib29sZWFuIHtcbiAgLy8gQ2hlY2sgaWYgXCJhcHBsaWNhdGlvbi9qc29uXCIgb3IgXCJhcHBsaWNhdGlvbi9mb28ranNvblwiXG4gIGNvbnN0IGpzb25UZXN0ID0gL15hcHBsaWNhdGlvblxcLyguKj8pK1xcK2pzb24kLztcbiAgY29uc3QgaXNKU09OVHlwZSA9IHR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJyB8fCBqc29uVGVzdC50ZXN0KHR5cGUpO1xuXG4gIGNvbnN0IGlzU3RyaW5nID0gKHg6IGFueSkgPT4ge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuICB9O1xuXG4gIC8vIElmIGl0IGlzIGFuIGFycmF5LCBtYWtlIHN1cmUgaWYgaXMgbm90IGEgSlNPTiB0eXBlIGFuZCBpdCBpcyBhblxuICAvLyBhcnJheSBvZiBzdHJpbmdzLlxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaXNKU09OVHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgICh2YWx1ZSBhcyBzdHJpbmdbXSkuZm9yRWFjaCh2ID0+IHtcbiAgICAgIGlmICghaXNTdHJpbmcodikpIHtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsaWQ7XG4gIH1cblxuICAvLyBJZiBpdCBpcyBhIHN0cmluZywgbWFrZSBzdXJlIHdlIGFyZSBub3QgYSBKU09OIHR5cGUuXG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gIWlzSlNPTlR5cGU7XG4gIH1cblxuICAvLyBJdCBpcyBub3QgYSBzdHJpbmcsIG1ha2Ugc3VyZSBpdCBpcyBhIEpTT04gdHlwZS5cbiAgaWYgKCFpc0pTT05UeXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gSXQgaXMgYSBKU09OIHR5cGUsIG1ha2Ugc3VyZSBpdCBpcyBhIHZhbGlkIEpTT04gb2JqZWN0LlxuICByZXR1cm4gSlNPTkV4dC5pc09iamVjdCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQSB0eXBlIHdoaWNoIGRlc2NyaWJlcyB0aGUgdHlwZSBvZiBjZWxsLlxuICovXG5leHBvcnQgdHlwZSBDZWxsVHlwZSA9ICdjb2RlJyB8ICdtYXJrZG93bicgfCAncmF3JztcblxuLyoqXG4gKiBUaGUgSnVweXRlciBtZXRhZGF0YSBuYW1lc3BhY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJhc2VDZWxsSnVweXRlck1ldGFkYXRhIGV4dGVuZHMgUGFydGlhbEpTT05PYmplY3Qge1xuICAvKipcbiAgICogV2hldGhlciB0aGUgc291cmNlIGlzIGhpZGRlbi5cbiAgICovXG4gIHNvdXJjZV9oaWRkZW46IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ2VsbC1sZXZlbCBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZUNlbGxNZXRhZGF0YSBleHRlbmRzIFBhcnRpYWxKU09OT2JqZWN0IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNlbGwgaXMgdHJ1c3RlZC5cbiAgICpcbiAgICogIyMjIyBOb3Rlc1xuICAgKiBUaGlzIGlzIG5vdCBzdHJpY3RseSBwYXJ0IG9mIHRoZSBuYmZvcm1hdCBzcGVjLCBidXQgaXQgaXMgYWRkZWQgYnlcbiAgICogdGhlIGNvbnRlbnRzIG1hbmFnZXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2p1cHl0ZXItc2VydmVyLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9vcGVyYXRvcnMvc2VjdXJpdHkuaHRtbC5cbiAgICovXG4gIHRydXN0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBjZWxsJ3MgbmFtZS4gSWYgcHJlc2VudCwgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBKdXB5dGVyIG1ldGFkYXRhIG5hbWVzcGFjZVxuICAgKi9cbiAganVweXRlcjogUGFydGlhbDxJQmFzZUNlbGxKdXB5dGVyTWV0YWRhdGE+O1xuXG4gIC8qKlxuICAgKiBUaGUgY2VsbCdzIHRhZ3MuIFRhZ3MgbXVzdCBiZSB1bmlxdWUsIGFuZCBtdXN0IG5vdCBjb250YWluIGNvbW1hcy5cbiAgICovXG4gIHRhZ3M6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGNlbGwgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElCYXNlQ2VsbCBleHRlbmRzIFBhcnRpYWxKU09OT2JqZWN0IHtcbiAgLyoqXG4gICAqIFN0cmluZyBpZGVudGlmeWluZyB0aGUgdHlwZSBvZiBjZWxsLlxuICAgKi9cbiAgY2VsbF90eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbnRlbnRzIG9mIHRoZSBjZWxsLCByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBsaW5lcy5cbiAgICovXG4gIHNvdXJjZTogTXVsdGlsaW5lU3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDZWxsLWxldmVsIG1ldGFkYXRhLlxuICAgKi9cbiAgbWV0YWRhdGE6IFBhcnRpYWw8SUNlbGxNZXRhZGF0YT47XG59XG5cbi8qKlxuICogTWV0YWRhdGEgZm9yIHRoZSByYXcgY2VsbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUmF3Q2VsbE1ldGFkYXRhIGV4dGVuZHMgSUJhc2VDZWxsTWV0YWRhdGEge1xuICAvKipcbiAgICogUmF3IGNlbGwgbWV0YWRhdGEgZm9ybWF0IGZvciBuYmNvbnZlcnQuXG4gICAqL1xuICBmb3JtYXQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHJhdyBjZWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElSYXdDZWxsIGV4dGVuZHMgSUJhc2VDZWxsIHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIGZpZWxkIHJlcHJlc2VudGluZyB0aGUgaWRlbnRpZmllciBvZiB0aGlzIHBhcnRpY3VsYXIgY2VsbC5cbiAgICpcbiAgICogTm90ZWJvb2sgZm9ybWF0IDQuNCByZXF1aXJlcyBubyBpZCBmaWVsZCwgYnV0IGZvcm1hdCA0LjUgcmVxdWlyZXMgYW4gaWRcbiAgICogZmllbGQuIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIHNvIHdlIG1ha2UgaWQgb3B0aW9uYWwgaGVyZS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdHJpbmcgaWRlbnRpZnlpbmcgdGhlIHR5cGUgb2YgY2VsbC5cbiAgICovXG4gIGNlbGxfdHlwZTogJ3Jhdyc7XG5cbiAgLyoqXG4gICAqIENlbGwtbGV2ZWwgbWV0YWRhdGEuXG4gICAqL1xuICBtZXRhZGF0YTogUGFydGlhbDxJUmF3Q2VsbE1ldGFkYXRhPjtcblxuICAvKipcbiAgICogQ2VsbCBhdHRhY2htZW50cy5cbiAgICovXG4gIGF0dGFjaG1lbnRzPzogSUF0dGFjaG1lbnRzO1xufVxuXG4vKipcbiAqIEEgbWFya2Rvd24gY2VsbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTWFya2Rvd25DZWxsIGV4dGVuZHMgSUJhc2VDZWxsIHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIGZpZWxkIHJlcHJlc2VudGluZyB0aGUgaWRlbnRpZmllciBvZiB0aGlzIHBhcnRpY3VsYXIgY2VsbC5cbiAgICpcbiAgICogTm90ZWJvb2sgZm9ybWF0IDQuNCByZXF1aXJlcyBubyBpZCBmaWVsZCwgYnV0IGZvcm1hdCA0LjUgcmVxdWlyZXMgYW4gaWRcbiAgICogZmllbGQuIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIHNvIHdlIG1ha2UgaWQgb3B0aW9uYWwgaGVyZS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdHJpbmcgaWRlbnRpZnlpbmcgdGhlIHR5cGUgb2YgY2VsbC5cbiAgICovXG4gIGNlbGxfdHlwZTogJ21hcmtkb3duJztcblxuICAvKipcbiAgICogQ2VsbCBhdHRhY2htZW50cy5cbiAgICovXG4gIGF0dGFjaG1lbnRzPzogSUF0dGFjaG1lbnRzO1xufVxuXG4vKipcbiAqIFRoZSBKdXB5dGVyIG1ldGFkYXRhIG5hbWVzcGFjZSBmb3IgY29kZSBjZWxscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29kZUNlbGxKdXB5dGVyTWV0YWRhdGEgZXh0ZW5kcyBJQmFzZUNlbGxKdXB5dGVyTWV0YWRhdGEge1xuICAvKipcbiAgICogV2hldGhlciB0aGUgb3V0cHV0cyBhcmUgaGlkZGVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2p1cHl0ZXIvbmJmb3JtYXQvaXNzdWVzLzEzNy5cbiAgICovXG4gIG91dHB1dHNfaGlkZGVuOiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIGZvciBhIGNvZGUgY2VsbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29kZUNlbGxNZXRhZGF0YSBleHRlbmRzIElCYXNlQ2VsbE1ldGFkYXRhIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNlbGwgaXMgY29sbGFwc2VkL2V4cGFuZGVkLlxuICAgKi9cbiAgY29sbGFwc2VkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgSnVweXRlciBtZXRhZGF0YSBuYW1lc3BhY2VcbiAgICovXG4gIGp1cHl0ZXI6IFBhcnRpYWw8SUNvZGVDZWxsSnVweXRlck1ldGFkYXRhPjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgY2VsbCdzIG91dHB1dCBpcyBzY3JvbGxlZCwgdW5zY3JvbGxlZCwgb3IgYXV0b3Njcm9sbGVkLlxuICAgKi9cbiAgc2Nyb2xsZWQ6IGJvb2xlYW4gfCAnYXV0byc7XG59XG5cbi8qKlxuICogQSBjb2RlIGNlbGwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvZGVDZWxsIGV4dGVuZHMgSUJhc2VDZWxsIHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIGZpZWxkIHJlcHJlc2VudGluZyB0aGUgaWRlbnRpZmllciBvZiB0aGlzIHBhcnRpY3VsYXIgY2VsbC5cbiAgICpcbiAgICogTm90ZWJvb2sgZm9ybWF0IDQuNCByZXF1aXJlcyBubyBpZCBmaWVsZCwgYnV0IGZvcm1hdCA0LjUgcmVxdWlyZXMgYW4gaWRcbiAgICogZmllbGQuIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIHNvIHdlIG1ha2UgaWQgb3B0aW9uYWwgaGVyZS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdHJpbmcgaWRlbnRpZnlpbmcgdGhlIHR5cGUgb2YgY2VsbC5cbiAgICovXG4gIGNlbGxfdHlwZTogJ2NvZGUnO1xuXG4gIC8qKlxuICAgKiBDZWxsLWxldmVsIG1ldGFkYXRhLlxuICAgKi9cbiAgbWV0YWRhdGE6IFBhcnRpYWw8SUNvZGVDZWxsTWV0YWRhdGE+O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRpb24sIGRpc3BsYXksIG9yIHN0cmVhbSBvdXRwdXRzLlxuICAgKi9cbiAgb3V0cHV0czogSU91dHB1dFtdO1xuXG4gIC8qKlxuICAgKiBUaGUgY29kZSBjZWxsJ3MgcHJvbXB0IG51bWJlci4gV2lsbCBiZSBudWxsIGlmIHRoZSBjZWxsIGhhcyBub3QgYmVlbiBydW4uXG4gICAqL1xuICBleGVjdXRpb25fY291bnQ6IEV4ZWN1dGlvbkNvdW50O1xufVxuXG4vKipcbiAqIEFuIHVucmVjb2duaXplZCBjZWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElVbnJlY29nbml6ZWRDZWxsIGV4dGVuZHMgSUJhc2VDZWxsIHt9XG5cbi8qKlxuICogQSBjZWxsIHVuaW9uIHR5cGUuXG4gKi9cbmV4cG9ydCB0eXBlIElDZWxsID0gSVJhd0NlbGwgfCBJTWFya2Rvd25DZWxsIHwgSUNvZGVDZWxsIHwgSVVucmVjb2duaXplZENlbGw7XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgY2VsbCBpcyBhIHJhdyBjZWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSYXcoY2VsbDogSUNlbGwpOiBjZWxsIGlzIElSYXdDZWxsIHtcbiAgcmV0dXJuIGNlbGwuY2VsbF90eXBlID09PSAncmF3Jztcbn1cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYSBjZWxsIGlzIGEgbWFya2Rvd24gY2VsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWFya2Rvd24oY2VsbDogSUNlbGwpOiBjZWxsIGlzIElNYXJrZG93bkNlbGwge1xuICByZXR1cm4gY2VsbC5jZWxsX3R5cGUgPT09ICdtYXJrZG93bic7XG59XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgY2VsbCBpcyBhIGNvZGUgY2VsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ29kZShjZWxsOiBJQ2VsbCk6IGNlbGwgaXMgSUNvZGVDZWxsIHtcbiAgcmV0dXJuIGNlbGwuY2VsbF90eXBlID09PSAnY29kZSc7XG59XG5cbi8qKlxuICogQSB1bmlvbiBtZXRhZGF0YSB0eXBlLlxuICovXG5leHBvcnQgdHlwZSBJQ2VsbE1ldGFkYXRhID1cbiAgfCBJQmFzZUNlbGxNZXRhZGF0YVxuICB8IElSYXdDZWxsTWV0YWRhdGFcbiAgfCBJQ29kZUNlbGxNZXRhZGF0YTtcblxuLyoqXG4gKiBUaGUgdmFsaWQgb3V0cHV0IHR5cGVzLlxuICovXG5leHBvcnQgdHlwZSBPdXRwdXRUeXBlID1cbiAgfCAnZXhlY3V0ZV9yZXN1bHQnXG4gIHwgJ2Rpc3BsYXlfZGF0YSdcbiAgfCAnc3RyZWFtJ1xuICB8ICdlcnJvcidcbiAgfCAndXBkYXRlX2Rpc3BsYXlfZGF0YSc7XG5cbi8qKlxuICogVGhlIGJhc2Ugb3V0cHV0IHR5cGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJhc2VPdXRwdXQgZXh0ZW5kcyBQYXJ0aWFsSlNPTk9iamVjdCB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIGNlbGwgb3V0cHV0LlxuICAgKi9cbiAgb3V0cHV0X3R5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXN1bHQgb2YgZXhlY3V0aW5nIGEgY29kZSBjZWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElFeGVjdXRlUmVzdWx0IGV4dGVuZHMgSUJhc2VPdXRwdXQge1xuICAvKipcbiAgICogVHlwZSBvZiBjZWxsIG91dHB1dC5cbiAgICovXG4gIG91dHB1dF90eXBlOiAnZXhlY3V0ZV9yZXN1bHQnO1xuXG4gIC8qKlxuICAgKiBBIHJlc3VsdCdzIHByb21wdCBudW1iZXIuXG4gICAqL1xuICBleGVjdXRpb25fY291bnQ6IEV4ZWN1dGlvbkNvdW50O1xuXG4gIC8qKlxuICAgKiBBIG1pbWUtdHlwZSBrZXllZCBkaWN0aW9uYXJ5IG9mIGRhdGEuXG4gICAqL1xuICBkYXRhOiBJTWltZUJ1bmRsZTtcblxuICAvKipcbiAgICogQ2VsbCBvdXRwdXQgbWV0YWRhdGEuXG4gICAqL1xuICBtZXRhZGF0YTogT3V0cHV0TWV0YWRhdGE7XG59XG5cbi8qKlxuICogRGF0YSBkaXNwbGF5ZWQgYXMgYSByZXN1bHQgb2YgY29kZSBjZWxsIGV4ZWN1dGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheURhdGEgZXh0ZW5kcyBJQmFzZU91dHB1dCB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIGNlbGwgb3V0cHV0LlxuICAgKi9cbiAgb3V0cHV0X3R5cGU6ICdkaXNwbGF5X2RhdGEnO1xuXG4gIC8qKlxuICAgKiBBIG1pbWUtdHlwZSBrZXllZCBkaWN0aW9uYXJ5IG9mIGRhdGEuXG4gICAqL1xuICBkYXRhOiBJTWltZUJ1bmRsZTtcblxuICAvKipcbiAgICogQ2VsbCBvdXRwdXQgbWV0YWRhdGEuXG4gICAqL1xuICBtZXRhZGF0YTogT3V0cHV0TWV0YWRhdGE7XG59XG5cbi8qKlxuICogRGF0YSBkaXNwbGF5ZWQgYXMgYW4gdXBkYXRlIHRvIGV4aXN0aW5nIGRpc3BsYXkgZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheVVwZGF0ZSBleHRlbmRzIElCYXNlT3V0cHV0IHtcbiAgLyoqXG4gICAqIFR5cGUgb2YgY2VsbCBvdXRwdXQuXG4gICAqL1xuICBvdXRwdXRfdHlwZTogJ3VwZGF0ZV9kaXNwbGF5X2RhdGEnO1xuXG4gIC8qKlxuICAgKiBBIG1pbWUtdHlwZSBrZXllZCBkaWN0aW9uYXJ5IG9mIGRhdGEuXG4gICAqL1xuICBkYXRhOiBJTWltZUJ1bmRsZTtcblxuICAvKipcbiAgICogQ2VsbCBvdXRwdXQgbWV0YWRhdGEuXG4gICAqL1xuICBtZXRhZGF0YTogT3V0cHV0TWV0YWRhdGE7XG59XG5cbi8qKlxuICogU3RyZWFtIG91dHB1dCBmcm9tIGEgY29kZSBjZWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTdHJlYW0gZXh0ZW5kcyBJQmFzZU91dHB1dCB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIGNlbGwgb3V0cHV0LlxuICAgKi9cbiAgb3V0cHV0X3R5cGU6ICdzdHJlYW0nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgc3RyZWFtLlxuICAgKi9cbiAgbmFtZTogU3RyZWFtVHlwZTtcblxuICAvKipcbiAgICogVGhlIHN0cmVhbSdzIHRleHQgb3V0cHV0LlxuICAgKi9cbiAgdGV4dDogTXVsdGlsaW5lU3RyaW5nO1xufVxuXG4vKipcbiAqIEFuIGFsaWFzIGZvciBhIHN0cmVhbSB0eXBlLlxuICovXG5leHBvcnQgdHlwZSBTdHJlYW1UeXBlID0gJ3N0ZG91dCcgfCAnc3RkZXJyJztcblxuLyoqXG4gKiBPdXRwdXQgb2YgYW4gZXJyb3IgdGhhdCBvY2N1cnJlZCBkdXJpbmcgY29kZSBjZWxsIGV4ZWN1dGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRXJyb3IgZXh0ZW5kcyBJQmFzZU91dHB1dCB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIGNlbGwgb3V0cHV0LlxuICAgKi9cbiAgb3V0cHV0X3R5cGU6ICdlcnJvcic7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cbiAgICovXG4gIGVuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSwgb3IgbWVzc2FnZSwgb2YgdGhlIGVycm9yLlxuICAgKi9cbiAgZXZhbHVlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlcnJvcidzIHRyYWNlYmFjay5cbiAgICovXG4gIHRyYWNlYmFjazogc3RyaW5nW107XG59XG5cbi8qKlxuICogVW5yZWNvZ25pemVkIG91dHB1dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVW5yZWNvZ25pemVkT3V0cHV0IGV4dGVuZHMgSUJhc2VPdXRwdXQge31cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYW4gb3V0cHV0IGlzIGFuIGV4ZWN1dGUgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRlUmVzdWx0KG91dHB1dDogSU91dHB1dCk6IG91dHB1dCBpcyBJRXhlY3V0ZVJlc3VsdCB7XG4gIHJldHVybiBvdXRwdXQub3V0cHV0X3R5cGUgPT09ICdleGVjdXRlX3Jlc3VsdCc7XG59XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGFuIG91dHB1dCBpcyBmcm9tIGRpc3BsYXkgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlzcGxheURhdGEob3V0cHV0OiBJT3V0cHV0KTogb3V0cHV0IGlzIElEaXNwbGF5RGF0YSB7XG4gIHJldHVybiBvdXRwdXQub3V0cHV0X3R5cGUgPT09ICdkaXNwbGF5X2RhdGEnO1xufVxuXG4vKipcbiAqIFRlc3Qgd2hldGhlciBhbiBvdXRwdXQgaXMgZnJvbSB1cGRhdGVkIGRpc3BsYXkgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGlzcGxheVVwZGF0ZShvdXRwdXQ6IElPdXRwdXQpOiBvdXRwdXQgaXMgSURpc3BsYXlVcGRhdGUge1xuICByZXR1cm4gb3V0cHV0Lm91dHB1dF90eXBlID09PSAndXBkYXRlX2Rpc3BsYXlfZGF0YSc7XG59XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGFuIG91dHB1dCBpcyBmcm9tIGEgc3RyZWFtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJlYW0ob3V0cHV0OiBJT3V0cHV0KTogb3V0cHV0IGlzIElTdHJlYW0ge1xuICByZXR1cm4gb3V0cHV0Lm91dHB1dF90eXBlID09PSAnc3RyZWFtJztcbn1cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYW4gb3V0cHV0IGlzIGFuIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcihvdXRwdXQ6IElPdXRwdXQpOiBvdXRwdXQgaXMgSUVycm9yIHtcbiAgcmV0dXJuIG91dHB1dC5vdXRwdXRfdHlwZSA9PT0gJ2Vycm9yJztcbn1cblxuLyoqXG4gKiBBbiBvdXRwdXQgdW5pb24gdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgSU91dHB1dCA9XG4gIHwgSVVucmVjb2duaXplZE91dHB1dFxuICB8IElFeGVjdXRlUmVzdWx0XG4gIHwgSURpc3BsYXlEYXRhXG4gIHwgSVN0cmVhbVxuICB8IElFcnJvcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=