#!/usr/bin/env python3
#
# Tools for building OpenSlide and its dependencies
#
# Copyright (c) 2023 Benjamin Gilbert
# All rights reserved.
#
# This script is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License, version 2.1,
# as published by the Free Software Foundation.
#
# This script is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this script. If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import annotations

import argparse
from contextlib import ExitStack
from email.parser import BytesParser
from email.policy import compat32
from io import BytesIO
from pathlib import Path
import tempfile
from typing import BinaryIO, cast

from common.archive import DirMember, FileMember, WheelWriter, ZipArchiveReader
from common.argparse import TypedArgs
from common.macos import all_equal, merge_macho


class Args(TypedArgs):
    bdists: list[BinaryIO]
    output: BinaryIO


args = Args(
    'write-universal-wheel', description='Write macOS universal Python wheel.'
)
args.add_arg(
    '-o',
    '--output',
    type=argparse.FileType('wb'),
    required=True,
    help='output file',
)
args.add_arg(
    'bdists',
    metavar='bdist',
    nargs='+',
    type=argparse.FileType('rb'),
    help='input file',
)
args.parse()

with ExitStack() as stack:
    tempdir = Path(
        stack.enter_context(
            tempfile.TemporaryDirectory(prefix='openslide-bin-')
        )
    )
    readers = stack.enter_context(ZipArchiveReader.group(args.bdists))
    whl = stack.enter_context(WheelWriter(args.output))
    for members in readers:
        if all_equal(type(m) for m in members):
            all_type: type | None = type(members[0])
        else:
            all_type = None
        if not all_equal(members.relpaths):
            raise Exception(f'Path mismatch: {members.relpaths}')
        elif all_type is DirMember:
            whl.add(members[0])
        elif all_type is FileMember:
            if (
                len(members.datas[0]) >= 4
                and members.datas[0][0:4] == b'\xcf\xfa\xed\xfe'
            ):
                macho_path = merge_macho(
                    [Path(cast(FileMember, m).fh.name) for m in members],
                    tempdir,
                )
                whl.add(FileMember(members[0].path, macho_path.open('rb')))
            elif members[0].path.name == 'RECORD':
                # regenerated by WheelWriter
                pass
            elif members[0].path.name == 'WHEEL':
                meta = BytesParser(policy=compat32).parse(
                    cast(FileMember, members[0]).fh
                )
                del meta['Tag']
                meta['Tag'] = whl.tag
                whl.add(FileMember(members[0].path, BytesIO(meta.as_bytes())))
            elif all_equal(members.datas):
                whl.add(members[0])
            else:
                raise Exception(f'Contents mismatch: {members.relpaths}')
        else:
            raise Exception(f'Unknown/mismatched types: {members.relpaths}')
