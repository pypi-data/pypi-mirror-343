name: Check Version and Release

on:
  push:
    branches: [main]
    paths:
      - 'Cargo.toml'
      - 'pyproject.toml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_needed: ${{ steps.check.outputs.release_needed }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Get all history and tags
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml
    
    - name: Extract version
      id: version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if tag exists
      id: check
      run: |
        VERSION=${{ steps.version.outputs.version }}
        TAG="v$VERSION"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists, no release needed"
          echo "release_needed=false" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG does not exist, release needed"
          echo "release_needed=true" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.release_needed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create tag
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        TAG="v$VERSION"
        git config --global user.name "GitHub Actions"
        git config --global user.email "github-actions@github.com"
        git tag -a "$TAG" -m "Release v$VERSION"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "$TAG"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: Release v${{ needs.check-version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
