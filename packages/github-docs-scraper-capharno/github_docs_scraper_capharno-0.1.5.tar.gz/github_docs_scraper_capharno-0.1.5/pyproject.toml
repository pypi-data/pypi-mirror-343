[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "github_docs_scraper_capharno"
version = "0.1.5"
description = "CLI tool to scrape Markdown documentation from GitHub repositories"
readme = "README.md"
requires-python = ">=3.8"
license-files = ["LICEN[CS]E*"]
keywords = ["github", "markdown", "documentation", "scraper", "cli"]
authors = [{ name = "Andy Bourgeois", email = "capharno@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Utilities",
]
dependencies = ["click>=8.1.3", "requests>=2.28.1", "python-dotenv>=0.21.0"]

[project.urls]
Homepage = "https://github.com/coeur-de-loup/github-docs-scraper"
Issues = "https://github.com/coeur-de-loup/github-docs-scraper/issues"

[project.scripts]
scrape-docs = "github_docs_scraper_capharno.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/github_docs_scraper_capharno"]

[tool.bumpversion]
current_version = "0.1.5" # Set your current version here
commit = true
tag = true
tag_name = "v{new_version}" # Matches your workflow trigger pattern
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)" # Standard semantic versioning
serialize = ["{major}.{minor}.{patch}"]
message = "Bump version: {current_version} → {new_version}"
commit_args = "--no-verify"

[[tool.bumpversion.files]]
filename = "pyproject.toml" # Update version in pyproject.toml itself
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/github_docs_scraper_capharno/__init__.py" # Update version in pyproject.toml itself
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "README.md" # Update version in pyproject.toml itself
search = 'GitHub Docs Scraper, version {current_version}'
replace = 'GitHub Docs Scraper, version {new_version}'

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "C4", "SIM", "RUF"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Imported but unused

[tool.ruff.lint.isort]
known-first-party = ["github_docs_scraper_capharno"]

[tool.pyright]
include = ["src"]
typeCheckingMode = "standard"
reportMissingTypeStubs = false
exclude = [".venv"]
pythonVersion = "3.12"
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
pythonpath = ["src"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.5"
tag_format = "v$version"
bump_message = "bump: version $current_version → $new_version"
version_files = [
    "pyproject.toml:version",
    "src/github_docs_scraper_capharno/__init__.py:__version__",
]
update_changelog_on_bump = true
major_version_zero = true

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "bump-my-version>=1.1.2",
    "commitizen>=3.31.0",
    "pre-commit>=3.5.0",
    "pyright>=1.1.400",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.11.7",
]
