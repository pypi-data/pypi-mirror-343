# -*- coding: utf-8 -*-
"""gestao_alunos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DqpNTLejiMLbPqGVpy_G5s19b5aBXUBc

## Di√°rio de Projecto

https://docs.google.com/document/d/1zUMQsyZPm_EcsGVDijDcz0AKbNpQFbDQ8FheaAihP6A/edit?tab=t.0#heading=h.cf0piy8x7mqc

## C√≥digo
"""

#!pip install tabulate

import json
from tabulate import tabulate
from datetime import datetime



# ------------------------
# CLASSE ALUNO           |
# ------------------------


class Aluno:
    alunos = {}

    @staticmethod
    def calcular_idade(data_nascimento):
        try:
            nascimento = datetime.strptime(data_nascimento, "%d-%m-%Y")
            hoje = datetime.today()
            idade = hoje.year - nascimento.year - ((hoje.month, hoje.day) < (nascimento.month, nascimento.day))
            return idade
        except ValueError:
            return None

    #M√©todo adicionar Aluno
    @classmethod
    def adicionar_aluno(cls, nome, numero, nif, email, data_nascimento):
        if numero in cls.alunos:
            print(f"‚ùå J√° existe um aluno com o n√∫mero {numero}.")
            return
        if any(d['nif'] == nif for d in cls.alunos.values()):
            print(f"‚ùå J√° existe um aluno com o NIF {nif}.")
            return

        idade = cls.calcular_idade(data_nascimento)
        if idade is None or idade < 17 or idade > 100:
            print(f"‚ùå Idade inv√°lida para aluno '{nome}' ({idade} anos). Deve ter entre 17 e 100 anos.")
            return
        if idade < 17 or idade > 100:
            print("‚ùå Idade inv√°lida para aluno. Deve ter entre 17 e 100 anos.")
            return

        cls.alunos[numero] = {
            "nome": nome,
            "nif": nif,
            "email": email,
            "data_nascimento": data_nascimento
        }
        print(f"‚úÖ Aluno '{nome}' adicionado com sucesso (NIF: {nif}, Email: {email}).")


    #M√©todo para fazer a lista de Aluno
    @classmethod
    def listar_alunos(cls):
      if not cls.alunos:
          print("üìã Nenhum aluno registado.")
      else:
          tabela = [
              [
                  dados["nome"],
                  numero,
                  dados["nif"],
                  dados["email"],
                  dados["data_nascimento"],
                  Aluno.calcular_idade(dados["data_nascimento"]) or "Inv√°lido"
              ]
              for numero, dados in cls.alunos.items()
              if isinstance(dados, dict)
          ]
          print(
              tabulate(
                  tabela,
                  headers=["Nome", "N√∫mero", "NIF", "E-mail", "Data Nasc.", "Idade"],
                  tablefmt="grid"
              )
          )






# ------------------------
# CLASSE DOCENTE         |
# ------------------------

class Docente:
    docentes = {}

    #M√©todo adicionar Docente
    @classmethod
    def adicionar_docente(cls, nome, numero, data_nascimento):
        if numero in cls.docentes:
            print(f"‚ùå Docente com o n√∫mero {numero} j√° existe.")
            return

        idade = Aluno.calcular_idade(data_nascimento)
        if idade is None:
            print("‚ùå Data de nascimento inv√°lida. Use o formato dd-mm-aaaa.")
            return
        if idade < 23 or idade > 80:
            print("‚ùå Idade inv√°lida para docente. Deve ter entre 23 e 80 anos.")
            return

        cls.docentes[numero] = {
            "nome": nome,
            "data_nascimento": data_nascimento
        }
        print(f"‚úÖ Docente '{nome}' adicionado com sucesso.")

    #M√©todo para fazer a lista de Docente
    @classmethod
    def listar_docentes(cls):
      if not cls.docentes:
          print("üìã Nenhum docente registado.")
      else:
          tabela = [
    [
        dados["nome"],  # <-- Aqui se acede ao nome corretamente
        numero,
        dados["data_nascimento"],
        Aluno.calcular_idade(dados["data_nascimento"]) or "Inv√°lido"
    ]
    for numero, dados in cls.docentes.items()
    if isinstance(dados, dict)
]
          print(
              tabulate(
                  tabela,
                  headers=["Nome", "N√∫mero", "Data Nasc.", "Idade"],
                  tablefmt="grid"
              )
          )





# ------------------------
# CLASSE TURMA           |
# ------------------------


class Turma:
    turmas = {}

    @classmethod
    def adicionar_turma(cls, nome):
        if nome in cls.turmas:
            print(f"‚ùå A turma '{nome}' j√° existe.")
        else:
            cls.turmas[nome] = {
                "alunos": []
            }
            print(f"‚úÖ Turma '{nome}' criada com sucesso.")

    @classmethod
    def adicionar_aluno_turma(cls, nome_turma, numero_aluno):
        if nome_turma not in cls.turmas:
            print(f"‚ùå Turma '{nome_turma}' n√£o existe.")
            return

        if numero_aluno not in Aluno.alunos:
            print(f"‚ùå Aluno com n√∫mero {numero_aluno} n√£o existe.")
            return

        if numero_aluno in cls.turmas[nome_turma]["alunos"]:
            print(f"‚ùå O aluno j√° est√° inscrito na turma '{nome_turma}'.")
            return

        if len(cls.turmas[nome_turma]["alunos"]) >= 25:
            print(f"‚ùå A turma '{nome_turma}' j√° atingiu o limite m√°ximo de 25 alunos.")
            return

        cls.turmas[nome_turma]["alunos"].append(numero_aluno)
        print(f"‚úÖ Aluno '{Aluno.alunos[numero_aluno]['nome']}' adicionado √† turma '{nome_turma}'.")

    @classmethod
    def listar_turmas(cls):
        if not cls.turmas:
            print("üì≠ Nenhuma turma criada.")
        else:
            for nome, dados in cls.turmas.items():
                total = len(dados["alunos"])
                print(f"\nüìò Turma: {nome} ({total}/25 alunos)")
                if total > 0:
                    tabela = [
                        [Aluno.alunos[num]["nome"], num] for num in dados["alunos"]
                    ]
                    print(tabulate(tabela, headers=["Nome do Aluno", "N√∫mero"], tablefmt="grid"))
                else:
                    print("  üì≠ Nenhum aluno nesta turma.")






# ------------------------
# CLASSE DISCIPLINA      |
# ------------------------

class Disciplina:
    disciplinas = {}


    #M√©todo adicionar Disciplina
    @classmethod
    def adicionar_disciplina(cls, nome):
        if nome in cls.disciplinas:
            print(f"‚ùå A disciplina '{nome}' j√° existe.")
            return
        cls.disciplinas[nome] = {
            "docente": None,
            "turma": None,
            "alunos": {},
            "classificacoes": {}
        }
        print(f"‚úÖ Disciplina '{nome}' criada com sucesso.")



    @classmethod
    def atribuir_docente(cls, nome_disciplina, numero_docente):
      if nome_disciplina not in cls.disciplinas:
          print("‚ùå Disciplina n√£o encontrada.")
          return
      if numero_docente not in Docente.docentes:
          print("‚ùå Docente n√£o registado.")
          return
      if cls.disciplinas[nome_disciplina]["docente"] == numero_docente:
          print(f"‚ùå O docente j√° est√° atribu√≠do √† disciplina '{nome_disciplina}'.")
          return
      cls.disciplinas[nome_disciplina]["docente"] = numero_docente
      print(f"‚úÖ Docente atribu√≠do √† disciplina '{nome_disciplina}'.")




    @classmethod
    def atribuir_turma(cls, nome_disciplina, nome_turma):
        if nome_disciplina not in cls.disciplinas:
            print("‚ùå Disciplina n√£o encontrada.")
            return
        if nome_turma not in Turma.turmas:
            print("‚ùå Turma n√£o encontrada.")
            return
        if cls.disciplinas[nome_disciplina]["turma"] == nome_turma:
            print(f"‚ùå A turma '{nome_turma}' j√° est√° atribu√≠da √† disciplina '{nome_disciplina}'.")
            return
        cls.disciplinas[nome_disciplina]["turma"] = nome_turma
        print(f"‚úÖ Turma '{nome_turma}' atribu√≠da √† disciplina '{nome_disciplina}'.")




    @classmethod
    def inscrever_aluno(cls, nome_disciplina, numero_aluno):
        if nome_disciplina not in cls.disciplinas:
            print("‚ùå Disciplina n√£o encontrada.")
            return
        if numero_aluno not in Aluno.alunos:
            print("‚ùå Aluno n√£o encontrado.")
            return
        if numero_aluno in cls.disciplinas[nome_disciplina]["alunos"]:
            print(f"‚ùå O aluno j√° est√° inscrito na disciplina '{nome_disciplina}'.")
            return
        cls.disciplinas[nome_disciplina]["alunos"][numero_aluno] = Aluno.alunos[numero_aluno]["nome"]
        print(f"‚úÖ Aluno inscrito na disciplina '{nome_disciplina}'.")




    @classmethod
    def adicionar_classificacao(cls, nome_disciplina, numero_aluno, tipo, nota=None):
        if nome_disciplina not in cls.disciplinas:
            print("‚ùå Disciplina n√£o encontrada.")
            return

        disciplina = cls.disciplinas[nome_disciplina]

        if not disciplina["docente"]:
            print("‚ùå A disciplina n√£o tem docente atribu√≠do.")
            return

        if not disciplina["turma"]:
            print("‚ùå A disciplina n√£o tem turma atribu√≠da.")
            return

        if numero_aluno not in disciplina["alunos"]:
            print("‚ùå O aluno n√£o est√° inscrito nesta disciplina.")
            return

        if tipo not in ["M1", "M2", "M3"]:
            print("‚ùå Tipo de classifica√ß√£o inv√°lido. Use apenas 'M1', 'M2' ou 'M3'.")
            return

        if nota is None:
            print("‚ùå √â necess√°rio indicar uma nota ou 'F' (falta).")
            return

        if isinstance(nota, str) and nota.upper() == "F":
            nota = None  # Convertido internamente para None para representar falta
        else:
            # Verificar se √© n√∫mero e se est√° entre 0 e 20
            try:
                nota = float(nota)
                if not (0 <= nota <= 20):
                    print("‚ùå A nota deve estar entre 0 e 20.")
                    return
            except ValueError:
                print("‚ùå Nota inv√°lida. Deve ser um n√∫mero ou 'F'.")
                return

        if numero_aluno not in disciplina["classificacoes"]:
            disciplina["classificacoes"][numero_aluno] = []

        # Verificar se j√° existe uma classifica√ß√£o desse tipo (ex: M1)
        for c in disciplina["classificacoes"][numero_aluno]:
            if c["tipo"] == tipo:
                print(f"‚ùå O aluno j√° tem uma classifica√ß√£o do tipo '{tipo}'.")
                return

        # Adiciona a classifica√ß√£o
        disciplina["classificacoes"][numero_aluno].append({
            "tipo": tipo,
            "nota": nota  # None se for falta
        })

        nota_texto = "F" if nota is None else nota
        print(f"‚úÖ Classifica√ß√£o '{tipo}:{nota_texto}' adicionada para o aluno '{Aluno.alunos[numero_aluno]['nome']}'.")





    #M√©todo adicionar Disciplina
    @classmethod
    def listar_disciplinas(cls):
        if not cls.disciplinas:
            print("üì≠ Nenhuma disciplina criada.")
            return

        for nome, dados in cls.disciplinas.items():
            docente_info = Docente.docentes.get(dados["docente"])
            if isinstance(docente_info, dict):
                docente = f"{docente_info['nome']} (Nasc.: {docente_info['data_nascimento']})"
            else:
                docente = "Sem docente"
            turma = dados["turma"] or "Sem turma"
            print(f"\nüìò Disciplina: {nome} | üë®‚Äçüè´ Docente: {docente} | Turma: {turma}")
            alunos = dados["alunos"]
            if alunos:
                tabela = []
                for num, nome_aluno in alunos.items():
                    classificacoes = dados["classificacoes"].get(num, [])
                    texto = ", ".join(
                        f"{c['tipo']}:{'F' if c['nota'] is None else c['nota']}"
                        for c in classificacoes
                    ) or "‚Äî"
                    tabela.append([nome_aluno, num, texto])
                print(tabulate(tabela, headers=["Nome do Aluno", "N¬∫", "Classifica√ß√µes"], tablefmt="grid"))
            else:
                print("  üì≠ Sem alunos inscritos.")


    #M√©todo para relatorio de estatisticas
    @classmethod
    def relatorio_estatisticas(cls):
        if not cls.disciplinas:
            print("üì≠ Nenhuma disciplina encontrada.")
            return

        for nome, dados in cls.disciplinas.items():
            total_alunos = len(dados["alunos"])
            if total_alunos == 0:
                print(f"\nüìò Disciplina: {nome} ‚Äî Sem alunos inscritos.")
                continue

            aprovados = 0
            reprovados = 0
            soma_medias = 0
            alunos_com_media = 0
            alunos_com_faltas = 0

            for numero, nome_aluno in dados["alunos"].items():
                classificacoes = dados["classificacoes"].get(numero, [])

                notas = {c["tipo"]: c["nota"] for c in classificacoes}
                tipos_presentes = set(notas.keys())

                # ‚ùå Se houver qualquer F (nota None), reprova automaticamente
                if any(notas[t] is None for t in tipos_presentes):
                    reprovados += 1
                    alunos_com_faltas += 1
                    continue

                # ‚ùå Se n√£o tiver M1 ou M1 < 6, reprova automaticamente
                if "M1" not in notas or notas["M1"] < 6:
                    reprovados += 1
                    continue

                # ‚úÖ Caso tenha M1 >= 6 e sem faltas, m√©dia das existentes
                notas_validas = [nota for nota in notas.values() if nota is not None]

                if notas_validas:
                    media = sum(notas_validas) / len(notas_validas)
                    soma_medias += media
                    alunos_com_media += 1
                    if media >= 10:
                        aprovados += 1
                    else:
                        reprovados += 1

            taxa_aprov = (aprovados / total_alunos) * 100 if total_alunos else 0
            taxa_reprov = (reprovados / total_alunos) * 100 if total_alunos else 0
            media_geral = soma_medias / alunos_com_media if alunos_com_media else 0

            print(f"\nüìò Disciplina: {nome}")
            print(f"- N¬∫ de alunos inscritos: {total_alunos}")
            print(f"- ‚úÖ Aprovados: {aprovados} ({taxa_aprov:.1f}%)")
            print(f"- ‚ùå Reprovados: {reprovados} ({taxa_reprov:.1f}%)")
            print(f"- üìâ M√©dia geral (entre alunos com notas v√°lidas): {media_geral:.1f}")
            print(f"- ‚ö†Ô∏è Alunos com faltas (F): {alunos_com_faltas}")



    #M√©todo para validar integridade dos dados
    @classmethod
    def validar_integridade_total(cls):
        erros = []
        aluno_turmas = {}
        disciplinas_nomes = set()
        turmas_disciplina = set()

        # Validar disciplinas
        for nome_disc, dados in cls.disciplinas.items():
            if nome_disc in disciplinas_nomes:
                erros.append(f"‚ùå Disciplina duplicada: '{nome_disc}'.")
            disciplinas_nomes.add(nome_disc)

            turma = dados["turma"]
            docente = dados["docente"]
            alunos = dados["alunos"]
            classificacoes = dados["classificacoes"]

            if not docente:
                erros.append(f"‚ùå Disciplina '{nome_disc}' n√£o tem docente atribu√≠do.")

            if not turma:
                erros.append(f"‚ùå Disciplina '{nome_disc}' n√£o tem turma associada.")
            else:
                turmas_disciplina.add(turma)

            # Turma com mais de 25 alunos
            for nome_turma, dados in Turma.turmas.items():
              total_alunos = len(dados["alunos"])
              if total_alunos > 25:
                  erros.append(f"‚ùå Turma '{nome_turma}' tem mais de 25 alunos.")


            # ‚ùå Classifica√ß√µes atribu√≠das a alunos n√£o inscritos
            for num_aluno in classificacoes:
                if num_aluno not in alunos:
                    erros.append(f"‚ùå Aluno '{num_aluno}' tem classifica√ß√£o em '{nome_disc}' mas n√£o est√° inscrito na disciplina.")

            for num_aluno, nome_aluno in alunos.items():
                # Refer√™ncia cruzada aluno-turma
                if num_aluno not in aluno_turmas:
                    aluno_turmas[num_aluno] = set()
                if turma:
                    aluno_turmas[num_aluno].add(turma)

                avaliacoes = classificacoes.get(num_aluno, [])
                tipos = set()
                tem_m1 = False

                if not avaliacoes:
                    erros.append(f"‚ùå Aluno '{nome_aluno}' ({num_aluno}) em '{nome_disc}' n√£o tem classifica√ß√µes.")
                    continue

                for c in avaliacoes:
                    tipo = c.get("tipo")
                    nota = c.get("nota")

                    if tipo not in ["M1", "M2", "M3"]:
                        erros.append(f"‚ùå Tipo de avalia√ß√£o inv√°lido para aluno {num_aluno} em '{nome_disc}': '{tipo}'.")

                    if tipo in tipos:
                        erros.append(f"‚ùå Classifica√ß√£o duplicada '{tipo}' para aluno {num_aluno} em '{nome_disc}'.")
                    tipos.add(tipo)

                    if tipo == "M1" and nota is not None:
                        tem_m1 = True

                    if nota is None:
                        continue  # Faltas s√£o v√°lidas
                    try:
                        nota = float(nota)
                        if nota < 0 or nota > 20:
                            erros.append(f"‚ùå Nota fora do intervalo [0‚Äì20] para aluno {num_aluno} em '{nome_disc}' ({tipo}:{nota}).")
                    except:
                        erros.append(f"‚ùå Nota inv√°lida para aluno {num_aluno} em '{nome_disc}': {nota}")

                if ("M2" in tipos or "M3" in tipos) and not tem_m1:
                    erros.append(f"‚ùå Aluno {num_aluno} em '{nome_disc}' tem M2/M3 mas n√£o tem M1 v√°lida.")

        # Alunos em m√∫ltiplas turmas
        for aluno, turmas in aluno_turmas.items():
            if len(turmas) > 1:
                erros.append(f"‚ö†Ô∏è Aluno {aluno} est√° inscrito em m√∫ltiplas turmas: {', '.join(turmas)}")

        # Turmas sem disciplinas
        turmas_sem_disciplina = set(Turma.turmas) - turmas_disciplina
        for turma in turmas_sem_disciplina:
            erros.append(f"‚ö†Ô∏è Turma '{turma}' est√° criada mas n√£o est√° associada a nenhuma disciplina.")

        # Verificar estrutura dos alunos
        nifs = set()
        emails = set()
        for num, dados in Aluno.alunos.items():
            nome = dados.get("nome", "").strip()
            nif = dados.get("nif", "")
            email = dados.get("email", "")

            if len(nome) < 3:
                erros.append(f"‚ùå Nome de aluno demasiado curto ou inv√°lido: '{nome}' (N¬∫ {num})")

            if not "@" in email or not "." in email or " " in email:
                erros.append(f"‚ùå Email inv√°lido para aluno '{nome}' ({email}).")

            if not nif.isdigit() or len(nif) != 9:
                erros.append(f"‚ùå NIF inv√°lido para aluno '{nome}': {nif}")

            if nif in nifs:
                erros.append(f"‚ùå NIF duplicado encontrado: {nif}")
            else:
                nifs.add(nif)

            if email in emails:
                erros.append(f"‚ùå Email duplicado encontrado: {email}")
            else:
                emails.add(email)

        # Nomes de docentes
        for num, dados in Docente.docentes.items():
            if len(dados["nome"].strip()) < 3:
                erros.append(f"‚ùå Nome de docente demasiado curto ou inv√°lido: '{dados['nome']}' (N¬∫ {num})")


        # Resultado final
        if erros:
            print("‚ö†Ô∏è Problemas de integridade encontrados:")
            for erro in erros:
                print("-", erro)
        else:
            print("‚úÖ Todos os dados passaram na verifica√ß√£o de integridade.")








# --------------------------------
# RELAT√ìRIO DE ALUNOS POR TURMA  |
# --------------------------------


def relatorio_alunos_por_turma():
    # Dicion√°rio auxiliar: turma -> conjunto de alunos
    turmas_alunos = {}

    for nome_disciplina, dados in Disciplina.disciplinas.items():
        turma = dados["turma"]
        if not turma:
            continue  # Ignorar disciplinas sem turma associada

        if turma not in turmas_alunos:
            turmas_alunos[turma] = set()

        for numero_aluno in dados["alunos"]:
            turmas_alunos[turma].add(numero_aluno)

    if not turmas_alunos:
        print("üì≠ Nenhuma turma com alunos encontrados.")
        return

    # Mostrar resultados
    print("üìä N√∫mero de alunos por turma:")
    tabela = [
        [turma, len(alunos)] for turma, alunos in turmas_alunos.items()
    ]
    print(tabulate(tabela, headers=["Turma", "N.¬∫ de Alunos"], tablefmt="grid"))







# ----------------------------
# FUN√á√ÉO PARA GUARDAR DADOS  |
# ----------------------------

def guardar_dados(nome_ficheiro="dados.json"):
    dados = {
        "alunos": Aluno.alunos,
        "docentes": Docente.docentes,
        "turmas": list(Turma.turmas),
        "disciplinas": Disciplina.disciplinas
    }
    with open(nome_ficheiro, "w", encoding="utf-8") as f:
        json.dump(dados, f, indent=4, ensure_ascii=False)
    print(f"üíæ Dados guardados em '{nome_ficheiro}'.")





# ----------------------------
# FUN√á√ÉO PARA CARREGAR DADOS  |
# ----------------------------

def carregar_dados(nome_ficheiro="dados.json"):
    try:
        with open(nome_ficheiro, "r", encoding="utf-8") as f:
            dados = json.load(f)
            Aluno.alunos = dados.get("alunos", {})
            Docente.docentes = dados.get("docentes", {})
            Turma.turmas = dados.get("turmas", {})  # ‚Üê aqui est√° corrigido!
            Disciplina.disciplinas = dados.get("disciplinas", {})
        print(f"üìÇ Dados carregados de '{nome_ficheiro}'.")
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Ficheiro '{nome_ficheiro}' n√£o encontrado.")






# -----------------------------------------------------
# CARREGAR OS DADOS GUARDADOS NO FICHEIRO DADOS.JSON  |
# -----------------------------------------------------

carregar_dados()

"""## Adicionar Aluno e guadar dados"""

# Adicionar aluno
Aluno.adicionar_aluno("Joana Silva", "41013", "123456789", "joana@example.com", "15-09-2006")
Aluno.adicionar_aluno("Tiago J√∫nior", "41014", "123456788", "tiago@example.com", "01-01-1996")
Aluno.adicionar_aluno("Teresa", "41311", "635497210", "tiago@example.com", "14-09-2000")


# üíæ Guardar dados
guardar_dados()

"""## Adicionar Docente e guadar dados"""

# Adicionar Docente
Docente.adicionar_docente("Prof. Lu√≠s", "D05", "12-07-1975")

# üíæ Guardar dados
guardar_dados()

"""## Adicionar Turma e guardar dados"""

# Adicionar Turma
Turma.adicionar_turma("10A")
Turma.adicionar_turma("9B")

#Atribuir Turma ao Aluno
Turma.adicionar_aluno_turma("10A", "41013")


# üíæ Guardar dados
guardar_dados()

"""##Adicionar Disciplina, associar elementos e guardar dados"""

# Adicionar Disciplinas
Disciplina.adicionar_disciplina("Matem√°tica")

#Atribuir docente
Disciplina.atribuir_docente("Matem√°tica", "D05")

#Atribuir turma
Disciplina.atribuir_turma("Matem√°tica", "10A")

#Inscrever aluno
Disciplina.inscrever_aluno("Matem√°tica", "41013")

# üíæ Guardar dados
guardar_dados()

"""## Adicionar Classifica√ß√£o"""

# Adicionar Classifica√ß√£o
Disciplina.adicionar_classificacao("Matem√°tica", "41013", "M1", 18)
Disciplina.adicionar_classificacao("Matem√°tica", "41013", "M2", "F")
Disciplina.adicionar_classificacao("Matem√°tica", "41013", "M3", 14)


# üíæ Guardar dados
guardar_dados()

"""## Lista de Alunos"""

Aluno.listar_alunos()

"""## Lista de Docentes"""

Docente.listar_docentes()

"""## Lista de Turmas"""

Turma.listar_turmas()

"""## Lista de Disciplina"""

Disciplina.listar_disciplinas()

"""## Lista de N√∫mero de Alunos por Turma:


"""

relatorio_alunos_por_turma()

"""##Relat√≥rio de Estat√≠sticas"""

Disciplina.relatorio_estatisticas()

"""## Valida√ß√£o da integridade dos dados"""

Disciplina.validar_integridade_total()