-- used to build the Genesis provider environment in a new region or provider account

/****** GENESIS MASTER DATABASE ******/

CREATE DATABASE IF NOT EXISTS GENESISAPP_MASTER;
USE DATABASE GENESISAPP_MASTER;
CREATE SCHEMA IF NOT EXISTS CODE_SCHEMA;
USE SCHEMA CODE_SCHEMA;
CREATE IMAGE REPOSITORY IF NOT EXISTS SERVICE_REPO;

-- schema/table/view used to share pre-harvested metadata with the app
CREATE SCHEMA GENESISAPP_MASTER.HARVEST_SHARE;
CREATE OR REPLACE TABLE GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS AS
SELECT * FROM GENESIS_TEST.GENESIS_NEW_JL_TEST.HARVEST_RESULTS; --TODO update source

-- Local view for sharing pre-harvested metadata. App-based shared data will have APP_NAME placeholder for database name
CREATE VIEW IF NOT EXISTS GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS_SHARED AS
WITH shared_views AS
(SELECT SOURCE_NAME, replace(QUALIFIED_TABLE_NAME,'SPIDER_DATA','APP_NAME') QUALIFIED_TABLE_NAME, 'APP_NAME' DATABASE_NAME, MEMORY_UUID, SCHEMA_NAME, TABLE_NAME, REPLACE(COMPLETE_DESCRIPTION,'SPIDER_DATA','APP_NAME') COMPLETE_DESCRIPTION, REPLACE(DDL,'SPIDER_DATA','APP_NAME') DDL, REPLACE(DDL_SHORT,'SPIDER_DATA','APP_NAME') DDL_SHORT, 'SHARED_VIEW' DDL_HASH, REPLACE(SUMMARY,'SPIDER_DATA','APP_NAME') SUMMARY, SAMPLE_DATA_TEXT, LAST_CRAWLED_TIMESTAMP, CRAWL_STATUS, ROLE_USED_FOR_CRAWL, EMBEDDING
    FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS
    WHERE SCHEMA_NAME in ('BASEBALL','FORMULA_1')),
local_views AS
(
SELECT SOURCE_NAME, QUALIFIED_TABLE_NAME, DATABASE_NAME, MEMORY_UUID, SCHEMA_NAME, TABLE_NAME, COMPLETE_DESCRIPTION, DDL, DDL_SHORT, 'SHARED_VIEW' DDL_HASH, SUMMARY, SAMPLE_DATA_TEXT, LAST_CRAWLED_TIMESTAMP, CRAWL_STATUS, ROLE_USED_FOR_CRAWL, EMBEDDING
    FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS
    WHERE SCHEMA_NAME NOT in ('BASEBALL','FORMULA_1')
)
SELECT * FROM shared_views
UNION
SELECT * FROM local_views;

/****** GENESIS MASTER DATABASE ******/


/****** EVENT LOGGING SETUP - PROVIDER ******/

-- run event logging setup once for each cloud region
USE ROLE  <authorized role>;

SET REGION = (SELECT CURRENT_REGION()); -- events schema will be named after the region
SET EVENT_TABLE = 'GENESIS_EVENTS.' || $REGION || '.GENESIS_BOT_EVENTS';
SET ACCOUNT_NAME = (SELECT CURRENT_ACCOUNT_NAME());
/* create the events database/schema */
CREATE DATABASE IF NOT EXISTS GENESIS_EVENTS;

USE DATABASE GENESIS_EVENTS;
CREATE SCHEMA IF NOT EXISTS IDENTIFIER($REGION);

CREATE EVENT TABLE IDENTIFIER($EVENT_TABLE);

/* create event table and make it the events table for the account */
CREATE EVENT TABLE IDENTIFIER($EVENT_TABLE);

ALTER ACCOUNT SET EVENT_TABLE = IDENTIFIER($EVENT_TABLE);

-- use the ORGADMIN role to set the account as the events table for the cloud region
-- run the output of this query in the main account - DSHRNXX.GENESIS https://mmb84124.snowflakecomputing.com
SELECT 'USE ROLE ORGADMIN;\n
CALL SYSTEM$SET_EVENT_SHARING_ACCOUNT_FOR_REGION(''' || $REGION || ''', ''PUBLIC'', ''' || $ACCOUNT_NAME || ''');';

/****** EVENT LOGGING SETUP - PROVIDER ******/

create schema GENESISAPP_MASTER.APP_SHARE;

create or replace TABLE GENESISAPP_MASTER.APP_SHARE.IMAGES (
	ID NUMBER(38,0),
	IMAGE_NAME VARCHAR(16777216),
	BOT_NAME VARCHAR(16777216),
	IMAGE_DATA BINARY(8388608),
	ENCODED_IMAGE_DATA VARCHAR(16777216),
	IMAGE_DESC VARCHAR(16777216)
);

create or replace secure view GENESISAPP_MASTER.APP_SHARE.IMAGES_SHARED(
	ID,
	IMAGE_NAME,
	BOT_NAME,
	ENCODED_IMAGE_DATA,
	IMAGE_DESC
) as
SELECT ID, IMAGE_NAME, BOT_NAME, ENCODED_IMAGE_DATA, IMAGE_DESC
FROM GENESISAPP_MASTER.APP_SHARE.IMAGES;


-- ########## APP PACKAGE SETUP ######################################

USE WAREHOUSE XSMALL;

-- ########## BEGIN INITIALIZATION  ######################################


--DROP DATABASE IF EXISTS GENESISAPP_APP_PKG ;
--drop database genesisapp_master;

-- use genesis_account_setup.sql if GENESISAPP_MASTER database does not exist
-- CREATE DATABASE IF NOT EXISTS GENESISAPP_MASTER;
USE DATABASE GENESISAPP_MASTER;
CREATE SCHEMA IF NOT EXISTS CODE_SCHEMA;
USE SCHEMA CODE_SCHEMA;
CREATE IMAGE REPOSITORY IF NOT EXISTS SERVICE_REPO;

-- uncomment if creating a brand new app pkg in the account
CREATE APPLICATION PACKAGE IF NOT EXISTS GENESISAPP_APP_PKG;

USE DATABASE GENESISAPP_APP_PKG;
CREATE SCHEMA IF NOT EXISTS CODE_SCHEMA;
CREATE STAGE IF NOT EXISTS APP_CODE_STAGE;


-- ##########  END INITIALIZATION   ######################################


-- ########## DATA SHARING  ##############################################

-- dynamically generate shared views and grants for spider_data
CREATE OR REPLACE PROCEDURE GENESISAPP_APP_PKG.CODE_SCHEMA.GENERATE_SHARED_VIEWS(SCHEMA_NAME VARCHAR, APP_PKG_NAME VARCHAR)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  result STRING DEFAULT '';
  create_view_query STRING;
  grant_query STRING;
  table_name STRING;
  table_catalog STRING;
  table_schema STRING;
  new_schema_name STRING;
  app_pkg STRING;
  select_statement STRING;
BEGIN
  new_schema_name := SCHEMA_NAME;
  app_pkg := APP_PKG_NAME;

  EXECUTE IMMEDIATE 'CREATE SCHEMA IF NOT EXISTS ' || app_pkg || '.' || new_schema_name;
  EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA ' || app_pkg || '.' || new_schema_name || ' TO SHARE IN APPLICATION PACKAGE ' || app_pkg;

  LET table_cursor CURSOR FOR SELECT TABLE_NAME, TABLE_CATALOG, TABLE_SCHEMA FROM SPIDER_DATA.INFORMATION_SCHEMA.TABLES
    WHERE TABLE_SCHEMA = ?;
  OPEN table_cursor USING(new_schema_name);

  FOR table_record IN table_cursor DO
    table_name := table_record.table_name;
    table_catalog := table_record.table_catalog;
    table_schema := table_record.table_schema;
    create_view_query := 'CREATE OR REPLACE VIEW ' || app_pkg || '.' || table_schema || '.' || table_name || ' AS SELECT * FROM ' || table_catalog || '.' || table_schema || '.' || table_name || ';';
    grant_query := 'GRANT SELECT ON VIEW ' || app_pkg || '.' || table_schema || '.' || table_name || ' TO SHARE IN APPLICATION PACKAGE ' || app_pkg;
    EXECUTE IMMEDIATE create_view_query;
    EXECUTE IMMEDIATE grant_query;
    result := result || 'Executed: ' || grant_query || CHAR(10) || 'Executed: ' || create_view_query || CHAR(10);
  END FOR;
  RETURN result;
END;
$$;



CREATE OR REPLACE PROCEDURE GENESISAPP_APP_PKG.CODE_SCHEMA.SHARE_TO_APP_PKG(APP_PKG_NAME STRING)
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
-- Grant reference usage on additional databases
  EXECUTE IMMEDIATE 'GRANT REFERENCE_USAGE ON DATABASE SPIDER_DATA TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME || ';';
  EXECUTE IMMEDIATE 'GRANT REFERENCE_USAGE ON DATABASE GENESISAPP_MASTER TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME || ';';

-- Share harvest records from provider to app package (to be removed)
  EXECUTE IMMEDIATE 'CREATE OR REPLACE SCHEMA ' || APP_PKG_NAME || '.SHARED_HARVEST';
  EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA ' || APP_PKG_NAME || '.SHARED_HARVEST TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME;
  EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW ' || APP_PKG_NAME || '.SHARED_HARVEST.HARVEST_RESULTS AS SELECT * FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS_SHARED';
  EXECUTE IMMEDIATE 'GRANT SELECT ON VIEW ' || APP_PKG_NAME || '.SHARED_HARVEST.HARVEST_RESULTS TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME;

 -- Share data from provider to app package
  EXECUTE IMMEDIATE 'CREATE OR REPLACE SCHEMA ' || APP_PKG_NAME || '.APP_SHARE';
  EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA ' || APP_PKG_NAME || '.APP_SHARE TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME;

 -- Share harvest data
  EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW ' || APP_PKG_NAME || '.APP_SHARE.HARVEST_RESULTS AS SELECT * FROM GENESISAPP_MASTER.HARVEST_SHARE.HARVEST_RESULTS_SHARED';
  EXECUTE IMMEDIATE 'GRANT SELECT ON VIEW ' || APP_PKG_NAME || '.APP_SHARE.HARVEST_RESULTS TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME;
 -- Share image data
  EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW ' || APP_PKG_NAME || '.APP_SHARE.IMAGES AS SELECT ID, IMAGE_NAME, BOT_NAME, ENCODED_IMAGE_DATA, IMAGE_DESC FROM GENESISAPP_MASTER.APP_SHARE.IMAGES_SHARED';
  EXECUTE IMMEDIATE 'GRANT SELECT ON VIEW ' || APP_PKG_NAME || '.APP_SHARE.IMAGES TO SHARE IN APPLICATION PACKAGE ' || APP_PKG_NAME;

  RETURN 'Created and shared harvest results and images views';
END;
$$;


-- Call procedure to create the shared view for harvest results
USE SCHEMA GENESISAPP_APP_PKG.CODE_SCHEMA;
CALL GENESISAPP_APP_PKG.CODE_SCHEMA.SHARE_TO_APP_PKG(CURRENT_DATABASE());
USE SCHEMA GENESISAPP_APP_PKG.CODE_SCHEMA;
-- Call the procedure to generate shared views and grants
CALL GENESISAPP_APP_PKG.CODE_SCHEMA.GENERATE_SHARED_VIEWS('BASEBALL', CURRENT_DATABASE());
USE SCHEMA GENESISAPP_APP_PKG.CODE_SCHEMA;
CALL GENESISAPP_APP_PKG.CODE_SCHEMA.GENERATE_SHARED_VIEWS('FORMULA_1', CURRENT_DATABASE());
USE SCHEMA GENESISAPP_APP_PKG.CODE_SCHEMA;


-- ########## END DATA SHARING  ##########################################


-- ############ RUN UPGRADE SCRIPT FOR NEW ENVIRONMENT (e.g. upgrade_dev.sh) #################################
--  bash ./snowflake_app/upgrade_dev.sh /Users/mrainey/Documents/GitHub