import logging
from typing import Optional
from textwrap import dedent

from genesis_bots.core.bot_os_artifacts import (
    ARTIFACT_ID_REGEX,
    get_artifacts_store,
)

from genesis_bots.core.bot_os_tools2 import (
    BOT_ID_IMPLICIT_FROM_CONTEXT,
    THREAD_ID_IMPLICIT_FROM_CONTEXT,
    ToolFuncGroup,
    ToolFuncParamDescriptor,
    gc_tool,
)

from genesis_bots.connectors import get_global_db_connector
db_adapter = get_global_db_connector()

artifact_manager_tools = ToolFuncGroup(
    name="artifact_manager_tools",
    description="Functions to read and list artifacts. Artifacts are files that are generated by bot functions that save their outputs to the internal aartifact storage.",
    lifetime="PERSISTENT",
)


@gc_tool(
    action=dedent(
        """
        The action to perform on the given artifact. Possible actions are:
        (a) DESCRIBE : fetch metadata for this artifact (including a refence to this artifact for creating a URL to it).
        (b) DELETE : delete the given artifact from internal storage.
        """
    ),
    artifact_id="A valid artifact ID, which is a UUID-4 string.",
    thread_id=THREAD_ID_IMPLICIT_FROM_CONTEXT,
    bot_id=BOT_ID_IMPLICIT_FROM_CONTEXT,
    _group_tags_=[artifact_manager_tools],
)
def manage_artifact(
        action: str,
        artifact_id: str = None,
        thread_id: str = None,  # ignored, saved for future use
        bot_id: str =None      # ignored, saved for future use
    ) -> str|dict:
    """
    Get information or manage artifacts. Artifacts are files that are generated by functions that save their outputs as artifacts.
    """
    af = get_artifacts_store(db_adapter)

    action = action.upper()

    if action == "DESCRIBE":
        try:
            metadata = af.get_artifact_metadata(artifact_id)
        except Exception as e:
            return {"Success": False,
                    "Error": str(e)
                    }
        assert 'title_filename' in metadata.keys()  # listed in METADATA_IN_REQUIRED_FIELDS
        ref_notes = af.get_llm_artifact_ref_instructions(artifact_id)
        return {
            "Success": True,
            "Data": metadata,
            "Note": ref_notes,
        }

    elif action == "DELETE":
        raise NotImplementedError()  # TODO: implement this

manage_artifact_functions = [manage_artifact,]


# Called from bot_os_tools.py to update the global list of functions
def get_artifact_manager_functions():
    return manage_artifact_functions
