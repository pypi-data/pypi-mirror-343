Metadata-Version: 2.4
Name: synapstor
Version: 1.0.0
Summary: An unofficial evolution of mcp-server-qdrant - Client and server for semantic storage and search
Author-email: Malindentado <contato@casheiro.com.br>
License-Expression: MIT
Project-URL: Homepage, https://github.com/casheiro/synapstor
Project-URL: Bug Tracker, https://github.com/casheiro/synapstor/issues
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: mcp[cli]>=1.3.0
Requires-Dist: dotenv
Requires-Dist: qdrant-client>=1.3.1
Requires-Dist: fastembed>=0.6.1
Requires-Dist: sentence-transformers>=2.2.2
Requires-Dist: Unidecode>=1.3.0
Requires-Dist: docopt>=0.6.0
Requires-Dist: fastapi>=0.85.1
Requires-Dist: uvicorn>=0.19.0
Requires-Dist: langchain>=0.0.200
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: psutil>=6.0.0
Requires-Dist: pytest>=7.4.3
Provides-Extra: fastembed
Requires-Dist: fastembed>=0.6.1; extra == "fastembed"
Provides-Extra: dev
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: commitizen; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.4.3; extra == "test"
Requires-Dist: pytest-cov>=2.12.1; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Provides-Extra: all
Requires-Dist: fastembed>=0.6.1; extra == "all"
Requires-Dist: pre-commit; extra == "all"
Requires-Dist: black; extra == "all"
Requires-Dist: isort; extra == "all"
Requires-Dist: flake8; extra == "all"
Requires-Dist: mypy; extra == "all"
Requires-Dist: pytest>=7.4.3; extra == "all"
Requires-Dist: pytest-cov>=2.12.1; extra == "all"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "all"
Requires-Dist: commitizen; extra == "all"
Dynamic: license-file

# Synapstor üìöüîç

**Python 3.10+ | MIT License**

## üåé Idioma / Language

- [Portugu√™s üáßüá∑](#portugu√™s)
- [English üá∫üá∏](#english)

---

<a name="portugu√™s"></a>
# Portugu√™s üáßüá∑

> **Synapstor** √© uma biblioteca modular para armazenamento e recupera√ß√£o sem√¢ntica de informa√ß√µes usando embeddings vetoriais e banco de dados Qdrant.
>
> **Nota**: O Synapstor √© uma evolu√ß√£o n√£o oficial do projeto mcp-server-qdrant, expandindo suas funcionalidades para criar uma solu√ß√£o mais abrangente para armazenamento e recupera√ß√£o sem√¢ntica.

## üî≠ Vis√£o Geral

Synapstor √© uma solu√ß√£o completa para armazenamento e recupera√ß√£o de informa√ß√µes baseada em embeddings vetoriais. Combinando a pot√™ncia do Qdrant (banco de dados vetorial) com modelos modernos de embeddings, o Synapstor permite:

- üîç **Busca sem√¢ntica** em documentos, c√≥digo e outros conte√∫dos textuais
- üß† **Armazenamento eficiente** de informa√ß√µes com metadados associados
- üîÑ **Integra√ß√£o com LLMs** atrav√©s do Protocolo MCP (Model Control Protocol)
- üõ†Ô∏è **Ferramentas CLI** para indexa√ß√£o e consulta de dados

## üñ•Ô∏è Requisitos

- **Python**: 3.10 ou superior
- **Qdrant**: Banco de dados vetorial para armazenamento e busca de embeddings
- **Modelos de Embedding**: Por padr√£o, usa modelos da biblioteca FastEmbed

## üì¶ Instala√ß√£o

```bash
# Instala√ß√£o b√°sica via pip
pip install synapstor

# Com suporte a embeddings r√°pidos (recomendado)
pip install "synapstor[fastembed]"

# Para desenvolvimento (formatadores, linters)
pip install "synapstor[dev]"

# Para testes
pip install "synapstor[test]"

# Instala√ß√£o completa (todos os recursos e ferramentas)
pip install "synapstor[all]"
```

## üöÄ Uso R√°pido

### Configura√ß√£o

Existem v√°rias formas de configurar o Synapstor:

1. **Vari√°veis de ambiente**:
   ```bash
   # Exportar as vari√°veis no shell (Linux/macOS)
   export QDRANT_URL="http://localhost:6333"
   export QDRANT_API_KEY="sua-chave-api"
   export COLLECTION_NAME="synapstor"
   export EMBEDDING_MODEL="sentence-transformers/all-MiniLM-L6-v2"

   # Ou no Windows (PowerShell)
   $env:QDRANT_URL = "http://localhost:6333"
   $env:QDRANT_API_KEY = "sua-chave-api"
   $env:COLLECTION_NAME = "synapstor"
   $env:EMBEDDING_MODEL = "sentence-transformers/all-MiniLM-L6-v2"
   ```

2. **Par√¢metros na linha de comando**:
   ```bash
   synapstor-ctl start --qdrant-url http://localhost:6333 --qdrant-api-key sua-chave-api --collection-name synapstor --embedding-model "sentence-transformers/all-MiniLM-L6-v2"
   ```

3. **Programaticamente** (para uso como biblioteca):
   ```python
   from synapstor.settings import Settings

   settings = Settings(
       qdrant_url="http://localhost:6333",
       qdrant_api_key="sua-chave-api",
       collection_name="minha_colecao",
       embedding_model="sentence-transformers/all-MiniLM-L6-v2"
   )
   ```

### Como servidor MCP

```bash
# Iniciar o servidor MCP com a interface centralizada
synapstor-ctl start

# Com par√¢metros de configura√ß√£o
synapstor-ctl start --qdrant-url http://localhost:6333 --qdrant-api-key sua-chave-api --collection-name minha_colecao --embedding-model "sentence-transformers/all-MiniLM-L6-v2"
```

### Indexa√ß√£o de projetos

```bash
# Indexar um projeto
synapstor-ctl indexer --project meu-projeto --path /caminho/do/projeto
```

### Como biblioteca em aplica√ß√µes Python

```python
from synapstor.qdrant import QdrantConnector, Entry
from synapstor.embeddings.factory import create_embedding_provider
from synapstor.settings import EmbeddingProviderSettings

# Inicializar componentes
settings = EmbeddingProviderSettings()
embedding_provider = create_embedding_provider(settings)

connector = QdrantConnector(
    qdrant_url="http://localhost:6333",
    collection_name="minha_colecao",
    embedding_provider=embedding_provider
)

# Armazenar informa√ß√µes
async def store_data():
    entry = Entry(
        content="Conte√∫do a ser armazenado",
        metadata={"chave": "valor"}
    )
    await connector.store(entry)

# Buscar informa√ß√µes
async def search_data():
    results = await connector.search("consulta em linguagem natural")
    for result in results:
        print(result.content)
```

## üìö Documenta√ß√£o Completa

Para documenta√ß√£o detalhada, exemplos avan√ßados, integra√ß√£o com diferentes LLMs, deployment com Docker, e outras informa√ß√µes, visite o [reposit√≥rio no GitHub](https://github.com/casheiro/synapstor).

---

<a name="english"></a>
# English üá∫üá∏

> **Synapstor** is a modular library for semantic storage and retrieval of information using vector embeddings and the Qdrant database.
>
> **Note**: Synapstor is an unofficial evolution of the mcp-server-qdrant project, expanding its functionality to create a more comprehensive solution for semantic storage and retrieval.

## üî≠ Overview

Synapstor is a complete solution for storing and retrieving information based on vector embeddings. Combining the power of Qdrant (vector database) with modern embedding models, Synapstor allows:

- üîç **Semantic search** in documents, code, and other textual content
- üß† **Efficient storage** of information with associated metadata
- üîÑ **Integration with LLMs** through the MCP (Model Control Protocol)
- üõ†Ô∏è **CLI tools** for indexing and querying data

## üñ•Ô∏è Requirements

- **Python**: 3.10 or higher
- **Qdrant**: Vector database for storing and searching embeddings
- **Embedding Models**: By default, uses models from the FastEmbed library

## üì¶ Installation

```bash
# Basic installation via pip
pip install synapstor

# With fast embedding support (recommended)
pip install "synapstor[fastembed]"

# For development (formatters, linters)
pip install "synapstor[dev]"

# For testing
pip install "synapstor[test]"

# Complete installation (all features and tools)
pip install "synapstor[all]"
```

## üöÄ Quick Usage

### Configuration

There are several ways to configure Synapstor:

1. **Environment variables**:
   ```bash
   # Export variables in shell (Linux/macOS)
   export QDRANT_URL="http://localhost:6333"
   export QDRANT_API_KEY="your-api-key"
   export COLLECTION_NAME="synapstor"
   export EMBEDDING_MODEL="sentence-transformers/all-MiniLM-L6-v2"

   # Or on Windows (PowerShell)
   $env:QDRANT_URL = "http://localhost:6333"
   $env:QDRANT_API_KEY = "your-api-key"
   $env:COLLECTION_NAME = "synapstor"
   $env:EMBEDDING_MODEL = "sentence-transformers/all-MiniLM-L6-v2"
   ```

2. **Command line parameters**:
   ```bash
   synapstor-ctl start --qdrant-url http://localhost:6333 --qdrant-api-key your-api-key --collection-name synapstor --embedding-model "sentence-transformers/all-MiniLM-L6-v2"
   ```

3. **Programmatically** (for use as a library):
   ```python
   from synapstor.settings import Settings

   settings = Settings(
       qdrant_url="http://localhost:6333",
       qdrant_api_key="your-api-key",
       collection_name="my_collection",
       embedding_model="sentence-transformers/all-MiniLM-L6-v2"
   )
   ```

### As an MCP server

```bash
# Start the MCP server with the centralized interface
synapstor-ctl start

# With configuration parameters
synapstor-ctl start --qdrant-url http://localhost:6333 --qdrant-api-key your-api-key --collection-name my_collection --embedding-model "sentence-transformers/all-MiniLM-L6-v2"
```

### Project indexing

```bash
# Index a project
synapstor-ctl indexer --project my-project --path /path/to/project
```

### As a library in Python applications

```python
from synapstor.qdrant import QdrantConnector, Entry
from synapstor.embeddings.factory import create_embedding_provider
from synapstor.settings import EmbeddingProviderSettings

# Initialize components
settings = EmbeddingProviderSettings()
embedding_provider = create_embedding_provider(settings)

connector = QdrantConnector(
    qdrant_url="http://localhost:6333",
    collection_name="my_collection",
    embedding_provider=embedding_provider
)

# Store information
async def store_data():
    entry = Entry(
        content="Content to be stored",
        metadata={"key": "value"}
    )
    await connector.store(entry)

# Search for information
async def search_data():
    results = await connector.search("natural language query")
    for result in results:
        print(result.content)
```

## üìö Complete Documentation

For detailed documentation, advanced examples, integration with different LLMs, Docker deployment, and other information, visit the [GitHub repository](https://github.com/casheiro/synapstor).

---

Developed with ‚ù§Ô∏è by the Synapstor team
