from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import logging
from typing import Optional

from ..authenticator import Authenticator, AuthState
from ..utils import get_image_from_base64, mask_sensitive

logger = logging.getLogger(__name__)

async def cancel_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã."""
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã")
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

async def send_captcha_image(update: Update, captcha_base64: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    image = await get_image_from_base64(captcha_base64)
    bio = BytesIO()
    image.save(bio, format="PNG")
    bio.seek(0)
    await update.message.reply_photo(photo=InputFile(bio, filename="captcha.png"))
    logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‡§ï‡§™—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

async def send_error_message(update: Update, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    logger.error(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {message}")
    await update.message.reply_text(f"‚ùå {message}")

async def start_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if update.callback_query:
        await update.callback_query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ª—é–±–æ–µ):", reply_markup=await cancel_button()
        )
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–ª—é–±–æ–µ):", reply_markup=await cancel_button()
        )
    context.user_data['state'] = AuthState.WAITING_USERNAME.value
    context.user_data['authenticator'] = Authenticator(str(user_id))
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {AuthState.WAITING_USERNAME.value}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = update.effective_user.id
    state = context.user_data.get('state')
    authenticator: Optional[Authenticator] = context.user_data.get('authenticator')
    text = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state}: {text}")

    if not state or not authenticator:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç authenticator –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–º–∞–Ω–¥—ã /auth.")
        return

    if state == AuthState.WAITING_USERNAME.value:
        authenticator.username = text
        authenticator.state = AuthState.WAITING_PHONE.value
        context.user_data['state'] = AuthState.WAITING_PHONE.value
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n–í —Ñ–æ—Ä–º–∞—Ç–µ 79*********", reply_markup=await cancel_button())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞: {text}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    if state == AuthState.WAITING_PHONE.value:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {mask_sensitive(text)}")
        if text.startswith("8"):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 8: {mask_sensitive(text)}")
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 7 –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:",
                reply_markup=await cancel_button()
            )
            return
        elif text.startswith("7") and len(text) != 11:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Å 7 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã: {mask_sensitive(text)}")
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 7, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä:",
                reply_markup=await cancel_button()
            )
            return
        authenticator.phone_number = text
        result = await authenticator.get_code_or_captcha()
        if isinstance(result, str):
            if result == "sms":
                authenticator.state = AuthState.WAITING_SMS_CODE.value
                context.user_data['state'] = AuthState.WAITING_SMS_CODE.value
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:", reply_markup=await cancel_button())
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é SMS-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                await send_error_message(update, result)
        elif isinstance(result, tuple):
            payload, captcha_base64 = result
            authenticator.state = AuthState.WAITING_CAPTCHA.value
            context.user_data['state'] = AuthState.WAITING_CAPTCHA.value
            await send_captcha_image(update, captcha_base64)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=await cancel_button())
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return

    if state == AuthState.WAITING_CAPTCHA.value:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–¥ –∫–∞–ø—á–∏: {text}")
        result = await authenticator.submit_captcha(text)
        if isinstance(result, dict):
            captcha_base64 = result.get("captcha", "")
            await send_captcha_image(update, captcha_base64)
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥:", reply_markup=await cancel_button())
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è")
        elif result == "sms":
            authenticator.state = AuthState.WAITING_SMS_CODE.value
            context.user_data['state'] = AuthState.WAITING_SMS_CODE.value
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:", reply_markup=await cancel_button())
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é SMS-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await send_error_message(update, result or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏.")
        return

    if state == AuthState.WAITING_SMS_CODE.value:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª SMS-–∫–æ–¥: {text}")
        result = await authenticator.submit_code(text)
        if result == "email":
            authenticator.state = AuthState.WAITING_EMAIL_CODE.value
            context.user_data['state'] = AuthState.WAITING_EMAIL_CODE.value
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ email: {mask_sensitive(authenticator.email_address)}",
                reply_markup=await cancel_button()
            )
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é email-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        elif isinstance(result, tuple):
            token, wbx_key = result
            authenticator.state = AuthState.END.value
            context.user_data['state'] = AuthState.END.value
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            logger.info(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            context.user_data.clear()
        else:
            await send_error_message(update, result or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞.")
        return

    if state == AuthState.WAITING_EMAIL_CODE.value:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª email-–∫–æ–¥: {text}")
        result = await authenticator.submit_code(text)
        if isinstance(result, tuple):
            token, wbx_key = result
            authenticator.state = AuthState.END.value
            context.user_data['state'] = AuthState.END.value
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            logger.info(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            context.user_data.clear()
        else:
            await send_error_message(update, result or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞.")
        return

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    user_id = update.callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
    context.user_data.clear()
    await update.callback_query.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await update.callback_query.message.delete()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.")