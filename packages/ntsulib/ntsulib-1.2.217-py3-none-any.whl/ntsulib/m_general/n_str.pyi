__all__ = ['n_str']

class n_str:
    def __init__(self, arg: object = '') -> None: ...
    @property
    def string(self): ...
    @string.setter
    def string(self, value: object): ...
    def setString(self, value: object): ...
    def getString(self, value: object): ...
    def to_str(self) -> str: ...
    def end_with(self, var: str) -> bool: ...
    def start_with(self, var: str) -> bool: ...
    def replaceAll(self, bereplaced: str, replace: str) -> n_str: ...
    def replaceFirst(self, pattern, replacement) -> n_str: ...
    def replaceEnd(self, pattern, replacement) -> n_str: ...
    def replaceAt(self, index: int, bereplaced: str, replace: str) -> n_str: ...
    def has_digits(self) -> bool: ...
    def count_str(self, c: str) -> int: ...
    def split(self, delimiter: str = None, limit: int = -1) -> list: ...
    def contains(self, s: str) -> bool: ...
    def index_of(self, s: str, start: int = 0) -> int: ...
    def last_index_of(self, s: str, start: int = 0) -> int: ...
    def matches(self, regex: str) -> bool: ...
    def substring(self, begin: int, end: int = None) -> n_str: ...
    def to_lower_case(self) -> n_str: ...
    def to_upper_case(self) -> n_str: ...
    def trim(self) -> n_str: ...
    def concat(self, s: str) -> n_str: ...
    def char_at(self, index: int) -> str: ...
    def code_point_at(self, index: int) -> int: ...
    def is_empty(self) -> bool: ...
    def is_blank(self) -> bool: ...
    def format(self, *args, **kwargs) -> n_str: ...
    def join(self, iterable) -> n_str: ...
    def __len__(self) -> int: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __eq__(self, other): ...
    def __contains__(self, item) -> bool: ...
    def __getitem__(self, index): ...
