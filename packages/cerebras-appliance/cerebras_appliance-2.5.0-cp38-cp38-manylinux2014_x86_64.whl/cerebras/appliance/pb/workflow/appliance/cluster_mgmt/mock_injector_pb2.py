# Copyright 2016-2024 Cerebras Systems
# SPDX-License-Identifier: BSD-3-Clause

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cerebras/pb/workflow/appliance/cluster_mgmt/mock_injector.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cerebras/pb/workflow/appliance/cluster_mgmt/mock_injector.proto',
  package='cluster.cluster_mgmt_pb',
  syntax='proto3',
  serialized_options=b'Z+cerebras/pb/workflow/appliance/cluster_mgmt',
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n?cerebras/pb/workflow/appliance/cluster_mgmt/mock_injector.proto\x12\x17\x63luster.cluster_mgmt_pb\"C\n\x11MockMethodRequest\x12\x13\n\x0bmethod_name\x18\x01 \x01(\t\x12\x19\n\x11serialized_method\x18\x02 \x01(\t\"\x14\n\x12MockMethodResponse2\xf1\x01\n\x13MockInjectorService\x12j\n\rMockApiMethod\x12*.cluster.cluster_mgmt_pb.MockMethodRequest\x1a+.cluster.cluster_mgmt_pb.MockMethodResponse\"\x00\x12n\n\x11\x43learMockedMethod\x12*.cluster.cluster_mgmt_pb.MockMethodRequest\x1a+.cluster.cluster_mgmt_pb.MockMethodResponse\"\x00\x42-Z+cerebras/pb/workflow/appliance/cluster_mgmtb\x06proto3'
)




_MOCKMETHODREQUEST = _descriptor.Descriptor(
  name='MockMethodRequest',
  full_name='cluster.cluster_mgmt_pb.MockMethodRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='method_name', full_name='cluster.cluster_mgmt_pb.MockMethodRequest.method_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='serialized_method', full_name='cluster.cluster_mgmt_pb.MockMethodRequest.serialized_method', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=92,
  serialized_end=159,
)


_MOCKMETHODRESPONSE = _descriptor.Descriptor(
  name='MockMethodResponse',
  full_name='cluster.cluster_mgmt_pb.MockMethodResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=161,
  serialized_end=181,
)

DESCRIPTOR.message_types_by_name['MockMethodRequest'] = _MOCKMETHODREQUEST
DESCRIPTOR.message_types_by_name['MockMethodResponse'] = _MOCKMETHODRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

MockMethodRequest = _reflection.GeneratedProtocolMessageType('MockMethodRequest', (_message.Message,), {
  'DESCRIPTOR' : _MOCKMETHODREQUEST,
  '__module__' : 'cerebras.appliance.pb.workflow.appliance.cluster_mgmt.mock_injector_pb2'
  # @@protoc_insertion_point(class_scope:cluster.cluster_mgmt_pb.MockMethodRequest)
  })
_sym_db.RegisterMessage(MockMethodRequest)

MockMethodResponse = _reflection.GeneratedProtocolMessageType('MockMethodResponse', (_message.Message,), {
  'DESCRIPTOR' : _MOCKMETHODRESPONSE,
  '__module__' : 'cerebras.appliance.pb.workflow.appliance.cluster_mgmt.mock_injector_pb2'
  # @@protoc_insertion_point(class_scope:cluster.cluster_mgmt_pb.MockMethodResponse)
  })
_sym_db.RegisterMessage(MockMethodResponse)


DESCRIPTOR._options = None

_MOCKINJECTORSERVICE = _descriptor.ServiceDescriptor(
  name='MockInjectorService',
  full_name='cluster.cluster_mgmt_pb.MockInjectorService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=184,
  serialized_end=425,
  methods=[
  _descriptor.MethodDescriptor(
    name='MockApiMethod',
    full_name='cluster.cluster_mgmt_pb.MockInjectorService.MockApiMethod',
    index=0,
    containing_service=None,
    input_type=_MOCKMETHODREQUEST,
    output_type=_MOCKMETHODRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='ClearMockedMethod',
    full_name='cluster.cluster_mgmt_pb.MockInjectorService.ClearMockedMethod',
    index=1,
    containing_service=None,
    input_type=_MOCKMETHODREQUEST,
    output_type=_MOCKMETHODRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_MOCKINJECTORSERVICE)

DESCRIPTOR.services_by_name['MockInjectorService'] = _MOCKINJECTORSERVICE

# @@protoc_insertion_point(module_scope)
