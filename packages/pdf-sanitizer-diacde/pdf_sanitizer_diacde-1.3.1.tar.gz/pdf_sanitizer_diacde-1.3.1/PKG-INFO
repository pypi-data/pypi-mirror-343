Metadata-Version: 2.1
Name: pdf_sanitizer_diacde
Version: 1.3.1
Author: DIACDE - TJGO
License: Attribution-NonCommercial-ShareAlike
Requires-Python: >=3.9.4
Description-Content-Type: text/markdown

# PDF-Sanitizer

**PDFSanitizer** √© uma ferramenta Python poderosa para analisar, detectar e tratar conte√∫dos suspeitos dentro de arquivos PDF. Ideal para ambientes que lidam com documentos potencialmente inseguros, ela permite identificar elementos como textos ocultos, fontes esquisitas, caracteres de controle e imagens com caracter√≠sticas suspeitas.

## Funcionalidades

- üìÑ An√°lise de conte√∫do textual (texto invis√≠vel, fontes estranhas, etc.)
- üñºÔ∏è Verifica√ß√£o de imagens (entropia baixa, metadados suspeitos, tamanhos incomuns)
- ‚úÇÔ∏è M√∫ltiplas formas de tratamento (remover, substituir, destacar ou apenas exibir)
- üîÅ Suporte a m√∫ltiplos PDFs em uma √∫nica chamada
- üß™ Resultados prontos para serem consumidos por outras aplica√ß√µes

## Instala√ß√£o

```bash
pip install pdf-sanitizer-diacde
```

## Como funciona

1. Recebe arquivos PDF codificados em base64
2. Analisa cada p√°gina do PDF buscando textos e imagens suspeitas
3. Aplica o tratamento configurado (`remove`, `replace`, `highlight`, `show`)
4. Retorna o PDF sanitizado + as informa√ß√µes dos elementos suspeitos encontrados

## Uso

### Fun√ß√£o principal

```python
from your_module import sanitize_pdf

# Um √∫nico PDF base64
result = sanitize_pdf(pdf_base64_data, error_treatment="remove", show_info=True)

# V√°rios PDFs
results = sanitize_pdf([pdf1_base64, pdf2_base64], error_treatment="highlight", show_info=True)
```

### Tratamentos dispon√≠veis

- `"remove"` ‚Äì Remove o conte√∫do suspeito
- `"replace"` ‚Äì Substitui por um marcador
- `"highlight"` ‚Äì Destaca o conte√∫do (ex: texto vermelho, bordas)
- `"show"` ‚Äì Apenas mostra, sem modifica√ß√µes

## Estrutura do Projeto

- `PDFSanitizer`: Classe principal, herda l√≥gica da classe `ProcessPDFMethods`
- `ProcessPDFMethods`: Onde a m√°gica acontece ‚Äì an√°lise de texto, imagens e reescrita das p√°ginas
- `sanitize_pdf`: Interface externa para uso em aplica√ß√µes ou pipelines
- `SanitizationResult`: Objeto de retorno que cont√©m:
    - `base64_pdf`: PDF tratado
    - `is_doc_suspect`: Booleano indicando se h√° algo estranho
    - `suspect_elements`: Lista de textos/imagens considerados suspeitos

## Regras de Detec√ß√£o

### Texto

- `hidden_text_rule`: Detecta texto invis√≠vel (ex: branco em fundo branco)
- `weird_font_rule`: Detecta fontes n√£o usuais
- `control_character_rule`: Caracteres ASCII de controle
- `margin_outlier_rule`: Textos posicionados fora das margens usuais

### Imagens

- `image_rule`: Verifica entropia, metadados e resolu√ß√£o da imagem

## Exemplo de Resultado

```python
SanitizationResult(
    base64_pdf='JVBERi0xLjcKJ...',
    is_doc_suspect=True,
    suspect_elements={
        "text": [
            SuspectText(page_number=1, reason="potential harmful text", text="invisible spam")
        ],
        "images": [
            SuspectImage(page_number=2, reason="potential harmful image", image_name="img1.jpg", image_bytes=b'...')
        ]
    }
)
```

## Contribuindo

Pull requests s√£o mais do que bem-vindos! Envie melhorias de regras, tratamento, refatora√ß√µes ou novas ideias.

## ‚ö†Aviso

Este projeto √© experimental. Nenhuma regra substitui uma an√°lise humana completa. Use com sabedoria!

## Licen√ßa

MIT License.
