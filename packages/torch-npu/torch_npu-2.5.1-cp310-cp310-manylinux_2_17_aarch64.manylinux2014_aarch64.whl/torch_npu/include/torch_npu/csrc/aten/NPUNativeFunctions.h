#pragma once

// an external backend might generate file within its code tree
// and check all the source files within the tree with clang-format.
// so, disable it since the backend might have a different config.
// clang-format off

// Autogenerated file by gen_backend_stubs.py. Do not edit directly!

#include <ATen/Tensor.h>
#include <ATen/ATen.h>

namespace at_npu {
namespace native {

struct NPUNativeFunctions {

static ::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _linalg_svd_out(const at::Tensor & A, bool full_matrices, bool compute_uv, ::std::optional<c10::string_view> driver, at::Tensor & U, at::Tensor & S, at::Tensor & Vh);
static ::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> native_batch_norm_out(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, bool training, double momentum, double eps, at::Tensor & out, at::Tensor & save_mean, at::Tensor & save_invstd);
static ::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> npu_apply_adam_out(const at::Scalar & beta1_power, const at::Scalar & beta2_power, const at::Scalar & lr, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, ::std::optional<bool> use_locking, ::std::optional<bool> use_nesterov, at::Tensor & var, at::Tensor & m, at::Tensor & v);
static ::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> npu_apply_adam_w_out(const at::Scalar & beta1_power, const at::Scalar & beta2_power, const at::Scalar & lr, const at::Scalar & weight_decay, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, const ::std::optional<at::Tensor> & max_grad_norm, ::std::optional<bool> amsgrad, ::std::optional<bool> maximize, at::Tensor & var, at::Tensor & m, at::Tensor & v);
static ::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> npu_bert_apply_adam_out(const at::Scalar & lr, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, const at::Scalar & max_grad_norm, const at::Scalar & global_grad_norm, const at::Scalar & weight_decay, const ::std::optional<at::Scalar> & step_size, int64_t adam_mode, at::Tensor & var, at::Tensor & m, at::Tensor & v);
static ::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> aminmax_out(const at::Tensor & self, ::std::optional<int64_t> dim, bool keepdim, at::Tensor & min, at::Tensor & max);
static ::std::tuple<at::Tensor &,at::Tensor &> kthvalue_out(const at::Tensor & self, int64_t k, at::Dimname dim, bool keepdim, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> kthvalue_out(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> linalg_qr_out(const at::Tensor & A, c10::string_view mode, at::Tensor & Q, at::Tensor & R);
static ::std::tuple<at::Tensor &,at::Tensor &> log_sigmoid_forward_out(const at::Tensor & self, at::Tensor & output, at::Tensor & buffer);
static ::std::tuple<at::Tensor &,at::Tensor &> max_out(const at::Tensor & self, at::Dimname dim, bool keepdim, at::Tensor & max, at::Tensor & max_values);
static ::std::tuple<at::Tensor &,at::Tensor &> max_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & max, at::Tensor & max_values);
static ::std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> max_pool3d_with_indices_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> median_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> min_out(const at::Tensor & self, at::Dimname dim, bool keepdim, at::Tensor & min, at::Tensor & min_indices);
static ::std::tuple<at::Tensor &,at::Tensor &> min_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & min, at::Tensor & min_indices);
static ::std::tuple<at::Tensor &,at::Tensor &> multilabel_margin_loss_forward_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & output, at::Tensor & is_target);
static ::std::tuple<at::Tensor &,at::Tensor &> nll_loss2d_forward_out(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight);
static ::std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_out(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight);
static ::std::tuple<at::Tensor &,at::Tensor &> npu_fused_infer_attention_score_out_symint(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & pse_shift, const ::std::optional<at::Tensor> & atten_mask, at::OptionalSymIntArrayRef actual_seq_lengths, at::OptionalSymIntArrayRef actual_seq_lengths_kv, const ::std::optional<at::Tensor> & dequant_scale1, const ::std::optional<at::Tensor> & quant_scale1, const ::std::optional<at::Tensor> & dequant_scale2, const ::std::optional<at::Tensor> & quant_scale2, const ::std::optional<at::Tensor> & quant_offset2, const ::std::optional<at::Tensor> & antiquant_scale, const ::std::optional<at::Tensor> & antiquant_offset, const ::std::optional<at::Tensor> & key_antiquant_scale, const ::std::optional<at::Tensor> & key_antiquant_offset, const ::std::optional<at::Tensor> & value_antiquant_scale, const ::std::optional<at::Tensor> & value_antiquant_offset, const ::std::optional<at::Tensor> & block_table, const ::std::optional<at::Tensor> & query_padding_size, const ::std::optional<at::Tensor> & kv_padding_size, const ::std::optional<at::Tensor> & key_shared_prefix, const ::std::optional<at::Tensor> & value_shared_prefix, at::OptionalSymIntArrayRef actual_shared_prefix_len, const ::std::optional<at::Tensor> & query_rope, const ::std::optional<at::Tensor> & key_rope, const ::std::optional<at::Tensor> & key_rope_antiquant_scale, int64_t num_heads, double scale, int64_t pre_tokens, int64_t next_tokens, c10::string_view input_layout, int64_t num_key_value_heads, int64_t sparse_mode, int64_t inner_precise, int64_t block_size, int64_t antiquant_mode, int64_t key_antiquant_mode, int64_t value_antiquant_mode, bool softmax_lse_flag, const ::std::optional<at::Tensor> & workspace, at::Tensor & attention_out, at::Tensor & softmax_lse);
static ::std::tuple<at::Tensor &,at::Tensor &> sort_out(const at::Tensor & self, ::std::optional<bool> stable, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> sort_out(const at::Tensor & self, at::Dimname dim, bool descending, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> sort_out(const at::Tensor & self, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> topk_out(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor & values, at::Tensor & indices);
static ::std::tuple<at::Tensor &,at::Tensor &> triangular_solve_out(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular, at::Tensor & X, at::Tensor & M);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_multi_head_attention_backward(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const at::Tensor & query_weight, const at::Tensor & key_weight, const at::Tensor & value_weight, const at::Tensor & out_proj_weight, const ::std::optional<at::Tensor> & query_bias, const ::std::optional<at::Tensor> & key_bias, const ::std::optional<at::Tensor> & value_bias, const ::std::optional<at::Tensor> & out_proj_bias, const at::Tensor & query_res, const at::Tensor & key_res, const at::Tensor & value_res, const at::Tensor & attn_scores, const at::Tensor & attn_res, const at::Tensor & context, const at::Tensor & y_grad, const at::Tensor & dropout_mask, int64_t attn_head_num, int64_t attn_dim_per_head, int64_t src_len, int64_t tgt_len, double dropout_prob, bool softmax_use_float);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & seq_mask, const at::Tensor & h, const at::Tensor & c, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm_cell(const at::Tensor & input, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & h, const at::Tensor & c, const ::std::optional<at::Tensor> & b_ih={}, const ::std::optional<at::Tensor> & b_hh={});
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm_data(const at::Tensor & input, const at::Tensor & batch_sizes, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & seq_mask, const at::Tensor & h, const at::Tensor & c, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_multi_head_attention(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const at::Tensor & query_weight, const at::Tensor & key_weight, const at::Tensor & value_weight, const at::Tensor & attn_mask, const at::Tensor & out_proj_weight, const ::std::optional<at::Tensor> & query_bias, const ::std::optional<at::Tensor> & key_bias, const ::std::optional<at::Tensor> & value_bias, const ::std::optional<at::Tensor> & out_proj_bias, const ::std::optional<at::Tensor> & dropout_mask, int64_t attn_head_num, int64_t attn_dim_per_head, int64_t src_len, int64_t tgt_len, double dropout_prob, bool softmax_use_float);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm_cell_backward(const ::std::optional<at::Tensor> & grady, const ::std::optional<at::Tensor> & gradh, const ::std::optional<at::Tensor> & gradc, const at::Tensor & input, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & h, const at::Tensor & c, const at::Tensor & y_output, const at::Tensor & h_output, const at::Tensor & c_output, const at::Tensor & i, const at::Tensor & j, const at::Tensor & f, const at::Tensor & o, const at::Tensor & tanhc);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_moe_distribute_dispatch(const at::Tensor & x, const at::Tensor & expert_ids, c10::string_view group_ep, int64_t ep_world_size, int64_t ep_rank_id, int64_t moe_expert_num, const ::std::optional<at::Tensor> & scales={}, const ::std::optional<at::Tensor> & x_active_mask={}, const ::std::optional<at::Tensor> & expert_scales={}, c10::string_view group_tp="", int64_t tp_world_size=0, int64_t tp_rank_id=0, int64_t expert_shard_type=0, int64_t shared_expert_num=1, int64_t shared_expert_rank_num=0, int64_t quant_mode=0, int64_t global_bs=0, int64_t expert_token_nums_type=1);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_gru(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & weight_input, const at::Tensor & weight_hidden, const at::Tensor & bias_input, const at::Tensor & bias_hidden, const at::Tensor & seq_length, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_gru_backward(const ::std::optional<at::Tensor> & grady, const ::std::optional<at::Tensor> & gradh, const at::Tensor & input, const at::Tensor & weight_input, const at::Tensor & weight_hidden, const at::Tensor & bias_input, const at::Tensor & bias_hidden, const at::Tensor & seq_length, const at::Tensor & hx, const at::Tensor & y_output, const at::Tensor & h_output, const at::Tensor & output_updata, const at::Tensor & output_reset, const at::Tensor & output_new, const at::Tensor & hidden_new);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_dequant_rope_quant_kvcache(const at::Tensor & x, const at::Tensor & cos, const at::Tensor & sin, const at::Tensor & k_cache, const at::Tensor & v_cache, const at::Tensor & indices, const at::Tensor & scale_k, const at::Tensor & scale_v, at::IntArrayRef size_splits, const ::std::optional<at::Tensor> & offset_k={}, const ::std::optional<at::Tensor> & offset_v={}, const ::std::optional<at::Tensor> & weight_scale={}, const ::std::optional<at::Tensor> & activation_scale={}, const ::std::optional<at::Tensor> & bias={}, int64_t quant_mode=0, c10::string_view input_layout="BSND", bool kv_output=false, c10::string_view cache_mode="contiguous");
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm_backward(const ::std::optional<at::Tensor> & grady, const ::std::optional<at::Tensor> & gradh, const ::std::optional<at::Tensor> & gradc, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & hx, const at::Tensor & cx, const at::Tensor & y_output, const at::Tensor & h_output, const at::Tensor & c_output, const at::Tensor & i, const at::Tensor & j, const at::Tensor & f, const at::Tensor & o, const at::Tensor & tanhc);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_lstm_data_backward(const ::std::optional<at::Tensor> & grady_opt, const ::std::optional<at::Tensor> & gradh_opt, const ::std::optional<at::Tensor> & gradc_opt, const at::Tensor & input, const at::Tensor & batch_sizes, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & init_h, const at::Tensor & init_c, const at::Tensor & y, const at::Tensor & h, const at::Tensor & c, const at::Tensor & i, const at::Tensor & j, const at::Tensor & f, const at::Tensor & o, const at::Tensor & tanhc, bool flag_direction);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_rope_quant_kvcache(const at::Tensor & x, const at::Tensor & cos, const at::Tensor & sin, const at::Tensor & k_cache, const at::Tensor & v_cache, const at::Tensor & indices, const at::Tensor & scale_k, const at::Tensor & scale_v, at::IntArrayRef size_splits, const ::std::optional<at::Tensor> & offset_k={}, const ::std::optional<at::Tensor> & offset_v={}, int64_t quant_mode=0, c10::string_view input_layout="BSND", bool kv_output=false, c10::string_view cache_mode="contiguous");
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,int64_t> npu_fusion_attention(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, int64_t head_num, c10::string_view input_layout, const ::std::optional<at::Tensor> & pse={}, const ::std::optional<at::Tensor> & padding_mask={}, const ::std::optional<at::Tensor> & atten_mask={}, double scale=1., double keep_prob=1., int64_t pre_tockens=2147483647, int64_t next_tockens=2147483647, int64_t inner_precise=0, at::OptionalIntArrayRef prefix=::std::nullopt, at::OptionalIntArrayRef actual_seq_qlen=::std::nullopt, at::OptionalIntArrayRef actual_seq_kvlen=::std::nullopt, int64_t sparse_mode=0, bool gen_mask_parallel=true, bool sync=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t> _batch_norm_impl_index(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const ::std::optional<at::Tensor> & per_sample_weights={}, bool include_last_offset=false, int64_t padding_idx=-1);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag_forward_only(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq=false, int64_t mode=0, bool sparse=false, const ::std::optional<at::Tensor> & per_sample_weights={}, bool include_last_offset=false, int64_t padding_idx=-1);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> batch_norm_backward_reduce(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const ::std::optional<at::Tensor> & weight, bool input_g, bool weight_g, bool bias_g);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_add_layer_norm(const at::Tensor & x1, const at::Tensor & x2, const at::Tensor & gamma, const at::Tensor & beta, double epsilon=1e-05, bool additional_output=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_add_layer_norm_backward(const ::std::optional<at::Tensor> & dy_opt, const at::Tensor & x1, const at::Tensor & x2, const at::Tensor & rstd, const at::Tensor & mean, const at::Tensor & gamma, const ::std::optional<at::Tensor> & dsum_opt);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_batch_nms(const at::Tensor & self, const at::Tensor & scores, double score_threshold, double iou_threshold, int64_t max_size_per_class, int64_t max_total_size, bool change_coordinate_frame=false, bool transpose_box=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_cross_entropy_loss(const at::Tensor & input, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, c10::string_view reduction="mean", int64_t ignore_index=-100, double label_smoothing=0.0, double lse_square_scale_for_zloss=0.0, bool return_zloss=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_deep_norm_backward(const at::Tensor & dy, const at::Tensor & x, const at::Tensor & gx, const at::Tensor & gamma, const at::Tensor & mean, const at::Tensor & rstd, double alpha=0.3);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_deformable_conv2dbk(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & offset_out, const at::Tensor & weight, const at::Tensor & offset, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation={1,1,1,1}, int64_t groups=1, int64_t deformable_groups=1, bool modulated=true);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_fusion_attention_grad(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const at::Tensor & dy, int64_t head_num, c10::string_view input_layout, const ::std::optional<at::Tensor> & pse={}, const ::std::optional<at::Tensor> & padding_mask={}, const ::std::optional<at::Tensor> & atten_mask={}, const ::std::optional<at::Tensor> & softmax_max={}, const ::std::optional<at::Tensor> & softmax_sum={}, const ::std::optional<at::Tensor> & softmax_in={}, const ::std::optional<at::Tensor> & attention_in={}, double scale_value=1., double keep_prob=1., int64_t pre_tockens=2147483647, int64_t next_tockens=2147483647, int64_t inner_precise=0, int64_t seed=0, int64_t offset=0, int64_t numels=0, at::OptionalIntArrayRef prefix=::std::nullopt, at::OptionalIntArrayRef actual_seq_qlen=::std::nullopt, at::OptionalIntArrayRef actual_seq_kvlen=::std::nullopt, int64_t sparse_mode=0, bool gen_mask_parallel=true, bool sync=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_kv_rmsnorm_rope_cache(const at::Tensor & kv, const at::Tensor & gamma, const at::Tensor & cos, const at::Tensor & sin, const at::Tensor & index, const at::Tensor & k_cache, const at::Tensor & ckv_cache, const ::std::optional<at::Tensor> & k_rope_scale={}, const ::std::optional<at::Tensor> & c_kv_scale={}, const ::std::optional<at::Tensor> & k_rope_offset={}, const ::std::optional<at::Tensor> & c_kv_offset={}, double epsilon=1e-5, c10::string_view cache_mode="Norm", bool is_output_kv=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_mla_prolog(const at::Tensor & token_x, const at::Tensor & weight_dq, const at::Tensor & weight_uq_qr, const at::Tensor & weight_uk, const at::Tensor & weight_dkv_kr, const at::Tensor & rmsnorm_gamma_cq, const at::Tensor & rmsnorm_gamma_ckv, const at::Tensor & rope_sin, const at::Tensor & rope_cos, const at::Tensor & cache_index, const at::Tensor & kv_cache, const at::Tensor & kr_cache, const ::std::optional<at::Tensor> & dequant_scale_x={}, const ::std::optional<at::Tensor> & dequant_scale_w_dq={}, const ::std::optional<at::Tensor> & dequant_scale_w_uq_qr={}, const ::std::optional<at::Tensor> & dequant_scale_w_dkv_kr={}, const ::std::optional<at::Tensor> & quant_scale_ckv={}, const ::std::optional<at::Tensor> & quant_scale_ckr={}, const ::std::optional<at::Tensor> & smooth_scales_cq={}, double rmsnorm_epsilon_cq=1e-05, double rmsnorm_epsilon_ckv=1e-05, c10::string_view cache_mode="PA_BSND");
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_moe_init_routing_v2(const at::Tensor & x, const at::Tensor & expert_idx, const ::std::optional<at::Tensor> & scale={}, const ::std::optional<at::Tensor> & offset={}, int64_t active_num=-1, int64_t expert_capacity=-1, int64_t expert_num=-1, int64_t drop_pad_mode=0, int64_t expert_tokens_num_type=0, bool expert_tokens_num_flag=false, int64_t quant_mode=0, at::IntArrayRef active_expert_range={}, int64_t row_idx_type=0);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> npu_moe_re_routing(const at::Tensor & tokens, const at::Tensor & expert_token_num_per_rank, const ::std::optional<at::Tensor> & per_token_scales={}, int64_t expert_token_num_type=1, int64_t idx_type=0);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const at::Tensor & input, const at::Tensor & grad_output, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, const ::std::optional<at::Tensor> & save_mean, const ::std::optional<at::Tensor> & save_var_transform, bool train, double eps, ::std::array<bool,3> output_mask, const at::Tensor & reservedSpace);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _linalg_svd(const at::Tensor & A, bool full_matrices=false, bool compute_uv=true, ::std::optional<c10::string_view> driver=::std::nullopt);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _native_batch_norm_legit(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, at::Tensor & running_mean, at::Tensor & running_var, bool training, double momentum, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _slow_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> _unique2(const at::Tensor & self, bool sorted=true, bool return_inverse=false, bool return_counts=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> conv_tbc_backward(const at::Tensor & self, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t pad);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> convolution_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::OptionalIntArrayRef bias_sizes, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> convolution_backward_overrideable(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> lstm(const at::Tensor & data, const at::Tensor & batch_sizes, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> matmul_double_backward(const ::std::optional<at::Tensor> & grad_self, const ::std::optional<at::Tensor> & grad_other, const at::Tensor & grad_out, const at::Tensor & self, const at::Tensor & other, ::std::array<bool,3> mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, bool training, double momentum, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, const ::std::optional<at::Tensor> & save_mean, const ::std::optional<at::Tensor> & save_invstd, bool train, double eps, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_group_norm(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_group_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const ::std::optional<at::Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, double eps);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & mean, const at::Tensor & rstd, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_add_rms_norm(const at::Tensor & x1, const at::Tensor & x2, const at::Tensor & gamma, double epsilon=1e-06);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_apply_adam(const at::Scalar & beta1_power, const at::Scalar & beta2_power, const at::Scalar & lr, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, ::std::optional<bool> use_locking, ::std::optional<bool> use_nesterov);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_apply_adam_w(const at::Scalar & beta1_power, const at::Scalar & beta2_power, const at::Scalar & lr, const at::Scalar & weight_decay, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, const ::std::optional<at::Tensor> & max_grad_norm, ::std::optional<bool> amsgrad, ::std::optional<bool> maximize);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_bert_apply_adam(const at::Scalar & lr, const at::Scalar & beta1, const at::Scalar & beta2, const at::Scalar & epsilon, const at::Tensor & grad, const at::Scalar & max_grad_norm, const at::Scalar & global_grad_norm, const at::Scalar & weight_decay, const ::std::optional<at::Scalar> & step_size=::std::nullopt, int64_t adam_mode=0);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_conv2d_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_conv3d_backward(const at::Tensor & input, const at::Tensor & grad, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_conv_transpose2d_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_conv_transpose3d_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_convolution_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_convolution_transpose_backward(const at::Tensor & input, const at::Tensor & grad, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, ::std::array<bool,3> grad_input_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_deep_norm(const at::Tensor & x, const at::Tensor & gx, const at::Tensor & beta, const at::Tensor & gamma, double alpha=0.3, double epsilon=1e-06);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_dropout_with_add_softmax(const at::Tensor & self, const at::Tensor & x1, const at::Scalar & alpha, double prob, int64_t dim);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_dynamic_quant_asymmetric(const at::Tensor & input, const ::std::optional<at::Tensor> & smooth_scales={}, const ::std::optional<at::Tensor> & group_index={}, ::std::optional<at::ScalarType> dst_type=::std::nullopt);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_fused_attention_score_backward(const at::Tensor & grad_output, const at::Tensor & softmax_output, const at::Tensor & query_layer, const at::Tensor & key_layer, const at::Tensor & value_layer, const at::Tensor & mask, const at::Scalar & scale, double keep_prob, bool query_transpose=false, bool key_transpose=false, bool value_transpose=false, bool dx_transpose=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_fused_attention_score_fwd(const at::Tensor & query_layer, const at::Tensor & key_layer, const at::Tensor & value_layer, const at::Tensor & attention_mask, const at::Scalar & scale, double keep_prob, bool query_transpose=false, bool key_transpose=false, bool bmm_score_transpose_a=false, bool bmm_score_transpose_b=false, bool value_transpose=false, bool dx_transpose=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_fused_attention_score_grad(const at::Tensor & grad_output, const at::Tensor & softmax_output, const at::Tensor & query_layer, const at::Tensor & key_layer, const at::Tensor & value_layer, const at::Tensor & mask, const at::Scalar & scale, double keep_prob, bool query_transpose=false, bool key_transpose=false, bool value_transpose=false, bool dx_transpose=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_group_norm_silu(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, int64_t group, double eps=0.00001);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_group_norm_swish(const at::Tensor & input, int64_t num_groups, const at::Tensor & weight, const at::Tensor & bias, ::std::optional<double> eps=1e-5, ::std::optional<double> swish_scale=1.0);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_group_norm_swish_grad(const at::Tensor & grad, const at::Tensor & input, int64_t num_groups, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & mean, const at::Tensor & rstd, ::std::array<bool,3> grad_input_mask, ::std::optional<double> swish_scale=1.0);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_layernorm_grad(const at::Tensor & grad_out, const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & mean, const at::Tensor & rstd, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_moe_gating_top_k(const at::Tensor & x, int64_t k, const ::std::optional<at::Tensor> & bias={}, int64_t k_group=1, int64_t group_count=1, int64_t group_select_mode=0, int64_t renorm=0, int64_t norm_type=0, bool out_flag=false, double routed_scaling_factor=1.0, double eps=1e-20);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_moe_gating_top_k_softmax(const at::Tensor & x, const ::std::optional<at::Tensor> & finished={}, int64_t k=1);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_moe_init_routing(const at::Tensor & x, const at::Tensor & row_idx, const at::Tensor & expert_idx, int64_t active_num);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_multi_head_attention_v2_grad(const at::Tensor & attention_score_grad, const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const at::Tensor & softmax_log_max_sum, const at::Tensor & attention_score, const ::std::optional<at::Tensor> & atten_mask={}, const ::std::optional<at::Tensor> & alibi_mask={}, double scale=1.0, int64_t head_num=1, c10::string_view input_layout="BNSD", double keep_prob=1., int64_t pre_tokens=2147483647, int64_t next_tokens=1, int64_t seed=0, int64_t offset=0, int64_t numels=0, bool gen_mask_parallel=true, bool sync=false);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_nms_with_mask(const at::Tensor & input, const at::Scalar & iou_threshold);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> npu_rotary_mul_backward(const at::Tensor & grad, const at::Tensor & self, const at::Tensor & r1, const at::Tensor & r2, c10::string_view rotary_mode="half");
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> unique_consecutive(const at::Tensor & self, bool return_inverse=false, bool return_counts=false, ::std::optional<int64_t> dim=::std::nullopt);
static ::std::tuple<at::Tensor,at::Tensor,at::Tensor> unique_dim(const at::Tensor & self, int64_t dim, bool sorted=true, bool return_inverse=false, bool return_counts=false);
static ::std::tuple<at::Tensor,at::Tensor,int64_t,int64_t,int64_t> npu_multi_head_attention_v2(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & atten_mask={}, const ::std::optional<at::Tensor> & alibi_mask={}, double scale=1.0, int64_t head_num=1, c10::string_view input_layout="BNSD", double keep_prob=1., int64_t pre_tokens=2147483647, int64_t next_tokens=1, bool gen_mask_parallel=true, bool sync=false);
static ::std::tuple<at::Tensor,at::Tensor> _aminmax(const at::Tensor & self);
static ::std::tuple<at::Tensor,at::Tensor> _aminmax(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> _conv_depthwise2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,2> output_mask);
static ::std::tuple<at::Tensor,at::Tensor> _ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank=0, bool zero_infinity=false);
static ::std::tuple<at::Tensor,at::Tensor> _dropout_with_byte_mask(const at::Tensor & self, double p);
static ::std::tuple<at::Tensor,at::Tensor> _npu_ciou(const at::Tensor & self, const at::Tensor & gtboxes, bool trans=false, bool is_cross=true, int64_t mode=0, bool atan_sub_flag=false);
static ::std::tuple<at::Tensor,at::Tensor> _npu_dropout(const at::Tensor & self, double p);
static ::std::tuple<at::Tensor,at::Tensor> _pack_padded_sequence(const at::Tensor & input, const at::Tensor & lengths, bool batch_first);
static ::std::tuple<at::Tensor,at::Tensor> _pad_packed_sequence(const at::Tensor & data, const at::Tensor & batch_sizes, bool batch_first, const at::Scalar & padding_value, int64_t total_length);
static ::std::tuple<at::Tensor,at::Tensor> _prelu_kernel_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight);
static ::std::tuple<at::Tensor,at::Tensor> _unique(const at::Tensor & self, bool sorted=true, bool return_inverse=false);
static ::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
static ::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size);
static ::std::tuple<at::Tensor,at::Tensor> aminmax(const at::Tensor & self, ::std::optional<int64_t> dim=::std::nullopt, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> batch_norm_gather_stats_update(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, double momentum, double eps, const at::Tensor & counts);
static ::std::tuple<at::Tensor,at::Tensor> batch_norm_gather_stats_with_counts(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, double momentum, double eps, const at::Tensor & counts);
static ::std::tuple<at::Tensor,at::Tensor> batch_norm_reduce(const at::Tensor & input, double eps);
static ::std::tuple<at::Tensor,at::Tensor> batch_norm_stats(const at::Tensor & input, double eps);
static ::std::tuple<at::Tensor,at::Tensor> grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners, ::std::array<bool,2> output_mask);
static ::std::tuple<at::Tensor,at::Tensor> grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners, ::std::array<bool,2> output_mask);
static ::std::tuple<at::Tensor,at::Tensor> gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first);
static ::std::tuple<at::Tensor,at::Tensor> kthvalue(const at::Tensor & self, int64_t k, at::Dimname dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> kthvalue(const at::Tensor & self, int64_t k, int64_t dim=-1, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> linalg_qr(const at::Tensor & A, c10::string_view mode="reduced");
static ::std::tuple<at::Tensor,at::Tensor> log_sigmoid_forward(const at::Tensor & self);
static ::std::tuple<at::Tensor,at::Tensor> lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const ::std::optional<at::Tensor> & b_ih={}, const ::std::optional<at::Tensor> & b_hh={});
static ::std::tuple<at::Tensor,at::Tensor> matmul_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Tensor & other, ::std::array<bool,2> mask);
static ::std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, at::Dimname dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride={}, at::IntArrayRef padding=0, at::IntArrayRef dilation=1, bool ceil_mode=false);
static ::std::tuple<at::Tensor,at::Tensor> max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride={}, at::IntArrayRef padding=0, at::IntArrayRef dilation=1, bool ceil_mode=false);
static ::std::tuple<at::Tensor,at::Tensor> median(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, at::Dimname dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static ::std::tuple<at::Tensor,at::Tensor> nanmedian(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> native_dropout(const at::Tensor & input, double p, ::std::optional<bool> train);
static ::std::tuple<at::Tensor,at::Tensor> nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index);
static ::std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index);
static ::std::tuple<at::Tensor,at::Tensor> npu_all_gather_base_mm(const at::Tensor & self, const at::Tensor & x2, c10::string_view hcom, int64_t world_size, const ::std::optional<at::Tensor> & bias={}, int64_t gather_index=0, bool gather_output=true, int64_t comm_turn=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_apply_rotary_pos_emb(const at::Tensor & query, const at::Tensor & key, const at::Tensor & cos, const at::Tensor & sin, c10::string_view layout="BSH");
static ::std::tuple<at::Tensor,at::Tensor> npu_ciou_backward(const at::Tensor & grad, const at::Tensor & bboxes, const at::Tensor & gtboxes, const ::std::optional<at::Tensor> & atan_sub, bool trans=false, bool is_cross=true, int64_t mode=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_deformable_conv2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & offset, const ::std::optional<at::Tensor> & bias, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation={1,1,1,1}, int64_t groups=1, int64_t deformable_groups=1, bool modulated=true);
static ::std::tuple<at::Tensor,at::Tensor> npu_dequant_swiglu_quant(const at::Tensor & x, const ::std::optional<at::Tensor> & weight_scale={}, const ::std::optional<at::Tensor> & activation_scale={}, const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & quant_scale={}, const ::std::optional<at::Tensor> & quant_offset={}, const ::std::optional<at::Tensor> & group_index={}, bool activate_left=false, int64_t quant_mode=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_diou_backward(const at::Tensor & grad, const at::Tensor & bboxes, const at::Tensor & gtboxes, bool trans=false, bool is_cross=false, int64_t mode=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_dropout_do_mask(const at::Tensor & self, const at::Tensor & mask, double p);
static ::std::tuple<at::Tensor,at::Tensor> npu_dropout_with_add_softmax_backward(const at::Tensor & grad, const at::Tensor & mask, const at::Tensor & softmax_out, const at::Scalar & alpha, double prob, int64_t dim);
static ::std::tuple<at::Tensor,at::Tensor> npu_dynamic_quant(const at::Tensor & input, const ::std::optional<at::Tensor> & smooth_scales={}, const ::std::optional<at::Tensor> & group_index={}, ::std::optional<at::ScalarType> dst_type=::std::nullopt);
static ::std::tuple<at::Tensor,at::Tensor> npu_fused_infer_attention_score_symint(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & pse_shift={}, const ::std::optional<at::Tensor> & atten_mask={}, at::OptionalSymIntArrayRef actual_seq_lengths=::std::nullopt, at::OptionalSymIntArrayRef actual_seq_lengths_kv=::std::nullopt, const ::std::optional<at::Tensor> & dequant_scale1={}, const ::std::optional<at::Tensor> & quant_scale1={}, const ::std::optional<at::Tensor> & dequant_scale2={}, const ::std::optional<at::Tensor> & quant_scale2={}, const ::std::optional<at::Tensor> & quant_offset2={}, const ::std::optional<at::Tensor> & antiquant_scale={}, const ::std::optional<at::Tensor> & antiquant_offset={}, const ::std::optional<at::Tensor> & key_antiquant_scale={}, const ::std::optional<at::Tensor> & key_antiquant_offset={}, const ::std::optional<at::Tensor> & value_antiquant_scale={}, const ::std::optional<at::Tensor> & value_antiquant_offset={}, const ::std::optional<at::Tensor> & block_table={}, const ::std::optional<at::Tensor> & query_padding_size={}, const ::std::optional<at::Tensor> & kv_padding_size={}, const ::std::optional<at::Tensor> & key_shared_prefix={}, const ::std::optional<at::Tensor> & value_shared_prefix={}, at::OptionalSymIntArrayRef actual_shared_prefix_len=::std::nullopt, const ::std::optional<at::Tensor> & query_rope={}, const ::std::optional<at::Tensor> & key_rope={}, const ::std::optional<at::Tensor> & key_rope_antiquant_scale={}, int64_t num_heads=1, double scale=1.0, int64_t pre_tokens=2147483647, int64_t next_tokens=2147483647, c10::string_view input_layout="BSH", int64_t num_key_value_heads=0, int64_t sparse_mode=0, int64_t inner_precise=0, int64_t block_size=0, int64_t antiquant_mode=0, int64_t key_antiquant_mode=0, int64_t value_antiquant_mode=0, bool softmax_lse_flag=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_geglu(const at::Tensor & self, int64_t dim=-1, int64_t approximate=1, bool activate_left=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_gemma_rms_norm(const at::Tensor & self, const at::Tensor & gamma, double epsilon=1e-06);
static ::std::tuple<at::Tensor,at::Tensor> npu_giou_backward(const at::Tensor & grad, const at::Tensor & bboxes, const at::Tensor & gtboxes, bool trans=false, bool is_cross=false, int64_t mode=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_ifmr(const at::Tensor & data, const at::Tensor & data_min, const at::Tensor & data_max, const at::Tensor & cumsum, double min_percentile, double max_percentile, double search_start, double search_end, double search_step, bool with_offset);
static ::std::tuple<at::Tensor,at::Tensor> npu_kronecker_quant(const at::Tensor & x, const at::Tensor & kronecker_p1, const at::Tensor & kronecker_p2, ::std::optional<double> clip_ratio=::std::nullopt, ::std::optional<at::ScalarType> dst_dtype=::std::nullopt);
static ::std::tuple<at::Tensor,at::Tensor> npu_linear_backward(const at::Tensor & grad, const at::Tensor & input, const at::Tensor & weight);
static ::std::tuple<at::Tensor,at::Tensor> npu_max(const at::Tensor & self, at::Dimname dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_max(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_min(const at::Tensor & self, at::Dimname dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_min(const at::Tensor & self, int64_t dim, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_mrope(const at::Tensor & positions, const at::Tensor & query, const at::Tensor & key, const at::Tensor & cos_sin_cache, int64_t head_size, at::OptionalIntArrayRef mrope_section=::std::nullopt, ::std::optional<c10::string_view> rotary_mode="half");
static ::std::tuple<at::Tensor,at::Tensor> npu_nms_rotated(const at::Tensor & self, const at::Tensor & scores, double iou_threshold, double scores_threshold=0, int64_t max_output_size=-1, int64_t mode=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_nms_v4(const at::Tensor & self, const at::Tensor & scores, const at::Scalar & max_output_size, const at::Tensor & iou_threshold, const at::Tensor & scores_threshold, bool pad_to_max_output_size=false);
static ::std::tuple<at::Tensor,at::Tensor> npu_random_choice_with_mask(const at::Tensor & x, int64_t count=256, int64_t seed=0, int64_t seed2=0);
static ::std::tuple<at::Tensor,at::Tensor> npu_rms_norm(const at::Tensor & self, const at::Tensor & gamma, double epsilon=1e-06);
static ::std::tuple<at::Tensor,at::Tensor> npu_rms_norm_backward(const at::Tensor & dy, const at::Tensor & self, const at::Tensor & gamma, const at::Tensor & rstd);
static ::std::tuple<at::Tensor,at::Tensor> slogdet(const at::Tensor & self);
static ::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, ::std::optional<bool> stable, int64_t dim=-1, bool descending=false);
static ::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, at::Dimname dim, bool descending=false);
static ::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim=-1, bool descending=false);
static ::std::tuple<at::Tensor,at::Tensor> std_mean(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt, const ::std::optional<at::Scalar> & correction=::std::nullopt, bool keepdim=false);
static ::std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true);
static ::std::tuple<at::Tensor,at::Tensor> var_mean(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt, const ::std::optional<at::Scalar> & correction=::std::nullopt, bool keepdim=false);
static ::std::vector<at::Tensor> _foreach_abs(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_acos(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_add(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_add(at::TensorList self, at::TensorList other, const at::Scalar & alpha=1);
static ::std::vector<at::Tensor> _foreach_add(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value=1);
static ::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Tensor & scalars);
static ::std::vector<at::Tensor> _foreach_addcmul(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_addcmul(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value=1);
static ::std::vector<at::Tensor> _foreach_addcmul(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Tensor & scalars);
static ::std::vector<at::Tensor> _foreach_asin(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_atan(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_ceil(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_clamp_max(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_clamp_max(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_clamp_max(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_clamp_min(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_clamp_min(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_clamp_min(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_cos(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_cosh(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_div(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_div(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_div(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_erf(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_erfc(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_exp(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_expm1(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_floor(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_frac(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_lerp(at::TensorList self, at::TensorList tensors1, at::TensorList weights);
static ::std::vector<at::Tensor> _foreach_lerp(at::TensorList self, at::TensorList tensors1, const at::Scalar & weight);
static ::std::vector<at::Tensor> _foreach_log(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_log10(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_log1p(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_log2(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_maximum(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_maximum(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_maximum(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_minimum(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_minimum(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_minimum(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_mul(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_mul(at::TensorList self, at::TensorList other);
static ::std::vector<at::Tensor> _foreach_mul(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_neg(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_norm(at::TensorList self, const at::Scalar & ord=2, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static ::std::vector<at::Tensor> _foreach_pow(at::TensorList self, at::ArrayRef<at::Scalar> exponent);
static ::std::vector<at::Tensor> _foreach_pow(at::TensorList self, at::TensorList exponent);
static ::std::vector<at::Tensor> _foreach_pow(at::TensorList self, const at::Scalar & exponent);
static ::std::vector<at::Tensor> _foreach_pow(const at::Scalar & self, at::TensorList exponent);
static ::std::vector<at::Tensor> _foreach_reciprocal(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_round(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sigmoid(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sign(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sin(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sinh(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sqrt(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_sub(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static ::std::vector<at::Tensor> _foreach_sub(at::TensorList self, at::TensorList other, const at::Scalar & alpha=1);
static ::std::vector<at::Tensor> _foreach_sub(at::TensorList self, const at::Scalar & scalar);
static ::std::vector<at::Tensor> _foreach_tan(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_tanh(at::TensorList self);
static ::std::vector<at::Tensor> _foreach_trunc(at::TensorList self);
static ::std::vector<at::Tensor> npu_fused_attention_layernorm_qkv_fwd(const at::Tensor & x, const at::Tensor & kernel_query, const at::Tensor & kernel_key, const at::Tensor & kernel_value, const at::Tensor & gamma, const at::Tensor & beta, const ::std::optional<at::Tensor> & bias_query={}, const ::std::optional<at::Tensor> & bias_key={}, const ::std::optional<at::Tensor> & bias_value={}, int64_t seq_len=128, int64_t num_heads=12, double eps=1e-05);
static ::std::vector<at::Tensor> npu_fused_attention_qkv_grad(const at::Tensor & grad_output_query, const at::Tensor & grad_output_key, const at::Tensor & grad_output_value, const at::Tensor & query_kernel, const at::Tensor & key_kernel, const at::Tensor & value_kernel, const at::Tensor & hidden_states, const at::Tensor & grad_output_ln);
static ::std::vector<at::Tensor> npu_grouped_matmul(at::TensorList x, at::TensorList weight, ::std::optional<at::TensorList> bias=::std::nullopt, ::std::optional<at::TensorList> scale=::std::nullopt, ::std::optional<at::TensorList> offset=::std::nullopt, ::std::optional<at::TensorList> antiquant_scale=::std::nullopt, ::std::optional<at::TensorList> antiquant_offset=::std::nullopt, ::std::optional<at::TensorList> per_token_scale=::std::nullopt, at::OptionalIntArrayRef group_list=::std::nullopt, ::std::optional<at::TensorList> activation_input=::std::nullopt, ::std::optional<at::TensorList> activation_quant_scale=::std::nullopt, ::std::optional<at::TensorList> activation_quant_offset=::std::nullopt, ::std::optional<int64_t> split_item=0, ::std::optional<int64_t> group_type=-1, ::std::optional<int64_t> group_list_type=0, ::std::optional<int64_t> act_type=0, ::std::optional<at::ScalarType> output_dtype=::std::nullopt);
static ::std::vector<at::Tensor> npu_grouped_matmul(at::TensorList x, at::TensorList weight, ::std::optional<at::TensorList> bias=::std::nullopt, ::std::optional<at::TensorList> scale=::std::nullopt, ::std::optional<at::TensorList> offset=::std::nullopt, ::std::optional<at::TensorList> antiquant_scale=::std::nullopt, ::std::optional<at::TensorList> antiquant_offset=::std::nullopt, ::std::optional<at::TensorList> per_token_scale=::std::nullopt, const ::std::optional<at::Tensor> & group_list={}, ::std::optional<at::TensorList> activation_input=::std::nullopt, ::std::optional<at::TensorList> activation_quant_scale=::std::nullopt, ::std::optional<at::TensorList> activation_quant_offset=::std::nullopt, ::std::optional<int64_t> split_item=0, ::std::optional<int64_t> group_type=-1, ::std::optional<int64_t> group_list_type=0, ::std::optional<int64_t> act_type=0, ::std::optional<at::ScalarType> output_dtype=::std::nullopt);
static ::std::vector<at::Tensor> npu_scatter_list(at::TensorList self, const at::Tensor & indices, const at::Tensor & updates, const ::std::optional<at::Tensor> & mask={}, c10::string_view reduce="update", int64_t axis=-2);
static ::std::vector<at::Tensor> where(const at::Tensor & condition);
static at::Scalar _local_scalar_dense(const at::Tensor & self);
static at::Tensor & __ilshift__(at::Tensor & self, const at::Scalar & other);
static at::Tensor & __ilshift__(at::Tensor & self, const at::Tensor & other);
static at::Tensor & __ior__(at::Tensor & self, const at::Scalar & other);
static at::Tensor & __ior__(at::Tensor & self, const at::Tensor & other);
static at::Tensor & __irshift__(at::Tensor & self, const at::Scalar & other);
static at::Tensor & __irshift__(at::Tensor & self, const at::Tensor & other);
static at::Tensor & _add_relu_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor & _add_relu_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & _amp_update_scale_(at::Tensor & self, at::Tensor & growth_tracker, const at::Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval);
static at::Tensor & _fft_c2c_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward, at::Tensor & out);
static at::Tensor & _fft_c2r_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size, at::Tensor & out);
static at::Tensor & _fft_r2c_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided, at::Tensor & out);
static at::Tensor & _index_put_impl_(at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate=false, bool unsafe=false);
static at::Tensor & _log_softmax_backward_data_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype, at::Tensor & out);
static at::Tensor & _log_softmax_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out);
static at::Tensor & _slow_conv2d_forward_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output);
static at::Tensor & _softmax_backward_data_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype, at::Tensor & grad_input);
static at::Tensor & _softmax_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out);
static at::Tensor & _upsample_bicubic2d_aa_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & _upsample_bicubic2d_aa_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & _upsample_bilinear2d_aa_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & _upsample_bilinear2d_aa_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & _upsample_nearest_exact1d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales, at::Tensor & grad_input);
static at::Tensor & _upsample_nearest_exact1d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales, at::Tensor & out);
static at::Tensor & _upsample_nearest_exact2d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & _upsample_nearest_exact2d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & _upsample_nearest_exact3d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & _upsample_nearest_exact3d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & abs_(at::Tensor & self);
static at::Tensor & abs_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & acos_(at::Tensor & self);
static at::Tensor & acos_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & acosh_(at::Tensor & self);
static at::Tensor & acosh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & adaptive_avg_pool2d_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out);
static at::Tensor & adaptive_avg_pool3d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input);
static at::Tensor & adaptive_avg_pool3d_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out);
static at::Tensor & adaptive_max_pool2d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input);
static at::Tensor & adaptive_max_pool3d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input);
static at::Tensor & add_(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha=1);
static at::Tensor & add_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor & add_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor & addbmm_out(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value=1);
static at::Tensor & addcdiv_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out);
static at::Tensor & addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value=1);
static at::Tensor & addcmul_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out);
static at::Tensor & addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor & addmm_out(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor & addmv_out(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor & addr_out(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & all_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & all_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out);
static at::Tensor & amax_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out);
static at::Tensor & amin_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out);
static at::Tensor & angle_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & any_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & any_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out);
static at::Tensor & arange_out(const at::Scalar & end, at::Tensor & out);
static at::Tensor & arange_out(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out);
static at::Tensor & argmax_out(const at::Tensor & self, ::std::optional<int64_t> dim, bool keepdim, at::Tensor & out);
static at::Tensor & argmin_out(const at::Tensor & self, ::std::optional<int64_t> dim, bool keepdim, at::Tensor & out);
static at::Tensor & asin_(at::Tensor & self);
static at::Tensor & asin_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & asinh_(at::Tensor & self);
static at::Tensor & asinh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & atan2_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & atan2_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & atan_(at::Tensor & self);
static at::Tensor & atan_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & atanh_(at::Tensor & self);
static at::Tensor & atanh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & avg_pool2d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override, at::Tensor & grad_input);
static at::Tensor & avg_pool2d_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override, at::Tensor & out);
static at::Tensor & avg_pool3d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override, at::Tensor & grad_input);
static at::Tensor & avg_pool3d_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override, at::Tensor & out);
static at::Tensor & baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor & baddbmm_out(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & batch_norm_elemt_out(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const at::Tensor & mean, const at::Tensor & invstd, double eps, at::Tensor & out);
static at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & bernoulli_(at::Tensor & self, double p=0.5, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & bernoulli_out(const at::Tensor & self, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & binary_cross_entropy_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & grad_input);
static at::Tensor & binary_cross_entropy_out(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & out);
static at::Tensor & bitwise_and_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & bitwise_and_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & bitwise_and_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & bitwise_and_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & bitwise_not_(at::Tensor & self);
static at::Tensor & bitwise_not_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & bitwise_or_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & bitwise_or_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & bitwise_xor_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & bitwise_xor_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & bitwise_xor_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & bitwise_xor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & bmm_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out);
static at::Tensor & bucketize_out(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right, at::Tensor & out);
static at::Tensor & cat_out(at::TensorList tensors, at::Dimname dim, at::Tensor & out);
static at::Tensor & cat_out(const at::ITensorListRef & tensors, int64_t dim, at::Tensor & out);
static at::Tensor & ceil_(at::Tensor & self);
static at::Tensor & ceil_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & celu_(at::Tensor & self, const at::Scalar & alpha=1.0);
static at::Tensor & clamp_(at::Tensor & self, const ::std::optional<at::Scalar> & min=::std::nullopt, const ::std::optional<at::Scalar> & max=::std::nullopt);
static at::Tensor & clamp_(at::Tensor & self, const ::std::optional<at::Tensor> & min={}, const ::std::optional<at::Tensor> & max={});
static at::Tensor & clamp_max_(at::Tensor & self, const at::Scalar & max);
static at::Tensor & clamp_max_(at::Tensor & self, const at::Tensor & max);
static at::Tensor & clamp_max_out(const at::Tensor & self, const at::Scalar & max, at::Tensor & out);
static at::Tensor & clamp_max_out(const at::Tensor & self, const at::Tensor & max, at::Tensor & out);
static at::Tensor & clamp_min_(at::Tensor & self, const at::Scalar & min);
static at::Tensor & clamp_min_(at::Tensor & self, const at::Tensor & min);
static at::Tensor & clamp_min_out(const at::Tensor & self, const at::Scalar & min, at::Tensor & out);
static at::Tensor & clamp_min_out(const at::Tensor & self, const at::Tensor & min, at::Tensor & out);
static at::Tensor & clamp_out(const at::Tensor & self, const ::std::optional<at::Scalar> & min, const ::std::optional<at::Scalar> & max, at::Tensor & out);
static at::Tensor & clamp_out(const at::Tensor & self, const ::std::optional<at::Tensor> & min, const ::std::optional<at::Tensor> & max, at::Tensor & out);
static at::Tensor & col2im_out(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out);
static at::Tensor & complex_out(const at::Tensor & real, const at::Tensor & imag, at::Tensor & out);
static at::Tensor & copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking=false);
static at::Tensor & copy_memory_(at::Tensor & self, const at::Tensor & src, bool non_blocking=false);
static at::Tensor & cos_(at::Tensor & self);
static at::Tensor & cos_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & cosh_(at::Tensor & self);
static at::Tensor & cosh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & cumprod_(at::Tensor & self, at::Dimname dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor & cumprod_out(const at::Tensor & self, at::Dimname dim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & cumprod_out(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & cumsum_out(const at::Tensor & self, at::Dimname dim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & cumsum_out(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & div_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & div_(at::Tensor & self, const at::Scalar & other, ::std::optional<c10::string_view> rounding_mode);
static at::Tensor & div_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & div_(at::Tensor & self, const at::Tensor & other, ::std::optional<c10::string_view> rounding_mode);
static at::Tensor & div_out(const at::Tensor & self, const at::Tensor & other, ::std::optional<c10::string_view> rounding_mode, at::Tensor & out);
static at::Tensor & div_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & dot_out(const at::Tensor & self, const at::Tensor & tensor, at::Tensor & out);
static at::Tensor & dropout_(at::Tensor & self, double p, bool train);
static at::Tensor & elu_(at::Tensor & self, const at::Scalar & alpha=1, const at::Scalar & scale=1, const at::Scalar & input_scale=1);
static at::Tensor & elu_backward_out(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result, at::Tensor & grad_input);
static at::Tensor & elu_out(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, at::Tensor & out);
static at::Tensor & embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type);
static at::Tensor & eq_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & eq_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & eq_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & eq_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & erf_(at::Tensor & self);
static at::Tensor & erf_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & erfc_(at::Tensor & self);
static at::Tensor & erfc_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & erfinv_(at::Tensor & self);
static at::Tensor & erfinv_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & exp2_(at::Tensor & self);
static at::Tensor & exp2_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & exp_(at::Tensor & self);
static at::Tensor & exp_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & expm1_(at::Tensor & self);
static at::Tensor & expm1_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & exponential_(at::Tensor & self, double lambd=1, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & eye_out(int64_t n, at::Tensor & out);
static at::Tensor & eye_out(int64_t n, int64_t m, at::Tensor & out);
static at::Tensor & fill_(at::Tensor & self, const at::Scalar & value);
static at::Tensor & fill_(at::Tensor & self, const at::Tensor & value);
static at::Tensor & fill_diagonal_(at::Tensor & self, const at::Scalar & fill_value, bool wrap=false);
static at::Tensor & floor_(at::Tensor & self);
static at::Tensor & floor_divide_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & floor_divide_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & floor_divide_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & floor_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & fmod_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & fmod_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & fmod_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & fmod_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & frac_(at::Tensor & self);
static at::Tensor & frac_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & full_out(at::IntArrayRef size, const at::Scalar & fill_value, at::Tensor & out);
static at::Tensor & gather_out(const at::Tensor & self, at::Dimname dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out);
static at::Tensor & gather_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out);
static at::Tensor & gcd_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & ge_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & ge_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & ge_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & ge_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & glu_backward_out(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim, at::Tensor & grad_input);
static at::Tensor & glu_out(const at::Tensor & self, int64_t dim, at::Tensor & out);
static at::Tensor & gt_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & gt_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & gt_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & gt_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & hardshrink_backward_out(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input);
static at::Tensor & hardshrink_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out);
static at::Tensor & hardsigmoid_(at::Tensor & self);
static at::Tensor & hardsigmoid_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & hardswish_(at::Tensor & self);
static at::Tensor & hardswish_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & hardtanh_(at::Tensor & self, const at::Scalar & min_val=-1, const at::Scalar & max_val=1);
static at::Tensor & hardtanh_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & grad_input);
static at::Tensor & hardtanh_out(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & out);
static at::Tensor & histc_out(const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max, at::Tensor & out);
static at::Tensor & im2col_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out);
static at::Tensor & index_add_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source);
static at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value);
static at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value);
static at::Tensor & index_put_(at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate=false);
static at::Tensor & index_select_out(const at::Tensor & self, at::Dimname dim, const at::Tensor & index, at::Tensor & out);
static at::Tensor & index_select_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Tensor & out);
static at::Tensor & inverse_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & isin_out(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out);
static at::Tensor & isin_out(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert, at::Tensor & out);
static at::Tensor & isin_out(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out);
static at::Tensor & isneginf_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & isposinf_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & le_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & le_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & le_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & le_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope=0.01);
static at::Tensor & leaky_relu_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result, at::Tensor & grad_input);
static at::Tensor & leaky_relu_out(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out);
static at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Scalar & weight);
static at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
static at::Tensor & lerp_out(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight, at::Tensor & out);
static at::Tensor & lerp_out(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight, at::Tensor & out);
static at::Tensor & linalg_cross_out(const at::Tensor & self, const at::Tensor & other, int64_t dim, at::Tensor & out);
static at::Tensor & linalg_solve_triangular_out(const at::Tensor & self, const at::Tensor & B, bool upper, bool left, bool unitriangular, at::Tensor & out);
static at::Tensor & linalg_vector_norm_out(const at::Tensor & self, const at::Scalar & ord, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & linspace_out(const at::Scalar & start, const at::Scalar & end, int64_t steps, at::Tensor & out);
static at::Tensor & log10_(at::Tensor & self);
static at::Tensor & log10_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & log1p_(at::Tensor & self);
static at::Tensor & log1p_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & log2_(at::Tensor & self);
static at::Tensor & log2_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & log_(at::Tensor & self);
static at::Tensor & log_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & log_sigmoid_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer, at::Tensor & grad_input);
static at::Tensor & log_sigmoid_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & logaddexp2_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & logaddexp_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & logical_and_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & logical_and_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & logical_not_(at::Tensor & self);
static at::Tensor & logical_not_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & logical_or_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & logical_or_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & logical_xor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & logspace_out(const at::Scalar & start, const at::Scalar & end, int64_t steps, double base, at::Tensor & out);
static at::Tensor & logsumexp_out(const at::Tensor & self, at::DimnameList dim, bool keepdim, at::Tensor & out);
static at::Tensor & logsumexp_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out);
static at::Tensor & lt_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & lt_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & lt_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & lt_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Scalar & value);
static at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value);
static at::Tensor & masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source);
static at::Tensor & masked_select_out(const at::Tensor & self, const at::Tensor & mask, at::Tensor & out);
static at::Tensor & matmul_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & max_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & max_pool2d_with_indices_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input);
static at::Tensor & max_pool3d_with_indices_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input);
static at::Tensor & max_unpool2d_out(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::Tensor & out);
static at::Tensor & max_unpool3d_out(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & maximum_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & mean_out(const at::Tensor & self, at::DimnameList dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & mean_out(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & min_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & minimum_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & mish_(at::Tensor & self);
static at::Tensor & mish_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & mm_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out);
static at::Tensor & mse_loss_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input);
static at::Tensor & mse_loss_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & out);
static at::Tensor & mul_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & mul_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & mul_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & multilabel_margin_loss_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & out);
static at::Tensor & multinomial_out(const at::Tensor & self, int64_t num_samples, bool replacement, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & mv_out(const at::Tensor & self, const at::Tensor & vec, at::Tensor & out);
static at::Tensor & nan_to_num_(at::Tensor & self, ::std::optional<double> nan=::std::nullopt, ::std::optional<double> posinf=::std::nullopt, ::std::optional<double> neginf=::std::nullopt);
static at::Tensor & nan_to_num_out(const at::Tensor & self, ::std::optional<double> nan, ::std::optional<double> posinf, ::std::optional<double> neginf, at::Tensor & out);
static at::Tensor & nansum_out(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & ne_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & ne_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & ne_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & ne_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & neg_(at::Tensor & self);
static at::Tensor & neg_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & nll_loss2d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input);
static at::Tensor & nll_loss2d_out(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & out);
static at::Tensor & nll_loss_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input);
static at::Tensor & nll_loss_out(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & out);
static at::Tensor & nonzero_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & norm_out(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype, at::Tensor & out);
static at::Tensor & norm_out(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::Tensor & out);
static at::Tensor & normal_(at::Tensor & self, double mean=0, double std=1, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & normal_out(const at::Tensor & mean, const at::Tensor & std, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & normal_out(const at::Tensor & mean, double std, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & normal_out(double mean, const at::Tensor & std, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & normal_out(double mean, double std, at::IntArrayRef size, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & npu_attn_softmax_(at::Tensor & self);
static at::Tensor & npu_attn_softmax_backward_(at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & values);
static at::Tensor & npu_batch_gather_matmul_(at::Tensor & self, const at::Tensor & x, const at::Tensor & weight_b, const at::Tensor & indices, const ::std::optional<at::Tensor> & weight_a={}, int64_t layer_idx=0, double scale=1e-3, int64_t y_offset=0, int64_t y_slice_size=-1);
static at::Tensor & npu_broadcast_out(const at::Tensor & self, at::IntArrayRef size, at::Tensor & out);
static at::Tensor & npu_conv2d_out(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, at::Tensor & out);
static at::Tensor & npu_conv3d_out(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups, at::Tensor & out);
static at::Tensor & npu_dtype_cast_(at::Tensor & self, const at::Tensor & src);
static at::Tensor & npu_format_cast_(at::Tensor & self, const at::Tensor & src);
static at::Tensor & npu_format_cast_(at::Tensor & self, int64_t acl_format);
static at::Tensor & npu_indexing_out(const at::Tensor & self, at::IntArrayRef begin, at::IntArrayRef end, at::IntArrayRef strides, int64_t begin_mask, int64_t end_mask, int64_t ellipsis_mask, int64_t new_axis_mask, int64_t shrink_axis_mask, at::Tensor & out);
static at::Tensor & npu_quant_scatter_(at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates, const at::Tensor & quant_scales, const ::std::optional<at::Tensor> & quant_zero_points={}, int64_t axis=0, int64_t quant_axis=1, c10::string_view reduce="update");
static at::Tensor & npu_reshape_out(const at::Tensor & self, at::IntArrayRef shape, bool can_refresh, at::Tensor & out);
static at::Tensor & npu_scatter_nd_update_(at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates);
static at::Tensor & npu_silu_(at::Tensor & self);
static at::Tensor & npu_slice_out(const at::Tensor & self, at::IntArrayRef offsets, at::IntArrayRef size, at::Tensor & out);
static at::Tensor & npu_sort_v2_out(const at::Tensor & self, int64_t dim, bool descending, at::Tensor & out);
static at::Tensor & npu_stride_copy_out(const at::Tensor & self, at::IntArrayRef shape, at::IntArrayRef stride, const at::Scalar & storage_offset, at::Tensor & out);
static at::Tensor & npu_transpose_out(const at::Tensor & self, at::IntArrayRef perm, bool require_contiguous, at::Tensor & out);
static at::Tensor & npu_view_copy(at::Tensor & self, const at::Tensor & other, bool non_blocking);
static at::Tensor & one_(at::Tensor & self);
static at::Tensor & ones_out(at::IntArrayRef size, at::Tensor & out);
static at::Tensor & polar_out(const at::Tensor & abs, const at::Tensor & angle, at::Tensor & out);
static at::Tensor & pow_(at::Tensor & self, const at::Scalar & exponent);
static at::Tensor & pow_(at::Tensor & self, const at::Tensor & exponent);
static at::Tensor & pow_out(const at::Scalar & self, const at::Tensor & exponent, at::Tensor & out);
static at::Tensor & pow_out(const at::Tensor & self, const at::Scalar & exponent, at::Tensor & out);
static at::Tensor & pow_out(const at::Tensor & self, const at::Tensor & exponent, at::Tensor & out);
static at::Tensor & prod_out(const at::Tensor & self, int64_t dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate=false);
static at::Tensor & random_(at::Tensor & self, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & random_(at::Tensor & self, int64_t from, ::std::optional<int64_t> to, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & random_(at::Tensor & self, int64_t to, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & randperm_out(int64_t n, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & randperm_out(int64_t n, at::Tensor & out);
static at::Tensor & range_out(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out);
static at::Tensor & reciprocal_(at::Tensor & self);
static at::Tensor & reciprocal_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & reflection_pad1d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & reflection_pad1d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & reflection_pad2d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & reflection_pad2d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & reflection_pad3d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & reflection_pad3d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & relu_(at::Tensor & self);
static at::Tensor & remainder_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & remainder_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & remainder_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & remainder_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & renorm_(at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm);
static at::Tensor & renorm_out(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm, at::Tensor & out);
static at::Tensor & replication_pad1d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & replication_pad1d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & replication_pad2d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & replication_pad2d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & replication_pad3d_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input);
static at::Tensor & replication_pad3d_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & round_(at::Tensor & self);
static at::Tensor & round_(at::Tensor & self, int64_t decimals);
static at::Tensor & round_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & round_out(const at::Tensor & self, int64_t decimals, at::Tensor & out);
static at::Tensor & rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower=0.125, const at::Scalar & upper=0.3333333333333333, bool training=false, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & rrelu_with_noise_out(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, ::std::optional<at::Generator> generator, at::Tensor & out);
static at::Tensor & rsqrt_(at::Tensor & self);
static at::Tensor & rsqrt_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value);
static at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor & scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor & scatter_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, at::Tensor & out);
static at::Tensor & scatter_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out);
static at::Tensor & scatter_update_(at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates, int64_t axis);
static at::Tensor & searchsorted_out(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right, ::std::optional<c10::string_view> side, const ::std::optional<at::Tensor> & sorter, at::Tensor & out);
static at::Tensor & set_(at::Tensor & self);
static at::Tensor & set_(at::Tensor & self, at::Storage source);
static at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride={});
static at::Tensor & set_(at::Tensor & self, const at::Tensor & source);
static at::Tensor & sgn_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & sigmoid_(at::Tensor & self);
static at::Tensor & sigmoid_backward_out(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input);
static at::Tensor & sigmoid_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & sign_(at::Tensor & self);
static at::Tensor & sign_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & signbit_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & silu_(at::Tensor & self);
static at::Tensor & silu_backward_out(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input);
static at::Tensor & silu_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & sin_(at::Tensor & self);
static at::Tensor & sin_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & sinc_(at::Tensor & self);
static at::Tensor & sinc_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & sinh_(at::Tensor & self);
static at::Tensor & sinh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & slow_conv3d_forward_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output);
static at::Tensor & slow_conv3d_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & out);
static at::Tensor & slow_conv_transpose2d_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out);
static at::Tensor & smooth_l1_loss_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & grad_input);
static at::Tensor & smooth_l1_loss_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & out);
static at::Tensor & soft_margin_loss_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input);
static at::Tensor & soft_margin_loss_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & out);
static at::Tensor & softplus_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & grad_input);
static at::Tensor & softplus_out(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & out);
static at::Tensor & softshrink_backward_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input);
static at::Tensor & softshrink_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out);
static at::Tensor & sqrt_(at::Tensor & self);
static at::Tensor & sqrt_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & stack_out(at::TensorList tensors, int64_t dim, at::Tensor & out);
static at::Tensor & std_out(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim, at::Tensor & out);
static at::Tensor & sub_(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha=1);
static at::Tensor & sub_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor & sub_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out);
static at::Tensor & sum_out(const at::Tensor & self, at::DimnameList dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & sum_out(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim, ::std::optional<at::ScalarType> dtype, at::Tensor & out);
static at::Tensor & take_out(const at::Tensor & self, const at::Tensor & index, at::Tensor & out);
static at::Tensor & tan_(at::Tensor & self);
static at::Tensor & tan_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & tanh_(at::Tensor & self);
static at::Tensor & tanh_backward_out(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input);
static at::Tensor & tanh_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & threshold_(at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value);
static at::Tensor & threshold_out(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value, at::Tensor & out);
static at::Tensor & tril_(at::Tensor & self, int64_t diagonal=0);
static at::Tensor & tril_out(const at::Tensor & self, int64_t diagonal, at::Tensor & out);
static at::Tensor & triu_(at::Tensor & self, int64_t diagonal=0);
static at::Tensor & triu_out(const at::Tensor & self, int64_t diagonal, at::Tensor & out);
static at::Tensor & trunc_(at::Tensor & self);
static at::Tensor & trunc_out(const at::Tensor & self, at::Tensor & out);
static at::Tensor & uniform_(at::Tensor & self, double from=0, double to=1, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor & upsample_bicubic2d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & upsample_bicubic2d_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & upsample_bilinear2d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & upsample_bilinear2d_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & upsample_linear1d_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales, at::Tensor & out);
static at::Tensor & upsample_nearest1d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales, at::Tensor & grad_input);
static at::Tensor & upsample_nearest1d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales, at::Tensor & out);
static at::Tensor & upsample_nearest2d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & upsample_nearest2d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & upsample_nearest3d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & upsample_nearest3d_out(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & upsample_trilinear3d_backward_out(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & grad_input);
static at::Tensor & upsample_trilinear3d_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_d, ::std::optional<double> scales_h, ::std::optional<double> scales_w, at::Tensor & out);
static at::Tensor & var_out(const at::Tensor & self, at::OptionalIntArrayRef dim, const ::std::optional<at::Scalar> & correction, bool keepdim, at::Tensor & out);
static at::Tensor & vdot_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & where_out(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & xlogy_(at::Tensor & self, const at::Scalar & other);
static at::Tensor & xlogy_(at::Tensor & self, const at::Tensor & other);
static at::Tensor & xlogy_out(const at::Scalar & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & xlogy_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out);
static at::Tensor & xlogy_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out);
static at::Tensor & zero_(at::Tensor & self);
static at::Tensor & zeros_out(at::IntArrayRef size, at::Tensor & out);
static at::Tensor __lshift__(const at::Tensor & self, const at::Scalar & other);
static at::Tensor __lshift__(const at::Tensor & self, const at::Tensor & other);
static at::Tensor __rshift__(const at::Tensor & self, const at::Scalar & other);
static at::Tensor __rshift__(const at::Tensor & self, const at::Tensor & other);
static at::Tensor __xor__(const at::Tensor & self, const at::Scalar & other);
static at::Tensor __xor__(const at::Tensor & self, const at::Tensor & other);
static at::Tensor _adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor _adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor _adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor _add_relu(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor _cdist_backward(const at::Tensor & grad, const at::Tensor & x1, const at::Tensor & x2, double p, const at::Tensor & cdist);
static at::Tensor _cdist_forward(const at::Tensor & x1, const at::Tensor & x2, double p, ::std::optional<int64_t> compute_mode);
static at::Tensor _conv_depthwise2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation);
static at::Tensor _convolution(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32);
static at::Tensor _copy_from_and_resize(const at::Tensor & self, const at::Tensor & dst);
static at::Tensor _ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity=false);
static at::Tensor _dim_arange(const at::Tensor & like, int64_t dim);
static at::Tensor _dropout_with_byte_mask_backward(const at::Tensor & grad_output, const at::Tensor & mask, double p);
static at::Tensor _embedding_bag_per_sample_weights_backward(const at::Tensor & grad, const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, int64_t mode, int64_t padding_idx=-1);
static at::Tensor _fft_c2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward);
static at::Tensor _fft_c2r(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size);
static at::Tensor _fft_r2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided);
static at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
static at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype);
static at::Tensor _nnpack_spatial_convolution(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef stride=1);
static at::Tensor _npu_dropout_gen_mask(const at::Tensor & self, at::IntArrayRef size, double p, int64_t seed, int64_t offset, ::std::optional<bool> parallel=true, ::std::optional<bool> sync=::std::nullopt);
static at::Tensor _npu_format_cast(const at::Tensor & self, int64_t acl_format);
static at::Tensor _npu_fused_infer_attention_score_get_max_workspace_symint(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & pse_shift={}, const ::std::optional<at::Tensor> & atten_mask={}, at::OptionalSymIntArrayRef actual_seq_lengths=::std::nullopt, at::OptionalSymIntArrayRef actual_seq_lengths_kv=::std::nullopt, const ::std::optional<at::Tensor> & dequant_scale1={}, const ::std::optional<at::Tensor> & quant_scale1={}, const ::std::optional<at::Tensor> & dequant_scale2={}, const ::std::optional<at::Tensor> & quant_scale2={}, const ::std::optional<at::Tensor> & quant_offset2={}, const ::std::optional<at::Tensor> & antiquant_scale={}, const ::std::optional<at::Tensor> & antiquant_offset={}, const ::std::optional<at::Tensor> & key_antiquant_scale={}, const ::std::optional<at::Tensor> & key_antiquant_offset={}, const ::std::optional<at::Tensor> & value_antiquant_scale={}, const ::std::optional<at::Tensor> & value_antiquant_offset={}, const ::std::optional<at::Tensor> & block_table={}, const ::std::optional<at::Tensor> & query_padding_size={}, const ::std::optional<at::Tensor> & kv_padding_size={}, const ::std::optional<at::Tensor> & key_shared_prefix={}, const ::std::optional<at::Tensor> & value_shared_prefix={}, at::OptionalSymIntArrayRef actual_shared_prefix_len=::std::nullopt, const ::std::optional<at::Tensor> & query_rope={}, const ::std::optional<at::Tensor> & key_rope={}, const ::std::optional<at::Tensor> & key_rope_antiquant_scale={}, int64_t num_heads=1, double scale=1.0, int64_t pre_tokens=2147483647, int64_t next_tokens=2147483647, c10::string_view input_layout="BSH", int64_t num_key_value_heads=0, int64_t sparse_mode=0, int64_t inner_precise=0, int64_t block_size=0, int64_t antiquant_mode=0, int64_t key_antiquant_mode=0, int64_t value_antiquant_mode=0, bool softmax_lse_flag=false);
static at::Tensor _npu_silent_check(at::Tensor & input_grad, const at::Tensor & val, at::Tensor & pre_val, at::Tensor & min_val, at::Tensor & max_val, const at::Tensor & val_counter, int64_t c_min_steps, double c_thresh_l1, double c_coeff_l1, double c_thresh_l2, double c_coeff_l2);
static at::Tensor _npu_silent_check_v2(const at::Tensor & val, at::Tensor & input_grad, at::Tensor & sfda, at::Tensor & step, int64_t c_min_steps, double c_thresh_l1, double c_coeff_l1, double c_thresh_l2, double c_coeff_l2, int64_t npu_asd_detect);
static at::Tensor _npu_silent_check_v3(const at::Tensor & val, at::Tensor & input_grad, at::Tensor & step, at::Tensor & max, at::Tensor & avg, double c_thresh_l1, double c_thresh_l2, double betal, int64_t npu_asd_detect);
static at::Tensor _pdist_forward(const at::Tensor & self, double p=2);
static at::Tensor _pin_memory(const at::Tensor & self, ::std::optional<at::Device> device=::std::nullopt);
static at::Tensor _prelu_kernel(const at::Tensor & self, const at::Tensor & weight);
static at::Tensor _reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride);
static at::Tensor _slow_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding);
static at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
static at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, at::ScalarType input_dtype);
static at::Tensor _upsample_bicubic2d_aa(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_bicubic2d_aa_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_bilinear2d_aa(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_bilinear2d_aa_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_nearest_exact1d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales=::std::nullopt);
static at::Tensor _upsample_nearest_exact1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales=::std::nullopt);
static at::Tensor _upsample_nearest_exact2d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_nearest_exact2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_nearest_exact3d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _upsample_nearest_exact3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor _weight_norm(const at::Tensor & v, const at::Tensor & g, int64_t dim=0);
static at::Tensor abs(const at::Tensor & self);
static at::Tensor acos(const at::Tensor & self);
static at::Tensor acosh(const at::Tensor & self);
static at::Tensor adaptive_avg_pool1d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
static at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
static at::Tensor adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
static at::Tensor add(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha=1);
static at::Tensor add(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value=1);
static at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value=1);
static at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor affine_grid_generator(const at::Tensor & theta, at::IntArrayRef size, bool align_corners);
static at::Tensor affine_grid_generator_backward(const at::Tensor & grad, at::IntArrayRef size, bool align_corners);
static at::Tensor all(const at::Tensor & self);
static at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim=false);
static at::Tensor amax(const at::Tensor & self, at::IntArrayRef dim={}, bool keepdim=false);
static at::Tensor amin(const at::Tensor & self, at::IntArrayRef dim={}, bool keepdim=false);
static at::Tensor angle(const at::Tensor & self);
static at::Tensor any(const at::Tensor & self);
static at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim=false);
static at::Tensor arange(const at::Scalar & end, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor arange(const at::Scalar & start, const at::Scalar & end, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor arange(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step=1, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor argmin(const at::Tensor & self, ::std::optional<int64_t> dim=::std::nullopt, bool keepdim=false);
static at::Tensor argsort(const at::Tensor & self, at::Dimname dim, bool descending=false);
static at::Tensor argsort(const at::Tensor & self, bool stable, int64_t dim=-1, bool descending=false);
static at::Tensor argsort(const at::Tensor & self, int64_t dim=-1, bool descending=false);
static at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<int64_t> storage_offset=::std::nullopt);
static at::Tensor asin(const at::Tensor & self);
static at::Tensor asinh(const at::Tensor & self);
static at::Tensor atan(const at::Tensor & self);
static at::Tensor atan2(const at::Tensor & self, const at::Tensor & other);
static at::Tensor atanh(const at::Tensor & self);
static at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride={}, at::IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, ::std::optional<int64_t> divisor_override=::std::nullopt);
static at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride={}, at::IntArrayRef padding=0, bool ceil_mode=false, bool count_include_pad=true, ::std::optional<int64_t> divisor_override=::std::nullopt);
static at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, ::std::optional<int64_t> divisor_override);
static at::Tensor baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta=1, const at::Scalar & alpha=1);
static at::Tensor bartlett_window(int64_t window_length, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor bartlett_window(int64_t window_length, bool periodic, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor batch_norm(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & running_mean, const ::std::optional<at::Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled);
static at::Tensor batch_norm_backward_elemt(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const ::std::optional<at::Tensor> & weight, const at::Tensor & sum_dy, const at::Tensor & sum_dy_xmu, const at::Tensor & count);
static at::Tensor batch_norm_elemt(const at::Tensor & input, const ::std::optional<at::Tensor> & weight, const ::std::optional<at::Tensor> & bias, const at::Tensor & mean, const at::Tensor & invstd, double eps);
static at::Tensor bernoulli(const at::Tensor & self, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor bernoulli(const at::Tensor & self, double p, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
static at::Tensor binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, int64_t reduction=at::Reduction::Mean);
static at::Tensor binary_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, const ::std::optional<at::Tensor> & pos_weight={}, int64_t reduction=at::Reduction::Mean);
static at::Tensor bincount(const at::Tensor & self, const ::std::optional<at::Tensor> & weights={}, int64_t minlength=0);
static at::Tensor bitwise_and(const at::Tensor & self, const at::Scalar & other);
static at::Tensor bitwise_and(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_not(const at::Tensor & self);
static at::Tensor bitwise_or(const at::Tensor & self, const at::Scalar & other);
static at::Tensor bitwise_or(const at::Tensor & self, const at::Tensor & other);
static at::Tensor bitwise_xor(const at::Tensor & self, const at::Scalar & other);
static at::Tensor bitwise_xor(const at::Tensor & self, const at::Tensor & other);
static at::Tensor blackman_window(int64_t window_length, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor blackman_window(int64_t window_length, bool periodic, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor bmm(const at::Tensor & self, const at::Tensor & mat2);
static at::Tensor bucketize(const at::Scalar & self, const at::Tensor & boundaries, bool out_int32=false, bool right=false);
static at::Tensor bucketize(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32=false, bool right=false);
static at::Tensor cat(at::TensorList tensors, at::Dimname dim);
static at::Tensor cat(const at::ITensorListRef & tensors, int64_t dim=0);
static at::Tensor cdist(const at::Tensor & x1, const at::Tensor & x2, double p=2, ::std::optional<int64_t> compute_mode=::std::nullopt);
static at::Tensor ceil(const at::Tensor & self);
static at::Tensor celu(const at::Tensor & self, const at::Scalar & alpha=1.0);
static at::Tensor channel_shuffle(const at::Tensor & self, int64_t groups);
static at::Tensor clamp(const at::Tensor & self, const ::std::optional<at::Scalar> & min=::std::nullopt, const ::std::optional<at::Scalar> & max=::std::nullopt);
static at::Tensor clamp(const at::Tensor & self, const ::std::optional<at::Tensor> & min={}, const ::std::optional<at::Tensor> & max={});
static at::Tensor clamp_max(const at::Tensor & self, const at::Scalar & max);
static at::Tensor clamp_max(const at::Tensor & self, const at::Tensor & max);
static at::Tensor clamp_min(const at::Tensor & self, const at::Scalar & min);
static at::Tensor clamp_min(const at::Tensor & self, const at::Tensor & min);
static at::Tensor clone(const at::Tensor & self, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
static at::Tensor complex(const at::Tensor & real, const at::Tensor & imag);
static at::Tensor constant_pad_nd(const at::Tensor & self, at::IntArrayRef pad, const at::Scalar & value=0);
static at::Tensor contiguous(const at::Tensor & self, at::MemoryFormat memory_format=c10::MemoryFormat::Contiguous);
static at::Tensor conv_tbc(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, int64_t pad=0);
static at::Tensor conv_transpose2d(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias={}, at::IntArrayRef stride=1, at::IntArrayRef padding=0, at::IntArrayRef output_padding=0, int64_t groups=1, at::IntArrayRef dilation=1);
static at::Tensor conv_transpose3d(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias={}, at::IntArrayRef stride=1, at::IntArrayRef padding=0, at::IntArrayRef output_padding=0, int64_t groups=1, at::IntArrayRef dilation=1);
static at::Tensor convolution(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups);
static at::Tensor convolution_overrideable(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups);
static at::Tensor cos(const at::Tensor & self);
static at::Tensor cosh(const at::Tensor & self);
static at::Tensor count_nonzero(const at::Tensor & self, ::std::optional<int64_t> dim=::std::nullopt);
static at::Tensor count_nonzero(const at::Tensor & self, at::IntArrayRef dim);
static at::Tensor ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank=0, int64_t reduction=at::Reduction::Mean, bool zero_infinity=false);
static at::Tensor ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, const at::Tensor & input_lengths, const at::Tensor & target_lengths, int64_t blank=0, int64_t reduction=at::Reduction::Mean, bool zero_infinity=false);
static at::Tensor cumsum(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor div(const at::Tensor & self, const at::Scalar & other);
static at::Tensor div(const at::Tensor & self, const at::Scalar & other, ::std::optional<c10::string_view> rounding_mode);
static at::Tensor div(const at::Tensor & self, const at::Tensor & other);
static at::Tensor div(const at::Tensor & self, const at::Tensor & other, ::std::optional<c10::string_view> rounding_mode);
static at::Tensor dot(const at::Tensor & self, const at::Tensor & tensor);
static at::Tensor dropout(const at::Tensor & input, double p, bool train);
static at::Tensor dropout_with_byte_mask(const at::Tensor & self, double p, bool train);
static at::Tensor elu(const at::Tensor & self, const at::Scalar & alpha=1, const at::Scalar & scale=1, const at::Scalar & input_scale=1);
static at::Tensor elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result);
static at::Tensor embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
static at::Tensor embedding_symint(const at::Tensor & weight, const at::Tensor & indices, c10::SymInt padding_idx=-1, bool scale_grad_by_freq=false, bool sparse=false);
static at::Tensor empty(at::IntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor empty_like(const at::Tensor & self, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor empty_with_format(at::IntArrayRef size, ::std::optional<at::DimnameList> names, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, int64_t acl_format=2);
static at::Tensor empty_with_format(at::IntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, int64_t acl_format=2);
static at::Tensor eq(const at::Tensor & self, const at::Scalar & other);
static at::Tensor eq(const at::Tensor & self, const at::Tensor & other);
static at::Tensor erf(const at::Tensor & self);
static at::Tensor erfc(const at::Tensor & self);
static at::Tensor erfinv(const at::Tensor & self);
static at::Tensor exp(const at::Tensor & self);
static at::Tensor exp2(const at::Tensor & self);
static at::Tensor expm1(const at::Tensor & self);
static at::Tensor eye(int64_t n, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor eye(int64_t n, int64_t m, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor fast_gelu(const at::Tensor & self);
static at::Tensor fft_c2r_backward(const at::Tensor & grad, at::IntArrayRef dim, int64_t normalization);
static at::Tensor fft_fftshift(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt);
static at::Tensor fft_ifftshift(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt);
static at::Tensor fft_r2c_backward(const at::Tensor & grad, at::IntArrayRef dim, int64_t normalization, bool onesided, int64_t last_dim_size);
static at::Tensor flatten_dense_tensors(at::TensorList tensors);
static at::Tensor flip(const at::Tensor & self, at::IntArrayRef dims);
static at::Tensor floor(const at::Tensor & self);
static at::Tensor floor_divide(const at::Tensor & self, const at::Scalar & other);
static at::Tensor floor_divide(const at::Tensor & self, const at::Tensor & other);
static at::Tensor fmod(const at::Tensor & self, const at::Scalar & other);
static at::Tensor fmod(const at::Tensor & self, const at::Tensor & other);
static at::Tensor frac(const at::Tensor & self);
static at::Tensor full(at::IntArrayRef size, const at::Scalar & fill_value, ::std::optional<at::DimnameList> names, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor full(at::IntArrayRef size, const at::Scalar & fill_value, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor gather(const at::Tensor & self, at::Dimname dim, const at::Tensor & index, bool sparse_grad=false);
static at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad=false);
static at::Tensor ge(const at::Tensor & self, const at::Scalar & other);
static at::Tensor ge(const at::Tensor & self, const at::Tensor & other);
static at::Tensor gelu(const at::Tensor & self, c10::string_view approximate="none");
static at::Tensor gelu_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::string_view approximate="none");
static at::Tensor glu(const at::Tensor & self, int64_t dim=-1);
static at::Tensor glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim);
static at::Tensor grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
static at::Tensor grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners);
static at::Tensor gt(const at::Tensor & self, const at::Scalar & other);
static at::Tensor gt(const at::Tensor & self, const at::Tensor & other);
static at::Tensor hamming_window(int64_t window_length, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hamming_window(int64_t window_length, bool periodic, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hamming_window(int64_t window_length, bool periodic, double alpha, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hann_window(int64_t window_length, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hann_window(int64_t window_length, bool periodic, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor hardshrink(const at::Tensor & self, const at::Scalar & lambd=0.5);
static at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor hardsigmoid(const at::Tensor & self);
static at::Tensor hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor hardswish(const at::Tensor & self);
static at::Tensor hardswish_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor hardtanh(const at::Tensor & self, const at::Scalar & min_val=-1, const at::Scalar & max_val=1);
static at::Tensor hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val);
static at::Tensor histc(const at::Tensor & self, int64_t bins=100, const at::Scalar & min=0, const at::Scalar & max=0);
static at::Tensor im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
static at::Tensor index(const at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices);
static at::Tensor index_add(const at::Tensor & self, at::Dimname dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha=1);
static at::Tensor index_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha=1);
static at::Tensor index_copy(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source);
static at::Tensor index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value);
static at::Tensor index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value);
static at::Tensor index_put(const at::Tensor & self, const c10::List<::std::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate=false);
static at::Tensor index_select(const at::Tensor & self, at::Dimname dim, const at::Tensor & index);
static at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index);
static at::Tensor inverse(const at::Tensor & self);
static at::Tensor isclose(const at::Tensor & self, const at::Tensor & other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false);
static at::Tensor isfinite(const at::Tensor & self);
static at::Tensor isin(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique=false, bool invert=false);
static at::Tensor isin(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique=false, bool invert=false);
static at::Tensor isnan(const at::Tensor & self);
static at::Tensor kl_div(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean, bool log_target=false);
static at::Tensor kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean, bool log_target=false);
static at::Tensor l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean);
static at::Tensor l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static at::Tensor le(const at::Tensor & self, const at::Scalar & other);
static at::Tensor le(const at::Tensor & self, const at::Tensor & other);
static at::Tensor leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope=0.01);
static at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result);
static at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight);
static at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
static at::Tensor linalg_cross(const at::Tensor & self, const at::Tensor & other, int64_t dim=-1);
static at::Tensor linalg_solve_triangular(const at::Tensor & self, const at::Tensor & B, bool upper, bool left=true, bool unitriangular=false);
static at::Tensor linalg_vector_norm(const at::Tensor & self, const at::Scalar & ord=2, at::OptionalIntArrayRef dim=::std::nullopt, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor linspace(const at::Scalar & start, const at::Scalar & end, int64_t steps, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor log(const at::Tensor & self);
static at::Tensor log10(const at::Tensor & self);
static at::Tensor log1p(const at::Tensor & self);
static at::Tensor log2(const at::Tensor & self);
static at::Tensor log_sigmoid(const at::Tensor & self);
static at::Tensor log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer);
static at::Tensor log_softmax(const at::Tensor & self, at::Dimname dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor log_softmax(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor logaddexp(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logaddexp2(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logical_and(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logical_not(const at::Tensor & self);
static at::Tensor logical_or(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logical_xor(const at::Tensor & self, const at::Tensor & other);
static at::Tensor logspace(const at::Scalar & start, const at::Scalar & end, int64_t steps, double base=10.0, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor logsumexp(const at::Tensor & self, at::DimnameList dim, bool keepdim=false);
static at::Tensor logsumexp(const at::Tensor & self, at::IntArrayRef dim, bool keepdim=false);
static at::Tensor lt(const at::Tensor & self, const at::Scalar & other);
static at::Tensor lt(const at::Tensor & self, const at::Tensor & other);
static at::Tensor masked_select(const at::Tensor & self, const at::Tensor & mask);
static at::Tensor matmul(const at::Tensor & self, const at::Tensor & other);
static at::Tensor max(const at::Tensor & self);
static at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
static at::Tensor max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
static at::Tensor max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size);
static at::Tensor max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding);
static at::Tensor maximum(const at::Tensor & self, const at::Tensor & other);
static at::Tensor mean(const at::Tensor & self, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor mean(const at::Tensor & self, at::DimnameList dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor mean(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor median(const at::Tensor & self);
static at::Tensor min(const at::Tensor & self);
static at::Tensor minimum(const at::Tensor & self, const at::Tensor & other);
static at::Tensor mish(const at::Tensor & self);
static at::Tensor mish_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2);
static at::Tensor mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean);
static at::Tensor mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static at::Tensor mul(const at::Tensor & self, const at::Scalar & other);
static at::Tensor mul(const at::Tensor & self, const at::Tensor & other);
static at::Tensor multilabel_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean);
static at::Tensor multinomial(const at::Tensor & self, int64_t num_samples, bool replacement=false, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor mv(const at::Tensor & self, const at::Tensor & vec);
static at::Tensor nan_to_num(const at::Tensor & self, ::std::optional<double> nan=::std::nullopt, ::std::optional<double> posinf=::std::nullopt, ::std::optional<double> neginf=::std::nullopt);
static at::Tensor nanmedian(const at::Tensor & self);
static at::Tensor nansum(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor native_dropout_backward(const at::Tensor & grad_output, const at::Tensor & mask, double scale);
static at::Tensor ne(const at::Tensor & self, const at::Scalar & other);
static at::Tensor ne(const at::Tensor & self, const at::Tensor & other);
static at::Tensor neg(const at::Tensor & self);
static at::Tensor new_empty_strided_symint(const at::Tensor & self, c10::SymIntArrayRef size, c10::SymIntArrayRef stride, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor nll_loss(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
static at::Tensor nll_loss2d(const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, int64_t reduction=at::Reduction::Mean, int64_t ignore_index=-100);
static at::Tensor nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
static at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
static at::Tensor nonzero(const at::Tensor & self);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim=false);
static at::Tensor norm(const at::Tensor & self, const ::std::optional<at::Scalar> & p, at::ScalarType dtype);
static at::Tensor norm(const at::Tensor & self, const at::Scalar & p=2);
static at::Tensor normal(const at::Tensor & mean, const at::Tensor & std, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor normal(const at::Tensor & mean, double std=1, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor normal(double mean, const at::Tensor & std, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor normal(double mean, double std, at::IntArrayRef size, ::std::optional<at::Generator> generator=::std::nullopt, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor npu_alloc_float_status(const at::Tensor & self);
static at::Tensor npu_anchor_response_flags(const at::Tensor & self, at::IntArrayRef featmap_size, at::IntArrayRef stride, int64_t num_base_anchors);
static at::Tensor npu_anti_quant(const at::Tensor & x, const at::Tensor & scale, const ::std::optional<at::Tensor> & offset={}, ::std::optional<at::ScalarType> dst_dtype=::std::nullopt, ::std::optional<at::ScalarType> src_dtype=::std::nullopt);
static at::Tensor npu_batch_gather_matmul(const at::Tensor & self, const at::Tensor & x, const at::Tensor & weight_b, const at::Tensor & indices, const ::std::optional<at::Tensor> & weight_a={}, int64_t layer_idx=0, double scale=1e-3, int64_t y_offset=0, int64_t y_slice_size=-1);
static at::Tensor npu_binary_cross_entropy_with_logits_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const ::std::optional<at::Tensor> & weight_opt, const ::std::optional<at::Tensor> & pos_weight_opt, int64_t reduction);
static at::Tensor npu_bmmV2(const at::Tensor & self, const at::Tensor & mat2, at::IntArrayRef output_sizes);
static at::Tensor npu_bmm_v2_mat1_backward_symint(const at::Tensor & grad, const at::Tensor & mat1, const at::Tensor & mat2, c10::SymIntArrayRef size);
static at::Tensor npu_bmm_v2_mat2_backward_symint(const at::Tensor & grad, const at::Tensor & mat1, const at::Tensor & mat2, c10::SymIntArrayRef size);
static at::Tensor npu_bounding_box_decode(const at::Tensor & rois, const at::Tensor & deltas, double means0, double means1, double means2, double means3, double stds0, double stds1, double stds2, double stds3, at::IntArrayRef max_shape, double wh_ratio_clip);
static at::Tensor npu_bounding_box_encode(const at::Tensor & anchor_box, const at::Tensor & ground_truth_box, double means0, double means1, double means2, double means3, double stds0, double stds1, double stds2, double stds3);
static at::Tensor npu_broadcast(const at::Tensor & self, at::IntArrayRef size);
static at::Tensor npu_ciou(const at::Tensor & self, const at::Tensor & gtboxes, bool trans=false, bool is_cross=true, int64_t mode=0, bool atan_sub_flag=false);
static at::Tensor npu_clear_float_status(const at::Tensor & self, int64_t mode=0);
static at::Tensor npu_confusion_transpose(const at::Tensor & self, at::IntArrayRef perm, at::IntArrayRef shape, bool transpose_first);
static at::Tensor npu_confusion_transpose_backward_symint(const at::Tensor & grad, at::IntArrayRef perm, c10::SymIntArrayRef shape, bool transpose_first);
static at::Tensor npu_conv2d(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups);
static at::Tensor npu_conv3d(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups);
static at::Tensor npu_conv_transpose2d(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups);
static at::Tensor npu_convert_weight_to_int4pack(const at::Tensor & weight, int64_t inner_k_tiles=0);
static at::Tensor npu_convolution(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups);
static at::Tensor npu_convolution_transpose(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups);
static at::Tensor npu_cross_entropy_loss_backward(const at::Tensor & grad_loss, const at::Tensor & log_prob, const at::Tensor & target, const ::std::optional<at::Tensor> & weight={}, const ::std::optional<at::Tensor> & grad_zloss={}, const ::std::optional<at::Tensor> & lse_for_zloss={}, c10::string_view reduction="mean", int64_t ignore_index=-100, double label_smoothing=0.0, double lse_square_scale_for_zloss=0.0);
static at::Tensor npu_dequant_bias(const at::Tensor & x, const at::Tensor & weight_scale, const ::std::optional<at::Tensor> & activation_scale, const ::std::optional<at::Tensor> & bias, ::std::optional<at::ScalarType> output_dtype=::std::nullopt);
static at::Tensor npu_diou(const at::Tensor & self, const at::Tensor & gtboxes, bool trans=false, bool is_cross=false, int64_t mode=0);
static at::Tensor npu_dropout_backward(const at::Tensor & grad_output, const at::Tensor & mask, double p);
static at::Tensor npu_dropout_gen_mask(at::IntArrayRef size, double p, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor npu_dtype_cast(const at::Tensor & self, at::ScalarType dtype);
static at::Tensor npu_dtype_cast_backward(const at::Tensor & grad, at::ScalarType dtype);
static at::Tensor npu_fast_gelu(const at::Tensor & self);
static at::Tensor npu_fast_gelu_backward(const at::Tensor & grad, const at::Tensor & self);
static at::Tensor npu_ffn(const at::Tensor & x, const at::Tensor & weight1, const at::Tensor & weight2, c10::string_view activation, at::OptionalIntArrayRef expert_tokens=::std::nullopt, at::OptionalIntArrayRef expert_tokens_index=::std::nullopt, const ::std::optional<at::Tensor> & bias1={}, const ::std::optional<at::Tensor> & bias2={}, const ::std::optional<at::Tensor> & scale={}, const ::std::optional<at::Tensor> & offset={}, const ::std::optional<at::Tensor> & deq_scale1={}, const ::std::optional<at::Tensor> & deq_scale2={}, const ::std::optional<at::Tensor> & antiquant_scale1={}, const ::std::optional<at::Tensor> & antiquant_scale2={}, const ::std::optional<at::Tensor> & antiquant_offset1={}, const ::std::optional<at::Tensor> & antiquant_offset2={}, ::std::optional<int64_t> inner_precise=::std::nullopt, ::std::optional<at::ScalarType> output_dtype=::std::nullopt);
static at::Tensor npu_format_cast(const at::Tensor & self, const at::Tensor & dst);
static at::Tensor npu_format_cast(const at::Tensor & self, int64_t acl_format);
static at::Tensor npu_fused_attention_score(const at::Tensor & query_layer, const at::Tensor & key_layer, const at::Tensor & value_layer, const at::Tensor & attention_mask, const at::Scalar & scale, double keep_prob, bool query_transpose=false, bool key_transpose=false, bool bmm_score_transpose_a=false, bool bmm_score_transpose_b=false, bool value_transpose=false, bool dx_transpose=false);
static at::Tensor npu_gather_backward_symint(const at::Tensor & grad, c10::SymIntArrayRef self_size, int64_t dim, const at::Tensor & index, bool sparse_grad);
static at::Tensor npu_geglu_grad(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & gelu, int64_t dim=-1, int64_t approximate=1, bool activate_left=false);
static at::Tensor npu_gelu(const at::Tensor & self, c10::string_view approximate="none");
static at::Tensor npu_gelu_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::string_view approximate="none");
static at::Tensor npu_get_float_status(const at::Tensor & self, int64_t mode=0);
static at::Tensor npu_giou(const at::Tensor & self, const at::Tensor & gtboxes, bool trans=false, bool is_cross=false, int64_t mode=0);
static at::Tensor npu_grid_assign_positive(const at::Tensor & self, const at::Tensor & overlaps, const at::Tensor & box_responsible_flags, const at::Tensor & max_overlaps, const at::Tensor & argmax_overlaps, const at::Tensor & gt_max_overlaps, const at::Tensor & gt_argmax_overlaps, int64_t num_gts, double pos_iou_thr, double min_pos_iou, bool gt_max_assign_all);
static at::Tensor npu_group_quant(const at::Tensor & x, const at::Tensor & scale, const at::Tensor & group_index, const ::std::optional<at::Tensor> & offset={}, ::std::optional<at::ScalarType> dst_dtype=::std::nullopt);
static at::Tensor npu_grouped_matmul_finalize_routing(const at::Tensor & x, const at::Tensor & w, const at::Tensor & group_list, const ::std::optional<at::Tensor> & scale={}, const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & pertoken_scale={}, const ::std::optional<at::Tensor> & shared_input={}, const ::std::optional<at::Tensor> & logit={}, const ::std::optional<at::Tensor> & row_index={}, ::std::optional<at::ScalarType> dtype=::std::nullopt, ::std::optional<double> shared_input_weight=1.0, ::std::optional<int64_t> shared_input_offset=0, ::std::optional<int64_t> output_bs=0, ::std::optional<int64_t> group_list_type=1);
static at::Tensor npu_incre_flash_attention_symint(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & padding_mask={}, const ::std::optional<at::Tensor> & atten_mask={}, const ::std::optional<at::Tensor> & pse_shift={}, at::OptionalSymIntArrayRef actual_seq_lengths=::std::nullopt, const ::std::optional<at::Tensor> & antiquant_scale={}, const ::std::optional<at::Tensor> & antiquant_offset={}, const ::std::optional<at::Tensor> & block_table={}, const ::std::optional<at::Tensor> & dequant_scale1={}, const ::std::optional<at::Tensor> & quant_scale1={}, const ::std::optional<at::Tensor> & dequant_scale2={}, const ::std::optional<at::Tensor> & quant_scale2={}, const ::std::optional<at::Tensor> & quant_offset2={}, const ::std::optional<at::Tensor> & kv_padding_size={}, int64_t num_heads=1, double scale_value=1.0, c10::string_view input_layout="BSH", int64_t num_key_value_heads=0, int64_t block_size=0, int64_t inner_precise=1);
static at::Tensor npu_indexing(const at::Tensor & self, at::IntArrayRef begin, at::IntArrayRef end, at::IntArrayRef strides, int64_t begin_mask=0, int64_t end_mask=0, int64_t ellipsis_mask=0, int64_t new_axis_mask=0, int64_t shrink_axis_mask=0);
static at::Tensor npu_interleave_rope(const at::Tensor & x, const at::Tensor & cos, const at::Tensor & sin);
static at::Tensor npu_iou(const at::Tensor & bboxes, const at::Tensor & gtboxes, int64_t mode=0);
static at::Tensor npu_layer_norm_eval(const at::Tensor & input, at::IntArrayRef normalized_shape, const ::std::optional<at::Tensor> & weight={}, const ::std::optional<at::Tensor> & bias={}, double eps=1e-05);
static at::Tensor npu_linear(const at::Tensor & input, const at::Tensor & weight, const ::std::optional<at::Tensor> & bias={});
static at::Tensor npu_masked_fill_range(const at::Tensor & self, const at::Tensor & start, const at::Tensor & end, const at::Tensor & value, int64_t axis=-1);
static at::Tensor npu_masked_softmax_with_rel_pos_bias(const at::Tensor & x, const ::std::optional<at::Tensor> & atten_mask, const at::Tensor & relative_pos_bias, double scale_value=1.0, int64_t inner_precision_mode=0);
static at::Tensor npu_max_backward_symint(const at::Tensor & grad, int64_t dim, const at::Tensor & indices, c10::SymIntArrayRef sizes, bool keepdim);
static at::Tensor npu_min_backward_symint(const at::Tensor & grad, int64_t dim, const at::Tensor & indices, c10::SymIntArrayRef sizes, bool keepdim);
static at::Tensor npu_mish(const at::Tensor & self);
static at::Tensor npu_mish_backward(const at::Tensor & grad, const at::Tensor & input);
static at::Tensor npu_mm_all_reduce_base(const at::Tensor & x1, const at::Tensor & x2, c10::string_view hcom, c10::string_view reduce_op="sum", const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & antiquant_scale={}, const ::std::optional<at::Tensor> & antiquant_offset={}, const ::std::optional<at::Tensor> & x3={}, const ::std::optional<at::Tensor> & dequant_scale={}, const ::std::optional<at::Tensor> & pertoken_scale={}, const ::std::optional<at::Tensor> & comm_quant_scale_1={}, const ::std::optional<at::Tensor> & comm_quant_scale_2={}, int64_t antiquant_group_size=0, int64_t comm_turn=0);
static at::Tensor npu_mm_reduce_scatter_base(const at::Tensor & self, const at::Tensor & x2, c10::string_view hcom, int64_t world_size, c10::string_view reduce_op="sum", const ::std::optional<at::Tensor> & bias={}, int64_t comm_turn=0);
static at::Tensor npu_moe_compute_expert_tokens(const at::Tensor & sorted_expert_for_source_row, int64_t num_expert);
static at::Tensor npu_moe_distribute_combine(const at::Tensor & expand_x, const at::Tensor & expert_ids, const at::Tensor & expand_idx, const at::Tensor & ep_send_counts, const at::Tensor & expert_scales, c10::string_view group_ep, int64_t ep_world_size, int64_t ep_rank_id, int64_t moe_expert_num, const ::std::optional<at::Tensor> & tp_send_counts={}, const ::std::optional<at::Tensor> & x_active_mask={}, const ::std::optional<at::Tensor> & activation_scale={}, const ::std::optional<at::Tensor> & weight_scale={}, const ::std::optional<at::Tensor> & group_list={}, const ::std::optional<at::Tensor> & expand_scales={}, c10::string_view group_tp="", int64_t tp_world_size=0, int64_t tp_rank_id=0, int64_t expert_shard_type=0, int64_t shared_expert_num=1, int64_t shared_expert_rank_num=0, int64_t global_bs=0, int64_t out_dtype=0, int64_t comm_quant_mode=0, int64_t group_list_type=0);
static at::Tensor npu_moe_finalize_routing(const at::Tensor & expanded_permuted_rows, const ::std::optional<at::Tensor> & skip1, const ::std::optional<at::Tensor> & skip2, const ::std::optional<at::Tensor> & bias, const ::std::optional<at::Tensor> & scales, const at::Tensor & expanded_src_to_dst_row, const ::std::optional<at::Tensor> & export_for_source_row, ::std::optional<int64_t> drop_pad_mode=0);
static at::Tensor npu_normalize_batch(const at::Tensor & self, const at::Tensor & seq_len, int64_t normalize_type=0);
static at::Tensor npu_one_hot(const at::Tensor & self, int64_t num_classes=-1, int64_t depth=1, const at::Scalar & on_value=1, const at::Scalar & off_value=0);
static at::Tensor npu_pad(const at::Tensor & input, at::IntArrayRef paddings);
static at::Tensor npu_prompt_flash_attention(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & padding_mask={}, const ::std::optional<at::Tensor> & atten_mask={}, const ::std::optional<at::Tensor> & pse_shift={}, at::OptionalIntArrayRef actual_seq_lengths=::std::nullopt, const ::std::optional<at::Tensor> & deq_scale1={}, const ::std::optional<at::Tensor> & quant_scale1={}, const ::std::optional<at::Tensor> & deq_scale2={}, const ::std::optional<at::Tensor> & quant_scale2={}, const ::std::optional<at::Tensor> & quant_offset2={}, int64_t num_heads=1, double scale_value=1.0, int64_t pre_tokens=2147473647, int64_t next_tokens=0, c10::string_view input_layout="BSH", int64_t num_key_value_heads=0, at::OptionalIntArrayRef actual_seq_lengths_kv=::std::nullopt, int64_t sparse_mode=0);
static at::Tensor npu_ps_roi_pooling(const at::Tensor & self, const at::Tensor & rois, double spatial_scale, int64_t group_size, int64_t output_dim);
static at::Tensor npu_ps_roi_pooling_backward_symint(const at::Tensor & output_grad, const at::Tensor & rois, double spatial_scale, int64_t group_size, int64_t output_dim, c10::SymIntArrayRef input_size);
static at::Tensor npu_ptiou(const at::Tensor & bboxes, const at::Tensor & gtboxes, int64_t mode=0);
static at::Tensor npu_quant_conv2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & scale, at::IntArrayRef strides=1, at::IntArrayRef pads=0, at::IntArrayRef dilations=1, int64_t groups=1, int64_t offset_x=0, c10::string_view round_mode="rint", ::std::optional<at::ScalarType> output_dtype=::std::nullopt, const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & offset={});
static at::Tensor npu_quant_grouped_matmul_dequant(const at::Tensor & x, const at::Tensor & quantized_weight, const at::Tensor & weight_scale, const at::Tensor & group_list, const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & x_scale={}, const ::std::optional<at::Tensor> & x_offset={}, const ::std::optional<at::Tensor> & smooth_scale={}, ::std::optional<c10::string_view> quant_mode="pertoken");
static at::Tensor npu_quant_matmul(const at::Tensor & x1, const at::Tensor & x2, const at::Tensor & scale, const ::std::optional<at::Tensor> & offset={}, const ::std::optional<at::Tensor> & pertoken_scale={}, const ::std::optional<at::Tensor> & bias={}, ::std::optional<at::ScalarType> output_dtype=::std::nullopt);
static at::Tensor npu_quant_matmul_dequant(const at::Tensor & x, const at::Tensor & quantized_weight, const at::Tensor & weight_scale, const ::std::optional<at::Tensor> & bias={}, const ::std::optional<at::Tensor> & x_scale={}, const ::std::optional<at::Tensor> & x_offset={}, const ::std::optional<at::Tensor> & smooth_scale={}, ::std::optional<c10::string_view> quant_mode="pertoken");
static at::Tensor npu_quant_scatter(const at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates, const at::Tensor & quant_scales, const ::std::optional<at::Tensor> & quant_zero_points={}, int64_t axis=0, int64_t quant_axis=1, c10::string_view reduce="update");
static at::Tensor npu_quantize(const at::Tensor & self, const at::Tensor & scales, const ::std::optional<at::Tensor> & zero_points, at::ScalarType dtype, int64_t axis=1, bool div_mode=true);
static at::Tensor npu_reshape(const at::Tensor & self, at::IntArrayRef shape, bool can_refresh=false);
static at::Tensor npu_roi_align(const at::Tensor & self, const at::Tensor & rois, double spatial_scale, int64_t pooled_height, int64_t pooled_width, int64_t sample_num, int64_t roi_end_mode);
static at::Tensor npu_roi_alignbk(const at::Tensor & self, const at::Tensor & rois, at::IntArrayRef xdiff_shape, int64_t pooled_width, int64_t pooled_height, double spatial_scale, int64_t sample_num, ::std::optional<int64_t> roi_end_mode=::std::nullopt);
static at::Tensor npu_rotary_mul(const at::Tensor & self, const at::Tensor & r1, const at::Tensor & r2, c10::string_view rotary_mode="half");
static at::Tensor npu_rotated_box_decode(const at::Tensor & self, const at::Tensor & deltas, const at::Tensor & weight);
static at::Tensor npu_rotated_box_encode(const at::Tensor & self, const at::Tensor & gt_bboxes, const at::Tensor & weight);
static at::Tensor npu_rotated_iou(const at::Tensor & self, const at::Tensor & query_boxes, bool trans=false, int64_t mode=0, bool is_cross=true, double v_threshold=0.0, double e_threshold=0.0);
static at::Tensor npu_rotated_overlaps(const at::Tensor & self, const at::Tensor & query_boxes, bool trans=false);
static at::Tensor npu_scaled_masked_softmax(const at::Tensor & x, const at::Tensor & mask, const at::Scalar & scale=1, bool fixed_triu_mask=false);
static at::Tensor npu_scaled_masked_softmax_backward(const at::Tensor & y_grad, const at::Tensor & y, const at::Tensor & mask, const at::Scalar & scale, bool fixed_triu_mask);
static at::Tensor npu_scatter(const at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates, int64_t dim);
static at::Tensor npu_scatter_nd_update(const at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates);
static at::Tensor npu_sign_bits_pack(const at::Tensor & self, int64_t size);
static at::Tensor npu_sign_bits_unpack(const at::Tensor & input, int64_t size, at::ScalarType dtype);
static at::Tensor npu_silu(const at::Tensor & self);
static at::Tensor npu_silu_backward(const at::Tensor & grad_output, const at::Tensor & x0, const at::Tensor & x1);
static at::Tensor npu_slice(const at::Tensor & self, at::IntArrayRef offsets, at::IntArrayRef size);
static at::Tensor npu_softmax_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & labels);
static at::Tensor npu_softmax_cross_entropy_with_logits_backward(const at::Tensor & grad, const at::Tensor & self, const at::Tensor & labels);
static at::Tensor npu_sort_v2(const at::Tensor & self, int64_t dim=-1, bool descending=false);
static at::Tensor npu_stride_add(const at::Tensor & self, const at::Tensor & other, const at::Scalar & offset1, const at::Scalar & offset2, const at::Scalar & c1_len);
static at::Tensor npu_stride_copy(const at::Tensor & self, at::IntArrayRef shape, at::IntArrayRef stride, const at::Scalar & storage_offset);
static at::Tensor npu_sub_sample(const at::Tensor & self, int64_t per_images, double positive_fraction);
static at::Tensor npu_swiglu(const at::Tensor & self, int64_t dim=-1);
static at::Tensor npu_swiglu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim=-1);
static at::Tensor npu_trans_quant_param(const at::Tensor & scale, const ::std::optional<at::Tensor> & offset={});
static at::Tensor npu_transpose(const at::Tensor & self, at::IntArrayRef perm, bool require_contiguous=true);
static at::Tensor npu_weight_quant_batchmatmul(const at::Tensor & x, const at::Tensor & weight, const at::Tensor & antiquant_scale, const ::std::optional<at::Tensor> & antiquant_offset={}, const ::std::optional<at::Tensor> & quant_scale={}, const ::std::optional<at::Tensor> & quant_offset={}, const ::std::optional<at::Tensor> & bias={}, int64_t antiquant_group_size=0, int64_t inner_precise=0);
static at::Tensor npu_yolo_boxes_encode(const at::Tensor & self, const at::Tensor & gt_bboxes, const at::Tensor & stride, bool performance_mode=false);
static at::Tensor one_hot(const at::Tensor & self, int64_t num_classes=-1);
static at::Tensor ones(at::IntArrayRef size, ::std::optional<at::DimnameList> names, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor ones(at::IntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor ones_like(const at::Tensor & self, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor pdist(const at::Tensor & self, double p=2);
static at::Tensor polar(const at::Tensor & abs, const at::Tensor & angle);
static at::Tensor pow(const at::Scalar & self, const at::Tensor & exponent);
static at::Tensor pow(const at::Tensor & self, const at::Scalar & exponent);
static at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent);
static at::Tensor prod(const at::Tensor & self, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor quantize_per_channel(const at::Tensor & self, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::ScalarType dtype);
static at::Tensor quantize_per_tensor(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype);
static at::Tensor randperm(int64_t n, ::std::optional<at::Generator> generator, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor randperm(int64_t n, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor range(const at::Scalar & start, const at::Scalar & end, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor range(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step=1, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor reciprocal(const at::Tensor & self);
static at::Tensor reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor relu(const at::Tensor & self);
static at::Tensor remainder(const at::Scalar & self, const at::Tensor & other);
static at::Tensor remainder(const at::Tensor & self, const at::Scalar & other);
static at::Tensor remainder(const at::Tensor & self, const at::Tensor & other);
static at::Tensor renorm(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm);
static at::Tensor repeat(const at::Tensor & self, at::IntArrayRef repeats);
static at::Tensor repeat_interleave_backward_int_symint(const at::Tensor & grad, const at::Tensor & self, c10::SymInt repeats, ::std::optional<int64_t> dim=::std::nullopt);
static at::Tensor repeat_interleave_backward_tensor(const at::Tensor & grad, const at::Tensor & self, const at::Tensor & repeats, ::std::optional<int64_t> dim=::std::nullopt);
static at::Tensor repeat_interleave_symint(const at::Tensor & self, c10::SymInt repeats, ::std::optional<int64_t> dim=::std::nullopt, ::std::optional<c10::SymInt> output_size=::std::nullopt);
static at::Tensor repeat_interleave_symint(const at::Tensor & self, const at::Tensor & repeats, ::std::optional<int64_t> dim=::std::nullopt, ::std::optional<c10::SymInt> output_size=::std::nullopt);
static at::Tensor replication_pad1d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad2d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad3d(const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding);
static at::Tensor roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims={});
static at::Tensor round(const at::Tensor & self);
static at::Tensor round(const at::Tensor & self, int64_t decimals);
static at::Tensor rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower=0.125, const at::Scalar & upper=0.3333333333333333, bool training=false, ::std::optional<at::Generator> generator=::std::nullopt);
static at::Tensor rsqrt(const at::Tensor & self);
static at::Tensor rsub(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha=1);
static at::Tensor rsub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor scaled_dot_product_attention(const at::Tensor & query, const at::Tensor & key, const at::Tensor & value, const ::std::optional<at::Tensor> & attn_mask={}, double dropout_p=0.0, bool is_causal=false, ::std::optional<double> scale=::std::nullopt, bool enable_gqa=false);
static at::Tensor scatter_add(const at::Tensor & self, at::Dimname dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
static at::Tensor scatter_update(const at::Tensor & self, const at::Tensor & indices, const at::Tensor & updates, int64_t axis);
static at::Tensor searchsorted(const at::Tensor & sorted_sequence, const at::Scalar & self, bool out_int32=false, bool right=false, ::std::optional<c10::string_view> side=::std::nullopt, const ::std::optional<at::Tensor> & sorter={});
static at::Tensor searchsorted(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32=false, bool right=false, ::std::optional<c10::string_view> side=::std::nullopt, const ::std::optional<at::Tensor> & sorter={});
static at::Tensor sgn(const at::Tensor & self);
static at::Tensor sigmoid(const at::Tensor & self);
static at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output);
static at::Tensor sign(const at::Tensor & self);
static at::Tensor silu(const at::Tensor & self);
static at::Tensor silu_backward(const at::Tensor & grad_output, const at::Tensor & self);
static at::Tensor sin(const at::Tensor & self);
static at::Tensor sinc(const at::Tensor & self);
static at::Tensor sinh(const at::Tensor & self);
static at::Tensor slow_conv3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias={}, at::IntArrayRef stride=1, at::IntArrayRef padding=0);
static at::Tensor slow_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding);
static at::Tensor slow_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias={}, at::IntArrayRef stride=1, at::IntArrayRef padding=0, at::IntArrayRef dilation=1);
static at::Tensor slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias={}, at::IntArrayRef stride=1, at::IntArrayRef padding=0, at::IntArrayRef output_padding=0, at::IntArrayRef dilation=1);
static at::Tensor smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean, double beta=1.0);
static at::Tensor smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta);
static at::Tensor soft_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction=at::Reduction::Mean);
static at::Tensor soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
static at::Tensor softmax(const at::Tensor & self, at::Dimname dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor softmax(const at::Tensor & self, int64_t dim, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor softplus(const at::Tensor & self, const at::Scalar & beta=1, const at::Scalar & threshold=20);
static at::Tensor softshrink(const at::Tensor & self, const at::Scalar & lambd=0.5);
static at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd);
static at::Tensor sqrt(const at::Tensor & self);
static at::Tensor squeeze(const at::Tensor & self);
static at::Tensor squeeze(const at::Tensor & self, int64_t dim);
static at::Tensor stack(at::TensorList tensors, int64_t dim=0);
static at::Tensor std(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt, const ::std::optional<at::Scalar> & correction=::std::nullopt, bool keepdim=false);
static at::Tensor stft(const at::Tensor & self, int64_t n_fft, ::std::optional<int64_t> hop_length=::std::nullopt, ::std::optional<int64_t> win_length=::std::nullopt, const ::std::optional<at::Tensor> & window={}, bool normalized=false, ::std::optional<bool> onesided=::std::nullopt, ::std::optional<bool> return_complex=::std::nullopt);
static at::Tensor stft_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t n_fft, ::std::optional<int64_t> hop_length=::std::nullopt, ::std::optional<int64_t> win_length=::std::nullopt, const ::std::optional<at::Tensor> & window={}, bool normalized=false, ::std::optional<bool> onesided=::std::nullopt, ::std::optional<bool> return_complex=::std::nullopt);
static at::Tensor sub(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha=1);
static at::Tensor sub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1);
static at::Tensor sum(const at::Tensor & self, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor sum(const at::Tensor & self, at::DimnameList dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor sum(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt);
static at::Tensor take(const at::Tensor & self, const at::Tensor & index);
static at::Tensor tan(const at::Tensor & self);
static at::Tensor tanh(const at::Tensor & self);
static at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output);
static at::Tensor threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value);
static at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold);
static at::Tensor to(const at::Tensor & self, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, bool non_blocking=false, bool copy=false, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor to(const at::Tensor & self, at::Device device, at::ScalarType dtype, bool non_blocking=false, bool copy=false, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor to(const at::Tensor & self, at::ScalarType dtype, bool non_blocking=false, bool copy=false, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor to(const at::Tensor & self, const at::Tensor & other, bool non_blocking=false, bool copy=false, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor trace(const at::Tensor & self);
static at::Tensor tril(const at::Tensor & self, int64_t diagonal=0);
static at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset=0, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor triu(const at::Tensor & self, int64_t diagonal=0);
static at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset=0, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor trunc(const at::Tensor & self);
static at::Tensor unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step);
static at::Tensor unsafe_empty_with_format(at::IntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, int64_t acl_format=2, bool keep_format=false);
static at::Tensor unsqueeze(const at::Tensor & self, int64_t dim);
static at::Tensor upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales=::std::nullopt);
static at::Tensor upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales=::std::nullopt);
static at::Tensor upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales=::std::nullopt);
static at::Tensor upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales=::std::nullopt);
static at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, ::std::optional<double> scales_d=::std::nullopt, ::std::optional<double> scales_h=::std::nullopt, ::std::optional<double> scales_w=::std::nullopt);
static at::Tensor var(const at::Tensor & self, at::OptionalIntArrayRef dim=::std::nullopt, const ::std::optional<at::Scalar> & correction=::std::nullopt, bool keepdim=false);
static at::Tensor vdot(const at::Tensor & self, const at::Tensor & other);
static at::Tensor view(const at::Tensor & self, at::IntArrayRef size);
static at::Tensor view_as_complex(const at::Tensor & self);
static at::Tensor view_as_real(const at::Tensor & self);
static at::Tensor where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other);
static at::Tensor xlogy(const at::Scalar & self, const at::Tensor & other);
static at::Tensor xlogy(const at::Tensor & self, const at::Scalar & other);
static at::Tensor xlogy(const at::Tensor & self, const at::Tensor & other);
static at::Tensor zeros(at::IntArrayRef size, ::std::optional<at::DimnameList> names, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static at::Tensor zeros_like(const at::Tensor & self, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static at::Tensor zeros_symint(c10::SymIntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={});
static bool _amp_foreach_non_finite_check(at::TensorList scaled_grads);
static bool equal(const at::Tensor & self, const at::Tensor & other);
static bool is_pinned(const at::Tensor & self, ::std::optional<at::Device> device=::std::nullopt);
static bool is_set_to(const at::Tensor & self, const at::Tensor & tensor);
static const at::Tensor & _conv_depthwise2d_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const ::std::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, const at::Tensor & out);
static const at::Tensor & as_strided__symint(const at::Tensor & self, c10::SymIntArrayRef size, c10::SymIntArrayRef stride, ::std::optional<c10::SymInt> storage_offset=::std::nullopt);
static const at::Tensor & resize_(const at::Tensor & self, at::IntArrayRef size, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static const at::Tensor & resize_as_(const at::Tensor & self, const at::Tensor & the_template, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt);
static int64_t get_npu_format(const at::Tensor & self);
static int64_t get_storage_size(const at::Tensor & self);
static int64_t npu_change_data_ptr(const at::Tensor & dst, const at::Tensor & src, int64_t index);
static void _amp_foreach_non_finite_check_and_unscale_(at::TensorList self, at::Tensor & found_inf, const at::Tensor & inv_scale);
static void _cummax_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim);
static void _cummin_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim);
static void _foreach_abs_(at::TensorList self);
static void _foreach_acos_(at::TensorList self);
static void _foreach_add_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_add_(at::TensorList self, at::TensorList other, const at::Scalar & alpha=1);
static void _foreach_add_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars);
static void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value=1);
static void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Tensor & scalars);
static void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars);
static void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value=1);
static void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Tensor & scalars);
static void _foreach_asin_(at::TensorList self);
static void _foreach_atan_(at::TensorList self);
static void _foreach_ceil_(at::TensorList self);
static void _foreach_clamp_max_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_clamp_max_(at::TensorList self, at::TensorList other);
static void _foreach_clamp_max_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_clamp_min_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_clamp_min_(at::TensorList self, at::TensorList other);
static void _foreach_clamp_min_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_copy_(at::TensorList self, at::TensorList src, bool non_blocking=false);
static void _foreach_cos_(at::TensorList self);
static void _foreach_cosh_(at::TensorList self);
static void _foreach_div_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_div_(at::TensorList self, at::TensorList other);
static void _foreach_div_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_erf_(at::TensorList self);
static void _foreach_erfc_(at::TensorList self);
static void _foreach_exp_(at::TensorList self);
static void _foreach_expm1_(at::TensorList self);
static void _foreach_floor_(at::TensorList self);
static void _foreach_frac_(at::TensorList self);
static void _foreach_lerp_(at::TensorList self, at::TensorList tensors1, at::TensorList weights);
static void _foreach_lerp_(at::TensorList self, at::TensorList tensors1, const at::Scalar & weight);
static void _foreach_log10_(at::TensorList self);
static void _foreach_log1p_(at::TensorList self);
static void _foreach_log2_(at::TensorList self);
static void _foreach_log_(at::TensorList self);
static void _foreach_maximum_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_maximum_(at::TensorList self, at::TensorList other);
static void _foreach_maximum_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_minimum_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_minimum_(at::TensorList self, at::TensorList other);
static void _foreach_minimum_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_mul_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_mul_(at::TensorList self, at::TensorList other);
static void _foreach_mul_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_neg_(at::TensorList self);
static void _foreach_pow_(at::TensorList self, at::ArrayRef<at::Scalar> exponent);
static void _foreach_pow_(at::TensorList self, at::TensorList exponent);
static void _foreach_pow_(at::TensorList self, const at::Scalar & exponent);
static void _foreach_reciprocal_(at::TensorList self);
static void _foreach_round_(at::TensorList self);
static void _foreach_sigmoid_(at::TensorList self);
static void _foreach_sign_(at::TensorList self);
static void _foreach_sin_(at::TensorList self);
static void _foreach_sinh_(at::TensorList self);
static void _foreach_sqrt_(at::TensorList self);
static void _foreach_sub_(at::TensorList self, at::ArrayRef<at::Scalar> scalars);
static void _foreach_sub_(at::TensorList self, at::TensorList other, const at::Scalar & alpha=1);
static void _foreach_sub_(at::TensorList self, const at::Scalar & scalar);
static void _foreach_tan_(at::TensorList self);
static void _foreach_tanh_(at::TensorList self);
static void _foreach_trunc_(at::TensorList self);
static void _foreach_zero_(at::TensorList self);
static void _fused_adamw_(at::TensorList self, at::TensorList grads, at::TensorList exp_avgs, at::TensorList exp_avg_sqs, at::TensorList max_exp_avg_sqs, at::TensorList state_steps, double lr, double beta1, double beta2, double weight_decay, double eps, bool amsgrad, bool maximize, const ::std::optional<at::Tensor> & grad_scale={}, const ::std::optional<at::Tensor> & found_inf={});
static void npu_advance_step_flashattn(at::Tensor & input_tokens, const at::Tensor & sampled_token_ids, at::Tensor & input_positions, at::Tensor & seq_lens, at::Tensor & slot_mapping, const at::Tensor & block_tables, int64_t num_seqs, int64_t num_queries, int64_t block_size);
static void npu_prefetch(const at::Tensor & self, const ::std::optional<at::Tensor> & dependency, int64_t max_size, int64_t offset=0);
static void npu_scatter_list_(at::TensorList self, const at::Tensor & indices, const at::Tensor & updates, const ::std::optional<at::Tensor> & mask={}, c10::string_view reduce="update", int64_t axis=-2);
static void record_stream(at::Tensor & self, at::Stream s);

};
} // namespace native
} // namespace at_npu
