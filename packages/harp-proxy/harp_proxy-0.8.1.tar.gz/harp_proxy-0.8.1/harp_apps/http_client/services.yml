services:
  # Main http client service, using httpx
  - name: "http_client"
    type: [!cfg "type", "httpx.AsyncClient"]
    defaults:
      transport: !ref "http_client.proxy_transport"
    arguments: [!cfg "arguments", {}]

  # Proxy filter, decorating the regular http transport
  - name: "http_client.proxy_transport"
    type: [!cfg "proxy_transport.type", "harp_apps.http_client.transport.AsyncFilterableTransport"]
    defaults:
      - transport: !ref "http_client.transport"
    arguments: [!cfg "proxy_transport.arguments", {}]

  # Default httpx transport implementation, handling the actual http requests
  - name: "http_client.transport"
    type: [!cfg "transport.type", "httpx.AsyncHTTPTransport"]
    arguments: [!cfg "transport.arguments", {}]

  # Cache implementation, using hishel, if enabled in config (default)
  - condition: [!cfg "cache.enabled", !!bool "true"]
    services:
      # Override http_client with cache transport
      - name: "http_client"
        override: "merge"
        defaults:
          transport: !ref "http_client.cache.transport"

      # Caching transport decorator, wrapping the proxy transport
      - name: "http_client.cache.transport"
        type: [!cfg "cache.transport.type", "hishel.AsyncCacheTransport"]
        defaults:
          transport: !ref "http_client.proxy_transport"
          storage: !ref "http_client.cache.storage"
          controller: !ref "http_client.cache.controller"
        arguments: [!cfg "cache.transport.arguments", {}]

      # Caching controller, responsible for determining what is cacheable
      - name: "http_client.cache.controller"
        type: [!cfg "cache.controller.type", "hishel.Controller"]
        arguments: [!cfg "cache.controller.arguments", {}]

      # Cache storage implementation, a.k.a how to store and retrieve cache data
      - name: "http_client.cache.storage"
        base: [!cfg "cache.storage.base", "hishel.AsyncBaseStorage"]
        type: [!cfg "cache.storage.type", "harp_apps.http_client.contrib.hishel.storages.AsyncStorage"]
        defaults:
          storage: !ref ["storage.blobs", "http_client.fallback_blob_storage"]
        arguments: [!cfg "cache.storage.arguments", {}]

      # Fallback blob storage, used by the cache storage if no other storage is available
      - name: "http_client.fallback_blob_storage"
        type: harp_apps.storage.services.blob_storages.memory.MemoryBlobStorage
