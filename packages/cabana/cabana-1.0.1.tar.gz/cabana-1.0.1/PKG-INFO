Metadata-Version: 2.2
Name: cabana
Version: 1.0.1
Summary: Collagen fibre analyser for quantifying collagen fibre architecture in IHC and fluorescence microscopy images.
Home-page: https://github.com/lxfhfut/cabana.git
Author: Gavin Lin
Author-email: x.lin@garvan.org.au
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: brotli
Requires-Dist: colorlog
Requires-Dist: imutils
Requires-Dist: jaraco.collections
Requires-Dist: jax-metal
Requires-Dist: mouseinfo
Requires-Dist: napari
Requires-Dist: notebook
Requires-Dist: numba
Requires-Dist: ome-types
Requires-Dist: opencv-python
Requires-Dist: pip-chill
Requires-Dist: pyconify
Requires-Dist: pygetwindow
Requires-Dist: pymsgbox
Requires-Dist: pyobjc
Requires-Dist: pyopengl-accelerate
Requires-Dist: pyqt5
Requires-Dist: pyscreeze
Requires-Dist: pytweening
Requires-Dist: ridge-detector
Requires-Dist: scikit-learn
Requires-Dist: seaborn
Requires-Dist: seaborn-image
Requires-Dist: streamlit
Requires-Dist: torchaudio
Requires-Dist: torchvision
Requires-Dist: twine
Requires-Dist: unicodedata2
Requires-Dist: zarr
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: summary

## Instructions

This program is developed for analyzing the microscopic images of collagen fibre. Please follow the below instructions to run the program:

[//]: # (1. When running the program for the first time, launch "Anaconda Prompt" &#40;move the mouse to the Windows Icon &#40;lower left&#41;, type "Anaconda" and select "Anaconda Prompt". A command window named "Anaconda Prompt" will show up&#41; and execute the "conda init" in the command window.)

[//]: # (2. Copy the "TWOMBLI" folder located in "C:\Program Files\Cabana\" to your personal user directory, such as "C:\Users\your_user_name\Documents", so that you will have your own copy of TWOMBLI and associated parameter files, which you can modify freely.)

[//]: # (3. There are 3 folders inside "TWOMBLI": 'Programs' folder containing 'Twombli_v4.ijm' and 3 parameter files, 'Input' folder used for storing images to be analyzed, and 'Output' folder used for storing analysis results.)

[//]: # (4. Copy the "Cabana" shortcut located in "C:\Program Files\Cabana" to your desktop and launch the program by double-clicking the icon. Once launched, it will sequentially ask for the locations of the 'Programs', 'Input', and 'Output' and the analysis will commence. The output of the analysis will be stored in subfolders within the 'Output' folder:)

[//]: # ()
[//]: # (   * **Eligible**: stores the images to be analyzed after the removal over-sized images. The 'Ignored_images.txt' file inside this subfolder recordes the names of the over-sized images that have been ignored.)

[//]: # (	* **Bins**: stores the binary masks resulted from RoI extraction. The RoI regions are highlighted in white while backgrounds are highlighted in black.)

[//]: # (	* **ROIs**: stores the extracted RoIs.)

[//]: # (	* **Masks**: this subfolder stores the results of ridge detection, anamorf, and gap analysis &#40;in the 'GapAnalysis' folder&#41;. )

[//]: # (	* **Masks/GapAnalysis**: this subfolder stores the gap analysis outcomes, comprising two output images for each image. One image features red circles, visualizing all gaps, irrespective of whether they occur between collagen fibers. The other image shows green circles depicting gaps within collagen fiber areas.	)

[//]: # (	)
[//]: # (	* **Ridges**: stores the visualization results of ridge detection in comparison to the original image.)

[//]: # (	* **Roads**: stores the ridge detection results with estimated width.)

[//]: # (	* **HDM**: stores the high density matrix areas generated by Twombli.)

[//]: # (	* **Twombli\_Results\_Final.csv**: contains all the resultant image statistics. )

[//]: # (	)
[//]: # (	)
[//]: # (## Parameter Settings)

[//]: # ()
[//]: # (It consists of two main components sequentially applied to the image:)

[//]: # ()
[//]: # (1. **Region of Interest &#40;RoI&#41; extraction**. This component aims to extract the collagen fibre areas in an image from cluttered background based on color and other low-level features. It relies on a self-supervised semantic segmenter based on convolutional neural networks to group semantically similar neighboring pixels. The mean color of the pixels in the same segment will be compared with a user-specified threshold to determine whether the segment is the region of interest. Its parameters can be specified in 'SegmenterParameters.txt':)

[//]: # ()
[//]: # (	- **Number of Labels**: the number of labels for semantic segmentation. It controls the level of granularity of segmentation. A higher number of labels will more likely result in segments of smaller size. The default value is 48.)

[//]: # ()
[//]: # (	- **Max Iterations**: the maximal number of iterations for semantic segmentation. This value should be large encough to generate reliable segmentation results but not too high to group all pixels into a single segment. The default value is 30.)

[//]: # (	)
[//]: # (	- **Normalized Hue Value**: the normalized hue value in [0,1] for the color of interest in HSB/HSV color space. The typical hue values for green, blue, and red color are 0.33, 0.66, and 1.0, respectively.)

[//]: # (	)
[//]: # (	- **Color Threshold**: color threshold used to determine RoI. Only segments with a mean color greater than this threshold will be extracted as RoI. The default value is 0.2.)

[//]: # (	)
[//]: # (	- **Min Size**: the minimal size of segments. Any segment with a size smaller than this parameter will be ignored. The default value is 64.)

[//]: # (	)
[//]: # (	- **Max Size**: the maximum allowable image size. Any image with a size larger than the *square* of this parameter will be ignored by the program. The default value is 2048.)

[//]: # (	)
[//]: # (	- **Mode**: Three modes are supported. "segmentation": only segmentation is performed, "twombli": image analysis is applied to the original image &#40;not regions of interests output by segmentation&#41;, and "both": image analysis is applied to the region of interest, i.e. both segmentation and twombli will be executed.)

[//]: # (	)
[//]: # (2. **Twombli**. This component aims for image quantification using Fiji plugins including [*Ridge Detection*]&#40;https://imagej.net/plugins/ridge-detection&#41;, *[Anamorf]&#40;https://github.com/djpbarry/AnaMorf/wiki&#41;*, and optional *[Gap Analysis]&#40;https://imagej.net/plugins/max-inscribed-circles&#41;*. The parameters of Anamorf can be specified in 'AnamorfProperties.xml', while those of Ridge Detection and the optional gap analysis can be specified in 'TwombliParameters.txt'. Please refer to this [doc]&#40;https://github.com/wershofe/TWOMBLI/blob/master/TWOMBLI_v1/TwombliDocumentation.docx&#41; for more details about parameter settings. Special attention is required for the following parameters:)

[//]: # ()
[//]: # (	* **Dark Line**: a boolean value. If it is specified as 0 &#40;false&#41;, the program assumes that fibres are light on a dark background. Otherwise, the program assumes that matrix fibres are dark on a light background.)

[//]: # (	* **Contrast Saturation**: a value in [0,1] shows the percent of pixels that will be saturated for constrast enhancement.)

[//]: # (	* **Min Line Width $\omega_{min}$**: the minimum ridge/line width in pixels that the ridge detection algorithm can detect. The line width &#40;$\omega$&#41; is used to estimate the 'Sigma' &#40;$\sigma$&#41; parameter of Gaussian filtering kernel: $\sigma=\frac{\omega}{2\sqrt{3}} +0.5$.)

[//]: # (	* **Max Line Width $\omega_{max}$**: the maximum ridge/line width in pixels that the ridege detection algorithm can detect. Twombli runs ridge detection repeatedly with every value in $[\omega_{min}, \omega_{max}]$ and takes the union of the detected ridges. **Setting a large line width &#40;e.g., >15&#41; gives rise to the chance of getting 'straight line artefacts', which are caused by the small &#40;close to zero&#41; upper threshold of filtering response.**)

[//]: # (	* **Line Width Step**: This parameter controls the sampling factor for line widths in [$\omega_{min}$, $\omega_{max}$]. It allows for increasing line width with a step larger than 1. For instance, if you want to detect ridges with multiple line widths 5, 7, and 9, you can specify line width step to 2 for $\omega_{min}=7$, $\omega_{max}=9$. The default value is 1, which means all line widths in [$\omega_{min}$, $\omega_{max}$] will be used for ridge detection.)

[//]: # (	* **Low Constrast $b_{l}$**: the lowest grayscale value of the line. This parameter is used to estimate the lower threshold &#40;$T_L$&#41; for filtering response: $T_L = \frac{0.17\omega b_l}{\sqrt{2\pi}\sigma^3}e^{-\frac{\omega^2}{8\sigma^2}}$. Line points with a response smaller as $T_L$ are rejected.)

[//]: # (	* **High Constrast $b_{u}$**: the highest grayscale value of the line. This parameter is used to estimate the upper threshold &#40;$T_U$&#41; for filtering response: $T_U = \frac{0.17\omega b_u}{\sqrt{2\pi}\sigma^3}e^{-\frac{\omega^2}{8\sigma^2}}$. Line points with a response larger as $T_U$ are accepted. Note that if Dark Line is set to 1 &#40;true&#41;, $b_u$ and $b_l$ will be calculated as $255-b_l$ and $255-b_u$, respectively.)

[//]: # (	* **Min/Max Curvature Window**: Towmbli quantifies the curvature of ridges/lines in curvature windows bounded by the minimum and maximum curvature windows with a step of 10.)

[//]: # (	* **Minimum Branch Length**: Any line/ridge with a lenght smaller than this value are ignored.)

[//]: # (	* **Minimum Gap Diameter**: the minimal gap diameter for gap analysis. *If it is specified a value no greater than 0, no gap analysis will be performed*.)
