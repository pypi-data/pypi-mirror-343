# Multi-stage build for {{ project_name }}

# Stage 1: Python base with shared dependencies
FROM python:3.10-slim AS python-base
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv" \
    APP_HOME="/app"
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# Stage 2: Builder stage for dependencies
FROM python-base as builder-base
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

# Copy only dependencies files to cache them in a layer
WORKDIR $PYSETUP_PATH
COPY poetry.lock pyproject.toml ./

# Install runtime deps
RUN poetry install --no-dev

# Stage 3: Development stage with dev dependencies
FROM builder-base as development
ENV FASTAPI_ENV=development

# Install dev dependencies
RUN poetry install

# Set work directory
WORKDIR $APP_HOME

# Copy project
COPY . .

# Run the application with hot reload
CMD ["poetry", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Stage 4: Production stage
FROM python-base as production
ENV FASTAPI_ENV=production

# Create a non-root user to run the app
RUN addgroup --system --gid 1001 app && \
    adduser --system --uid 1001 --gid 1001 --no-create-home app

# Copy dependencies from builder
COPY --from=builder-base $VENV_PATH $VENV_PATH

# Set work directory
WORKDIR $APP_HOME

# Copy project
COPY . .

# Give app user ownership
RUN chown -R app:app $APP_HOME

# Switch to app user
USER app

# Run the application
CMD ["gunicorn", "main:app", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]