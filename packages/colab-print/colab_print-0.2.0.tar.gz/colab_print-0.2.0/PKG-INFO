Metadata-Version: 2.4
Name: colab-print
Version: 0.2.0
Summary: Enhanced display utilities for Jupyter/Colab notebooks with customizable styles
Project-URL: Homepage, https://github.com/alaamer12/colab-print
Project-URL: Documentation, https://github.com/alaamer12/colab-print#readme
Project-URL: Issues, https://github.com/alaamer12/colab-print/issues
Author-email: alaamer12 <ahmedmuhmmed239@gmail.com>
Maintainer-email: alaamer12 <ahmedmuhmmed239@gmail.com>
License: MIT
License-File: LICENSE
Keywords: colab,data-science,dataframe,display,formatting,html,ipython,jupyter,notebook,output,pandas,presentation,rich-text,styling,tables,visualization
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: IPython
Classifier: Framework :: Jupyter
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Visualization
Requires-Python: >=3.8
Requires-Dist: ipython>=7.0.0
Requires-Dist: pandas>=1.0.0
Description-Content-Type: text/markdown

# Colab Print

[![PyPI version](https://img.shields.io/pypi/v/colab-print.svg)](https://pypi.org/project/colab-print/)
[![Python versions](https://img.shields.io/pypi/pyversions/colab-print.svg)](https://pypi.org/project/colab-print/)
[![License](https://img.shields.io/github/license/alaamer12/colab-print.svg)](https://github.com/alaamer12/colab-print/blob/main/LICENSE)

**Colab Print** is a Python library that enhances the display capabilities of Jupyter and Google Colab notebooks, providing beautiful, customizable HTML outputs for text, lists, dictionaries, tables, and pandas DataFrames.

## Features

- üé® **Rich Text Styling** - Display text with predefined styles or custom CSS
- üìä **Beautiful DataFrame Display** - Present pandas DataFrames with extensive styling options
- üìë **Customizable Tables** - Create HTML tables with headers, rows, and custom styling
- üìú **Formatted Lists** - Display Python lists and tuples as ordered or unordered HTML lists.
- üìñ **Readable Dictionaries** - Render dictionaries as structured definition lists.
- üé≠ **Extensible Themes** - Use built-in themes or create your own custom styles
- üìè **Smart Row/Column Limiting** - Automatically display large DataFrames with sensible limits
- üîç **Cell Highlighting** - Highlight specific rows, columns, or individual cells in tables and DataFrames
- üîÑ **Graceful Fallbacks** - Works even outside Jupyter/IPython environments

## Installation

```bash
pip install colab-print
```

## Quick Start

```python
from colab_print import Printer
import pandas as pd

# Create a printer with default styles
printer = Printer()

# Display styled text
printer.display("Hello, World!", style="highlight")

# Display a list
my_list = ['apple', 'banana', ['nested', 'item'], 'cherry']
printer.display_list(my_list, ordered=True, style="info")

# Display a dictionary
my_dict = {
    'name': 'Alice', 
    'age': 30, 
    'address': {'street': '123 Main St', 'city': 'Anytown'}
}
printer.display_dict(my_dict, style="success")

# Display a simple table
headers = ["Name", "Age", "City"]
rows = [
    ["Alice", 28, "New York"],
    ["Bob", 34, "London"],
    ["Charlie", 22, "Paris"]
]
printer.display_table(headers, rows, style="default")

# Display a pandas DataFrame with styling
df = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [28, 34, 22],
    'City': ['New York', 'London', 'Paris']
})
printer.display_df(df, 
                  highlight_cols=['Name'],
                  highlight_cells={(0, 'Age'): "background-color: #FFEB3B;"},
                  caption="Sample DataFrame")
```

## Styling Options

### Predefined Styles

- `default` - Clean, professional styling
- `highlight` - Stand-out text with emphasis
- `info` - Informational blue text
- `success` - Positive green message
- `warning` - Attention-grabbing yellow alert
- `error` - Critical red message
- `muted` - Subtle gray text

### Custom Styling

You can add your own styles:

```python
printer = Printer()
printer.add_style("custom", "color: purple; font-size: 20px; font-weight: bold;")
printer.display("Custom styled text", style="custom")
```

## Display Methods

- `printer.display(text, style="default", **inline_styles)`: Displays styled text.
- `printer.display_list(items, ordered=False, style="default", item_style=None, **inline_styles)`: Displays lists/tuples.
- `printer.display_dict(data, style="default", key_style=None, value_style=None, **inline_styles)`: Displays dictionaries.
- `printer.display_table(headers, rows, style="default", **table_options)`: Displays basic tables.
- `printer.display_df(df, style="default", **df_options)`: Displays pandas DataFrames with many options.

## DataFrame Display Options

The `display_df` method supports numerous customization options:

```python
printer.display_df(df,
                  style='default',           # Base style
                  max_rows=20,               # Max rows to display
                  max_cols=10,               # Max columns to display
                  precision=2,               # Decimal precision for floats
                  header_style="...",        # Custom header styling
                  odd_row_style="...",       # Custom odd row styling
                  even_row_style="...",      # Custom even row styling
                  index=True,                # Show index
                  width="100%",              # Table width
                  caption="My DataFrame",    # Table caption
                  highlight_cols=["col1"],   # Highlight columns
                  highlight_rows=[0, 2],     # Highlight rows
                  highlight_cells={(0,0): "..."}, # Highlight specific cells
                  font_size="14px",          # Custom font size for all cells
                  text_align="center")       # Text alignment for all cells
```

## Advanced Usage

### Creating Custom Themes

```python
custom_themes = {
    'dark': 'color: white; background-color: #333; font-size: 16px;',
    'fancy': 'color: #8A2BE2; font-family: "Brush Script MT", cursive; font-size: 20px;'
}

printer = Printer(additional_styles=custom_themes)
printer.display("Dark theme", style="dark")
printer.display("Fancy theme", style="fancy")
```

### Handling Non-Notebook Environments

The library gracefully handles non-IPython environments by printing fallback text representations:

```python
# This will work in regular Python scripts
printer.display_list([1, 2, 3])
printer.display_dict({'a': 1})
printer.display_df(df)
```

## Full Examples

For a comprehensive demonstration of all features, please see the example script:

[example.py](https://github.com/alaamer12/colab-print/blob/main/example.py)

This script covers:
- Text, List, Dictionary, Table, and DataFrame display
- Using built-in styles and inline styles
- Adding custom styles
- Creating a Printer instance with custom themes
- Highlighting options for DataFrames
- Fallback behavior notes (though the script runs outside a notebook)

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
