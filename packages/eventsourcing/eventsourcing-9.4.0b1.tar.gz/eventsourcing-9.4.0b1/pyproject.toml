[tool.poetry]
name = "eventsourcing"
version = "9.4.0b1"

description = "Event sourcing in Python"
authors = [
    "John Bywater <john.bywater@appropriatesoftware.net>",
]
license = "BSD 3-Clause"
classifiers = [
#    "Development Status :: 3 - Alpha",
    "Development Status :: 4 - Beta",
#    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
readme = "README.md"
homepage = "https://github.com/pyeventsourcing/eventsourcing"
repository = "https://github.com/pyeventsourcing/eventsourcing"
include = ["eventsourcing/py.typed"]
keywords=[
    "event sourcing",
    "event store",
    "domain driven design",
    "domain-driven design",
    "ddd",
    "cqrs",
    "cqs",
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0,!=3.9.0,!=3.9.1"
typing_extensions = "*"
pycryptodome = { version = "~3.22", optional = true }
cryptography = { version = "~44.0", optional = true }
psycopg = { version = "<=3.2.99999", optional = true, extras=["pool"]}

[tool.poetry.extras]
crypto = ["pycryptodome"]
cryptography = ["cryptography"]
postgres = ["psycopg"]

[tool.poetry.group.dev.dependencies]
black = { version = "*", allow-prereleases = true }
coverage = "^7.2.7"
isort = "*"
mypy = "*"
ruff = "^0.1.14"
psycopg = { version = "<=3.2.99999", extras = ["pool"] }
psycopg-binary = "*"
pyright = "*"

[tool.poetry.group.docs.dependencies]
Sphinx = { version = "*"}
sphinx_rtd_theme = { version = "*"}
pydantic = { version = "~2.9"}
autodoc_pydantic = "*"
orjson = { version = "~3.10.11"}


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
preview = true
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pip-cache
  | \.poetry
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]
branch = true
source = [
    "eventsourcing"
]
relative_files = true
omit = [
    "eventsourcing/tests/*",
    "eventsourcing/examples/bankaccounts/test.py",
    "eventsourcing/examples/cargoshipping/domainmodel.py",
    "eventsourcing/examples/cargoshipping/application.py",
    "eventsourcing/examples/cargoshipping/interface.py",
    "eventsourcing/examples/cargoshipping/test.py",
    "eventsourcing/dispatch.py",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
#  # Don't complain about missing debug-only code:
#  "def __repr__",
#  "if self.debug",
#  # Don't complain about some magic methods:
#  "def __str__",
#  # Don't complain if tests don't hit defensive assertion code:
#  "raise AssertionError",
#  "raise NotImplementedError",
#  # Don't complain if non-runnable code isn't run:
#  "if 0:",
#  "if __name__ == .__main__.:",
#  # Don't complain about empty realizations
#  "pass",
#  # Don't complain about abstract methods
#  "@abc.abstractmethod"
]
#ignore_errors = true
#precision = 2
exclude_also = [
    'if TYPE_CHECKING:'
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
combine_as_imports = true
#;default_section = LOCALFOLDER
#;known_first_party = eventsourcing
#;known_standard_library = dataclasses
#;known_third_party = django
#;not_skip = __init__.py
skip = ".eggs,.pip-cache,.poetry,venv,.venv,dist"
profile = "black"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

[tool.ruff]
# Same as Black.
line-length = 88
#indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Todo: "D"
#select = ["E", "F", "W", "I", "N", "UP"]
select = [
    "ALL",
#    "RUF012",
]
ignore = [
#    "UP006",  # [*] Use `type` instead of `Type` for type annotation / Use `tuple` instead of `tuple` for type annotation / etc  <- ignore while supporting Python3.8
    "A003",  # "Class attribute `id/type` is shadowing a Python builtin
    "ANN",
    "D",
    "PT",
    "ERA",
    "COM812",
    "T201",
    "FIX",
    "S608",
    "B027",
    "ARG002",
    "I001",

    "TRY",
    "BLE",
    "SLF",
    "C901",
    "SLF",
    "TD",
    "PTH",
    "PTH",
    "DTZ005",
    "PLR0915",
    "PLR0912",
    "SLOT",
    "S101",
    "FBT002",
    "PLR0913",
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR2004", # Magic value used in comparison

]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
#docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
#docstring-code-line-length = "dynamic"

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
include = [
    "eventsourcing",
    "examples",
    "tests",
]
pythonVersion = "3.9"
typeCheckingMode = "standard"
