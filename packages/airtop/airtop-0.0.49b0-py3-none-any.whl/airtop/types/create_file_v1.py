# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .create_file_v1file_type import CreateFileV1FileType
import typing
from .create_file_v1status import CreateFileV1Status
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CreateFileV1(UniversalBaseModel):
    file_bytes: typing_extensions.Annotated[int, FieldMetadata(alias="fileBytes")] = pydantic.Field()
    """
    Size of the file in bytes
    """

    file_name: typing_extensions.Annotated[str, FieldMetadata(alias="fileName")] = pydantic.Field()
    """
    Name of the file
    """

    file_type: typing_extensions.Annotated[CreateFileV1FileType, FieldMetadata(alias="fileType")] = pydantic.Field()
    """
    Type of the file
    """

    id: str = pydantic.Field()
    """
    ID of the file
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    ID of the organization
    """

    session_ids: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="sessionIds")] = (
        pydantic.Field(default=None)
    )
    """
    IDs of the associated sessions
    """

    status: CreateFileV1Status = pydantic.Field()
    """
    Status of the file
    """

    upload_start_time: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="uploadStartTime")] = (
        pydantic.Field()
    )
    """
    Time when the file upload was started
    """

    upload_url: typing_extensions.Annotated[str, FieldMetadata(alias="uploadUrl")] = pydantic.Field()
    """
    URL to upload the file
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
