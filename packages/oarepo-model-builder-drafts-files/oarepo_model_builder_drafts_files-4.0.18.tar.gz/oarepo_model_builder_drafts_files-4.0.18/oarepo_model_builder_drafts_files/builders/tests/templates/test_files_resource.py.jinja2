
from io import BytesIO

import pytest

{{ vars.resource_config.class|generate_import }}
{{ metadata_record.resource_config.class|generate_import }}
{{ file_record.resource_config.class|generate_import }}

@pytest.fixture()
def published_id(client_with_credentials, location, headers, base_urls):
    """A published record."""
    h = headers

    # Create a draft
    res = client_with_credentials.post(
        base_urls['base_url'],
        headers=h,
        json={
            "metadata": {"title": "Test"},
        },
    )
    assert res.status_code == 201
    id_ = res.json["id"]

    # Initialize files upload
    res = client_with_credentials.post(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files", headers=h, json=[{"key": "test.pdf"}]
    )
    assert res.status_code == 201
    assert res.json["entries"][0]["key"] == "test.pdf"
    assert res.json["entries"][0]["status"] == "pending"

    # Upload a file
    res = client_with_credentials.put(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/content",
        headers={"content-type": "application/octet-stream"},
        data=BytesIO(b"testfile"),
    )
    assert res.status_code == 200

    # Commit the file
    res = client_with_credentials.post(f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/commit", headers=h)
    assert res.status_code == 200
    assert res.json["key"] == "test.pdf"
    assert res.json["status"] == "completed"

    # Publish the record
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    return id_


def test_files_publish_flow(client_with_credentials, search_clear, location, headers, base_urls):
    """Test record creation."""
    h = headers
    # Create a draft
    res = client_with_credentials.post(base_urls['base_url'], headers=h, json={"metadata": {"title": "Test"}})
    assert res.status_code == 201
    id_ = res.json["id"]

    # Initialize files upload
    res = client_with_credentials.post(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files", headers=h, json=[{"key": "test.pdf"}]
    )
    assert res.status_code == 201
    assert res.json["entries"][0]["key"] == "test.pdf"
    assert res.json["entries"][0]["status"] == "pending"

    # Upload a file
    res = client_with_credentials.put(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/content",
        headers={"content-type": "application/octet-stream"},
        data=BytesIO(b"testfile"),
    )
    assert res.status_code == 200

    # Commit the file
    res = client_with_credentials.post(f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/commit", headers=h)
    assert res.status_code == 200
    assert res.json["key"] == "test.pdf"
    assert res.json["status"] == "completed"

    # Publish the record
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    # Check published files
    res = client_with_credentials.get(f"{base_urls['base_files_url'].replace('{id}', id_)}/files", headers=h)
    assert res.status_code == 200
    assert res.json["entries"][0]["key"] == "test.pdf"
    assert res.json["entries"][0]["status"] == "completed"

    # Edit the record
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft", headers=h)
    assert res.status_code == 201

    # Publish again
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    # Check published files
    res = client_with_credentials.get(f"{base_urls['base_files_url'].replace('{id}', id_)}/files", headers=h)
    assert res.status_code == 200
    assert res.json["entries"][0]["key"] == "test.pdf"
    assert res.json["entries"][0]["status"] == "completed"


def test_metadata_only_record(client_with_credentials, search_clear, location, headers, base_urls):
    """Test record with files disabled."""
    h = headers
    # Create a draft
    res = client_with_credentials.post(
        base_urls['base_url'],
        headers=h,
        json={"metadata": {"title": "Test"}, "files": {"enabled": False}},
    )
    assert res.status_code == 201
    id_ = res.json["id"]

    # Publish the record
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    # Check published files
    res = client_with_credentials.get(f"{base_urls['base_files_url'].replace('{id}', id_)}/files", headers=h)
    assert res.status_code == 200
    assert res.json["enabled"] is False
    assert "entries" not in res.json

    # Edit the record
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft", headers=h)
    assert res.status_code == 201

    # Publish again
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    # Check published files
    res = client_with_credentials.get(f"{base_urls['base_files_url'].replace('{id}', id_)}/files", headers=h)
    assert res.status_code == 200
    assert res.json["enabled"] is False
    assert "entries" not in res.json


def test_import_files(client_with_credentials, search_clear, location, headers, published_id, base_urls):
    """Test import files from previous version."""
    h = headers
    id_ = published_id

    # New version
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/versions", headers=h)
    assert res.status_code == 201
    new_id = res.json["id"]

    # Check new version files
    res = client_with_credentials.get(f"{base_urls['base_draft_files_url'].replace('{id}', new_id)}/files", headers=h)
    assert res.status_code == 200
    assert len(res.json["entries"]) == 0

    # Import files from previous version
    # Import files from previous version
    res = client_with_credentials.post(f"{base_urls['base_url']}{new_id}/draft/actions/files-import", headers=h)
    assert res.status_code == 201
    assert res.content_type == "application/json"

    # Check new version files
    res = client_with_credentials.get(f"{base_urls['base_draft_files_url'].replace('{id}', new_id)}/files", headers=h)
    assert res.status_code == 200
    assert len(res.json["entries"]) == 1


def test_import_files_metadata_only(client_with_credentials, search_clear, location, headers, base_urls):
    """Test import files from previous version."""
    h = headers

    res = client_with_credentials.post(
        base_urls['base_url'],
        headers=h,
        json={"metadata": {"title": "Test"}, "files": {"enabled": False}},
    )
    assert res.status_code == 201
    id_ = res.json["id"]

    # Publish
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=h)
    assert res.status_code == 202

    # New version
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/versions", headers=h)
    assert res.status_code == 201
    new_id = res.json["id"]

    # Check new version files
    res = client_with_credentials.get(f"{base_urls['base_draft_files_url'].replace('{id}', new_id)}/files", headers=h)
    assert res.status_code == 200
    assert "entries" not in res.json

    # Import files from previous version
    res = client_with_credentials.post(f"{base_urls['base_url']}{new_id}/draft/actions/files-import", headers=h)
    assert res.status_code == 400


def test_import_files_no_version(client_with_credentials, search_clear, location, headers, base_urls):
    """Test import files from previous version."""
    h = headers

    res = client_with_credentials.post(
        base_urls['base_url'],
        headers=h,
        json={"metadata": {"title": "Test"}, "files": {"enabled": True}},
    )
    assert res.status_code == 201
    id_ = res.json["id"]

    # Cannot import files from a non-existing previous version
    res = client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/files-import", headers=h)
    assert res.status_code == 404

def assert_published_record_file_links(id_, generated_links, base_urls, site_hostname="127.0.0.1:5000"):
    """Compare generated links to expected links."""
    required_links = {
        {% for link_name, link in test_constants.links_record_files.items() %}
        "{{ link_name }}": f"{{ link }}",
        {% endfor %}
    }
    assert required_links.items() <= generated_links.items()

def assert_published_file_links(id_, generated_links, base_urls, site_hostname="127.0.0.1:5000"):
    """Compare generated links to expected links."""
    required_links = {
        {% for link_name, link in test_constants.links_files.items() %}
        "{{ link_name }}": f"{{ link }}",
        {% endfor %}
    }
    assert required_links.items() <= generated_links.items()

def test_published_links(
    app,
    client_with_credentials,
    input_data,
    headers,
    base_urls,
):
    res = client_with_credentials.post(base_urls['base_url'], json=input_data)
    id_ = res.json["id"]
    client_with_credentials.post(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files",
        headers=headers,
        json=[
            {"key": "test.pdf", "metadata": {"title": "Test file"}},
        ],
    )
    client_with_credentials.put(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/content",
        headers={"content-type": "application/octet-stream"},
        data=BytesIO(b"testfile"),
    )
    client_with_credentials.post(
        f"{base_urls['base_draft_files_url'].replace('{id}', id_)}/files/test.pdf/commit", headers=headers
    )
    client_with_credentials.post(f"{base_urls['base_url']}{id_}/draft/actions/publish", headers=headers)
    res = client_with_credentials.get(f"{base_urls['base_files_url'].replace('{id}', id_)}/files", headers=headers)
    assert_published_record_file_links(id_, res.json["links"], base_urls)
    assert_published_file_links(id_, res.json["entries"][0]["links"], base_urls)