# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# isort: off
# mypy: disallow-untyped-defs
#
# From Source File: /Users/runner/work/symforce/symforce/third_party/eigen_lcm/lcmtypes/eigen_lcm.lcm

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct

class VectorXd(object):
    __slots__: T.List[str] = ["rows", "data"]

    def __init__(
        self,
        rows: int=0,
        data: T.Optional[T.Sequence[float]]=None,
        _skip_initialize: bool=False,
    ) -> None:
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        self.rows: int = rows
        self.data: T.Sequence[float] = [] if data is None else data

    @staticmethod
    def from_all_fields(
        rows: int,
        data: T.Sequence[float],
    ) -> "VectorXd":
        return VectorXd(
            rows=rows,
            data=data,
        )

    @staticmethod
    def _skytype_meta() -> T.Dict[str, str]:
        return dict(
            type="struct",
            package="eigen_lcm",
            name="VectorXd",
        )

    @classmethod
    def _default(cls) -> "VectorXd":
        return cls()

    def __repr__(self) -> str:
        return "VectorXd({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, VectorXd):
            return NotImplemented
        return (
            (self.rows==other.rows) and
            (self.data==other.data)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore[assignment]

    def encode(self) -> bytes:
        buf = BytesIO()
        buf.write(VectorXd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf: T.BinaryIO) -> None:
        buf.write(VectorXd._CACHED_STRUCT_0.pack(self.rows))
        buf.write(struct.pack('>%dd' % self.rows, *self.data[:self.rows]))

    @staticmethod
    def decode(data: T.Union[bytes, T.BinaryIO]) -> "VectorXd":
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != VectorXd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return VectorXd._decode_one(buf)

    @staticmethod
    def _decode_one(buf: T.BinaryIO) -> "VectorXd":
        self = VectorXd(_skip_initialize=True)
        self.rows = VectorXd._CACHED_STRUCT_0.unpack(buf.read(4))[0]
        self.data = struct.unpack('>%dd' % self.rows, buf.read(self.rows * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents: T.List[T.Type]) -> int:
        if VectorXd in parents: return 0
        tmphash = (0x510645c6323fd42c) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint: T.Optional[bytes] = None

    @staticmethod
    def _get_packed_fingerprint() -> bytes:
        if VectorXd._packed_fingerprint is None:
            VectorXd._packed_fingerprint = struct.pack(">Q", VectorXd._get_hash_recursive([]))
        return VectorXd._packed_fingerprint

    def deepcopy(self, **kwargs: T.Any) -> "VectorXd":
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type VectorXd does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result

    _CACHED_STRUCT_0 = struct.Struct(">i")
