# This file automatically generated by skymarshal
# DO NOT MODIFY BY HAND
# fmt: off
# isort: off
# mypy: disallow-untyped-defs
#
# From Source File: /project/lcmtypes/symforce.lcm

import copy
import typing as T  # pylint: disable=unused-import

from io import BytesIO
import struct
from lcmtypes.eigen_lcm._Quaterniond import Quaterniond
from lcmtypes.eigen_lcm._Vector3d import Vector3d

class imu_integrated_measurement_delta_t(object):
    __slots__: T.List[str] = ["Dt", "DR", "Dv", "Dp"]

    def __init__(
        self,
        Dt: float=0.0,
        DR: T.Optional[Quaterniond]=None,
        Dv: T.Optional[Vector3d]=None,
        Dp: T.Optional[Vector3d]=None,
        _skip_initialize: bool=False,
    ) -> None:
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
        self.Dt: float = Dt
        self.DR: Quaterniond = Quaterniond._default() if DR is None else DR
        self.Dv: Vector3d = Vector3d._default() if Dv is None else Dv
        self.Dp: Vector3d = Vector3d._default() if Dp is None else Dp

    @staticmethod
    def from_all_fields(
        Dt: float,
        DR: Quaterniond,
        Dv: Vector3d,
        Dp: Vector3d,
    ) -> "imu_integrated_measurement_delta_t":
        return imu_integrated_measurement_delta_t(
            Dt=Dt,
            DR=DR,
            Dv=Dv,
            Dp=Dp,
        )

    @staticmethod
    def _skytype_meta() -> T.Dict[str, str]:
        return dict(
            type="struct",
            package="sym",
            name="imu_integrated_measurement_delta_t",
        )

    @classmethod
    def _default(cls) -> "imu_integrated_measurement_delta_t":
        return cls()

    def __repr__(self) -> str:
        return "imu_integrated_measurement_delta_t({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, imu_integrated_measurement_delta_t):
            return NotImplemented
        return (
            (self.Dt==other.Dt) and
            (self.DR==other.DR) and
            (self.Dv==other.Dv) and
            (self.Dp==other.Dp)
        )
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore[assignment]

    def encode(self) -> bytes:
        buf = BytesIO()
        buf.write(imu_integrated_measurement_delta_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf: T.BinaryIO) -> None:
        buf.write(imu_integrated_measurement_delta_t._CACHED_STRUCT_0.pack(self.Dt))
        if hasattr(self.DR, '_get_packed_fingerprint'):
            assert self.DR._get_packed_fingerprint() == Quaterniond._get_packed_fingerprint()
        else:
            assert self.DR._get_hash_recursive([]) == Quaterniond._get_hash_recursive([])
        self.DR._encode_one(buf)
        if hasattr(self.Dv, '_get_packed_fingerprint'):
            assert self.Dv._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.Dv._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.Dv._encode_one(buf)
        if hasattr(self.Dp, '_get_packed_fingerprint'):
            assert self.Dp._get_packed_fingerprint() == Vector3d._get_packed_fingerprint()
        else:
            assert self.Dp._get_hash_recursive([]) == Vector3d._get_hash_recursive([])
        self.Dp._encode_one(buf)

    @staticmethod
    def decode(data: T.Union[bytes, T.BinaryIO]) -> "imu_integrated_measurement_delta_t":
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != imu_integrated_measurement_delta_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_integrated_measurement_delta_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf: T.BinaryIO) -> "imu_integrated_measurement_delta_t":
        self = imu_integrated_measurement_delta_t(_skip_initialize=True)
        self.Dt = imu_integrated_measurement_delta_t._CACHED_STRUCT_0.unpack(buf.read(8))[0]
        self.DR = Quaterniond._decode_one(buf)
        self.Dv = Vector3d._decode_one(buf)
        self.Dp = Vector3d._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents: T.List[T.Type]) -> int:
        if imu_integrated_measurement_delta_t in parents: return 0
        newparents = parents + [imu_integrated_measurement_delta_t]
        tmphash = (0x58db512f1d984d77+ Quaterniond._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)+ Vector3d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint: T.Optional[bytes] = None

    @staticmethod
    def _get_packed_fingerprint() -> bytes:
        if imu_integrated_measurement_delta_t._packed_fingerprint is None:
            imu_integrated_measurement_delta_t._packed_fingerprint = struct.pack(">Q", imu_integrated_measurement_delta_t._get_hash_recursive([]))
        return imu_integrated_measurement_delta_t._packed_fingerprint

    def deepcopy(self, **kwargs: T.Any) -> "imu_integrated_measurement_delta_t":
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type imu_integrated_measurement_delta_t does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result

    _CACHED_STRUCT_0 = struct.Struct(">d")
