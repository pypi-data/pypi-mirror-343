"use strict";(self.webpackChunkjupyterlab_hybrid_kernels=self.webpackChunkjupyterlab_hybrid_kernels||[]).push([[188],{188:(e,n,s)=>{s.r(n),s.d(n,{default:()=>M});var r=s(144),i=s(612),t=s(247),a=s(602),l=s(155);class o extends r.BaseManager{constructor(e){super(e),this._runningChanged=new a.Signal(this),this._connectionFailure=new a.Signal(this);const{kernelClient:n,kernelSpecs:s,serverSettings:i}=e;this._kernelManager=new r.KernelManager({serverSettings:i}),this._liteKernelManager=new r.KernelManager({serverSettings:{...r.ServerConnection.makeSettings(),...i,WebSocket:l.WebSocket},kernelAPIClient:n}),this._liteKernelSpecs=s,this._liteKernelManager.runningChanged.connect(((e,n)=>{const s=Array.from(this.running());this._runningChanged.emit(s)})),this._kernelManager.runningChanged.connect(((e,n)=>{const s=Array.from(this.running());this._runningChanged.emit(s)}))}dispose(){this._kernelManager.dispose(),this._liteKernelManager.dispose(),super.dispose()}get connectionFailure(){return this._connectionFailure}get isReady(){return this._liteKernelManager.isReady&&this._kernelManager.isReady}get ready(){return Promise.all([this._kernelManager.ready,this._liteKernelManager.ready]).then((()=>{}))}get runningChanged(){return this._runningChanged}connectTo(e){const n=e.model;return this._isLiteKernel(n)?this._liteKernelManager.connectTo(e):this._kernelManager.connectTo(e)}running(){const e=this._kernelManager,n=this._liteKernelManager;return function*(){yield*e.running(),yield*n.running()}()}get runningCount(){return Array.from(this.running()).length}async refreshRunning(){await Promise.all([this._kernelManager.refreshRunning(),this._liteKernelManager.refreshRunning()])}async startNew(e={},n={}){const{name:s}=e;return s&&this._liteKernelSpecs.specs?.kernelspecs[s]?this._liteKernelManager.startNew(e,n):this._kernelManager.startNew(e,n)}async shutdown(e){return this._isLiteKernel({id:e})?this._liteKernelManager.shutdown(e):this._kernelManager.shutdown(e)}async shutdownAll(){await Promise.all([this._kernelManager.shutdownAll(),this._liteKernelManager.shutdownAll()])}async findById(e){return await this._kernelManager.findById(e)||this._liteKernelManager.findById(e)}_isLiteKernel(e){const{id:n,name:s}=e,r=Array.from(this._liteKernelManager.running()),i=!!this._liteKernelSpecs.specs?.kernelspecs[s??""];return!!r.find((e=>e.id===n))||i}}class g extends r.BaseManager{constructor(e){super(e),this._isReady=!1,this._connectionFailure=new a.Signal(this),this._ready=Promise.resolve(void 0),this._specsChanged=new a.Signal(this),this._specs=null,this._kernelSpecManager=new r.KernelSpecManager({serverSettings:e.serverSettings});const{kernelSpecs:n,serverSettings:s}=e,i=new t.LiteKernelSpecClient({kernelSpecs:n,serverSettings:s});this._liteKernelSpecManager=new r.KernelSpecManager({kernelSpecAPIClient:i,serverSettings:s})}get connectionFailure(){return this._connectionFailure}get isReady(){return this._isReady}get ready(){return this._ready}get specs(){return this._specs}get specsChanged(){return this._specsChanged}async refreshSpecs(){await this._kernelSpecManager.refreshSpecs(),await this._liteKernelSpecManager.refreshSpecs();const e=this._kernelSpecManager.specs,n=this._liteKernelSpecManager.specs;if(!e&&!n)return;const s={default:e?.default??n?.default??"",kernelspecs:{...e?.kernelspecs,...n?.kernelspecs}};this._specs=s,this._specsChanged.emit(s)}}var c=s(833);class h extends r.BaseManager{constructor(e){super(e),this._runningChanged=new a.Signal(this),this._connectionFailure=new a.Signal(this);const{kernelClient:n,kernelManager:s,kernelSpecs:i,serverSettings:t}=e;this._liteKernelSpecs=i,this._sessionManager=new r.SessionManager({kernelManager:s,serverSettings:t});const l=new c.LiteSessionClient({serverSettings:t,kernelClient:n});this._liteSessionManager=new r.SessionManager({kernelManager:s,serverSettings:t,sessionAPIClient:l}),this._liteSessionManager.runningChanged.connect(((e,n)=>{const s=Array.from(this.running());this._runningChanged.emit(s)})),this._sessionManager.runningChanged.connect(((e,n)=>{const s=Array.from(this.running());this._runningChanged.emit(s)}))}dispose(){this._sessionManager.dispose(),this._liteSessionManager.dispose(),super.dispose()}get isReady(){return this._liteSessionManager.isReady&&this._sessionManager.isReady}get ready(){return Promise.all([this._sessionManager.ready,this._liteSessionManager.ready]).then((()=>{}))}get runningChanged(){return this._runningChanged}get connectionFailure(){return this._connectionFailure}connectTo(e){const n=e.model;return this._isLiteSession(n)?this._liteSessionManager.connectTo(e):this._sessionManager.connectTo(e)}running(){const e=this._sessionManager,n=this._liteSessionManager;return function*(){yield*e.running(),yield*n.running()}()}async refreshRunning(){await Promise.all([this._sessionManager.refreshRunning(),this._liteSessionManager.refreshRunning()])}async startNew(e,n={}){const s=e.kernel?.name;return s&&this._liteKernelSpecs.specs?.kernelspecs[s]?this._liteSessionManager.startNew(e,n):this._sessionManager.startNew(e,n)}async shutdown(e){return this._isLiteSession({id:e})?this._liteSessionManager.shutdown(e):this._sessionManager.shutdown(e)}async shutdownAll(){await Promise.all([this._sessionManager.shutdownAll(),this._liteSessionManager.shutdownAll()])}async stopIfNeeded(e){}async findById(e){return await this._sessionManager.findById(e)||this._liteSessionManager.findById(e)}async findByPath(e){return await this._sessionManager.findByPath(e)||this._liteSessionManager.findByPath(e)}_isLiteSession(e){return!!Array.from(this._liteSessionManager.running()).find((n=>n.id===e.id))}}s(811),s(87);const d={id:"jupyterlab-hybrid-kernels:plugin",description:"Use in-browser and regular kernels in JupyterLab",autoStart:!0,optional:[i.ISettingRegistry],activate:(e,n)=>{console.log("JupyterLab extension jupyterlab-hybrid-kernels is activated!"),n&&n.load(d.id).then((e=>{console.log("jupyterlab-hybrid-kernels settings loaded:",e.composite)})).catch((e=>{console.error("Failed to load settings for jupyterlab-hybrid-kernels.",e)}))}},u={id:"@jupyterlite/services-extension:kernel-client",description:"The client for managing in-browser kernels",autoStart:!0,requires:[t.IKernelSpecs],optional:[r.IServerSettings],provides:t.IKernelClient,activate:(e,n,s)=>new t.LiteKernelClient({kernelSpecs:n,serverSettings:s})},p={id:"jupyterlab-hybrid-kernels:kernel-manager",description:"The kernel manager plugin.",autoStart:!0,provides:r.IKernelManager,requires:[t.IKernelClient,t.IKernelSpecs],optional:[r.IServerSettings],activate:(e,n,s,r)=>(console.log("Using the HybridKernelManager"),new o({kernelClient:n,kernelSpecs:s,serverSettings:r}))},S={id:"jupyterlab-hybrid-kernels:kernel-spec-manager",description:"The kernel spec manager plugin.",autoStart:!0,provides:r.IKernelSpecManager,requires:[t.IKernelSpecs],optional:[r.IServerSettings],activate:(e,n,s)=>{console.log("Using HybridKernelSpecManager");const r=new g({kernelSpecs:n,serverSettings:s});return r.refreshSpecs(),r}},_={id:"jupyterlab-hybrid-kernels:kernel-specs",description:"The in-browser kernel spec manager plugin.",autoStart:!0,provides:t.IKernelSpecs,activate:e=>new t.KernelSpecs},y={id:"jupyterlab-hybrid-kernels:session-manager",description:"The session manager plugin.",autoStart:!0,provides:r.ISessionManager,requires:[t.IKernelClient,r.IKernelManager,t.IKernelSpecs],optional:[r.IServerSettings],activate:(e,n,s,r,i)=>(console.log("Using the HybridSessionManager"),new h({kernelClient:n,kernelManager:s,kernelSpecs:r,serverSettings:i}))},M=[d,u,p,S,_,y]}}]);