"use strict";(self.webpackChunkjupyterlab_hybrid_kernels=self.webpackChunkjupyterlab_hybrid_kernels||[]).push([[266,885],{266:(e,t,n)=>{n.r(t),n.d(t,{IServiceWorkerManager:()=>a,ServiceWorkerManager:()=>u,WORKER_NAME:()=>o});var r=n(262),i=n(626),s=n.n(i);const a=new r.Token("@jupyterlite/server:IServiceWorkerManager"),o=`${s()}`.split("/").slice(-1)[0];var c=n(335),l=n(87),g=n(602);const h=c.PageConfig.getOption("appVersion");class u{constructor(e){var t;this._onBroadcastMessage=async e=>{const{data:t,browsingContextId:n}=e.data;if(n!==this._browsingContextId)return;const r=await this._driveContentsProcessor.processDriveRequest(t);this._broadcastChannel.postMessage({response:r,browsingContextId:this._browsingContextId})},this._registration=null,this._registrationChanged=new g.Signal(this),this._ready=new r.PromiseDelegate;const n=null!==(t=e.workerUrl)&&void 0!==t?t:c.URLExt.join(c.PageConfig.getBaseUrl(),o),i=new URL(n,window.location.href),s=c.PageConfig.getOption("enableServiceWorkerCache")||"false";i.searchParams.set("enableCache",s),this._browsingContextId=r.UUID.uuid4(),this._contents=e.contents,this._broadcastChannel=new BroadcastChannel(l.DRIVE_API_PATH),this._broadcastChannel.addEventListener("message",this._onBroadcastMessage),this._driveContentsProcessor=new l.DriveContentsProcessor({contentsManager:this._contents}),this._initialize(i.href).catch(console.warn)}get registrationChanged(){return this._registrationChanged}get enabled(){return null!==this._registration}get browsingContextId(){return this._browsingContextId}get ready(){return this._ready.promise}async _initialize(e){const{serviceWorker:t}=navigator;let n=null;if(t){if(t.controller){const e=t.controller.scriptURL;await this._unregisterOldServiceWorkers(e),n=await t.getRegistration(e)||null,console.info("JupyterLite ServiceWorker was already registered")}if(!n&&t)try{console.info("Registering new JupyterLite ServiceWorker",e),n=await t.register(e),console.info("JupyterLite ServiceWorker was sucessfully registered")}catch(e){console.warn(e),console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${e}`)}this._setRegistration(n),n?(this._ready.resolve(void 0),setTimeout(this._pingServiceWorker,2e4)):this._ready.reject(void 0)}else console.warn("ServiceWorkers not supported in this browser")}async _unregisterOldServiceWorkers(e){const t=`${e}-version`,n=localStorage.getItem(t);if(n&&n!==h||!n){console.info("New version, unregistering existing service workers.");const e=await navigator.serviceWorker.getRegistrations();await Promise.all(e.map((e=>e.unregister()))),console.info("All existing service workers have been unregistered.")}localStorage.setItem(t,h)}async _pingServiceWorker(){const e=await fetch("/api/service-worker-heartbeat");"ok"===await e.text()&&setTimeout(this._pingServiceWorker,2e4)}_setRegistration(e){this._registration=e,this._registrationChanged.emit(this._registration)}}},626:()=>{const e=new BroadcastChannel("/api/drive.v1");let t=!1;async function n(){return await caches.open("precache")}async function r(e,t){return(await n()).put(e,t)}self.addEventListener("install",(function(e){self.skipWaiting(),e.waitUntil(async function(){const e=await n();return await e.addAll([])}())})),self.addEventListener("activate",(function(e){const n=new URL(location.href).searchParams;t="true"===n.get("enableCache"),e.waitUntil(self.clients.claim())})),self.addEventListener("fetch",(async function(i){const{request:s}=i,a=new URL(i.request.url);if("/api/service-worker-heartbeat"===a.pathname)return void i.respondWith(new Response("ok"));let o=null;!function(e){return e.origin===location.origin&&e.pathname.includes("/api/drive")}(a)?function(e,t){return"GET"!==e.method||null===t.origin.match(/^http/)||t.pathname.includes("/api/")}(s,a)||(o=async function(e){const{request:i}=e;if(!t)return await fetch(i);let s=await async function(e){const t=await n(),r=await t.match(e);return r&&404!==r.status?r:null}(i);return s?e.waitUntil(async function(e){const t=await fetch(e);return await r(e,t),t}(i)):(s=await fetch(i),e.waitUntil(r(i,s.clone()))),s}(i)):o=async function(t){const n=await t.json(),r=new Promise((t=>{const r=i=>{const s=i.data;if(s.browsingContextId!==n.browsingContextId)return;const a=s.response;t(new Response(JSON.stringify(a))),e.removeEventListener("message",r)};e.addEventListener("message",r)}));return e.postMessage(n),await r}(s),o&&i.respondWith(o)}))}}]);