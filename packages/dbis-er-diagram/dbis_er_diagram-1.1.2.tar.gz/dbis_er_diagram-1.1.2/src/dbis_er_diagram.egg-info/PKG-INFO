Metadata-Version: 2.4
Name: dbis-er-diagram
Version: 1.1.2
Summary: RWTH Aachen Computer Science i5/dbis assets for Lecture Datenbanken und Informationssysteme
Author-email: DBIS i5 RWTH Aachen <dbis-vl@dbis.rwth-aachen.de>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://git.rwth-aachen.de/i5/teaching/dbis/dbis-er-diagram
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: networkx
Requires-Dist: graphviz
Requires-Dist: ipython
Requires-Dist: typeguard==3.0.2
Requires-Dist: Levenshtein
Provides-Extra: test
Requires-Dist: black==23.12.1; extra == "test"
Requires-Dist: pytest; extra == "test"
Provides-Extra: build
Requires-Dist: twine==6.*; extra == "build"
Requires-Dist: build==1.*; extra == "build"
Dynamic: license-file

# DBIS ER Diagram

[![pypi](https://img.shields.io/pypi/pyversions/dbis-er-diagram)](https://pypi.org/project/dbis-er-diagram/)
[![PyPI Status](https://img.shields.io/pypi/v/dbis-er-diagram)](https://pypi.org/project/dbis-er-diagram/)

This library is used to draw entity-relationship (ER) diagrams.

The [examples](./examples/) directory contains some examples of how to use this library.

# Features
 - Create and draw ER diagrams to images.
 - Create complex ER diagrams by combining multiple smaller diagrams.
 - Compare two ER diagrams based on a graph distance measure.


# Installation
Install via pip:
```sh
pip install dbis-er-diagram
```

# Basic Usage
## Diagrams, Merging, and Drawing
A diagram is a collection of entities and relationships. We can draw an ER diagram to an image file using [Graphviz](https://graphviz.org/):

```python
from erdiagram import ER
g = ER()

# Add entities and relationships

# draw to image file "file_name.png"
digraph = g.draw()
digraph.render("file_name", format="png", view=False, cleanup=True, engine="dot")

# OR: display in jupyter notebook
g.display()
```

We are also able to merge two diagrams together. The `merge_er_diagrams` will return a new diagram that contains all the entities and relationships from both diagrams, and matches similar objects contained in both diagrams.

```python
from erdiagram import ER, merge_er_diagrams

g1 = ER()
# Add entities and relationships to g1
g2 = ER()
# Add entities and relationships to g2

g = merge_er_diagrams(g1, g2)
```

## Entity
Entities are objects - concrete or abstract items or beings that differ from other entities. Examples of these are person, car, customer, book, etc.

Entity types are sets of entities that have the same attributes. Examples of entity types are people, cars, customers, etc.

In ER diagrams, entity types are represented by rectangles.

```python
g.add_entity(
    label: str,
    is_multiple: bool = False,
    is_weak: bool = False
)
```
**Parameters:**
 - `label`: The name of the entity.
 - `is_multiple`: Whether the entity is a set of entities.
 - `is_weak`: Whether the entity is weak.

#### Examples
```python
from erdiagram import ER

g = ER()
g.add_entity("A", is_multiple=False, is_weak=False)
g.add_entity("B", is_multiple=False, is_weak=True)
g.add_entity("C", is_multiple=True, is_weak=False)
g.add_entity("D", is_multiple=True, is_weak=True)
```
![Entities](./examples/images/entities.png)

## Relationship
Often, two or more entity types are related to each other. Relationships are represented in the ER diagram by diamonds and can also have attributes.

In the lecture, two notations were presented for cardinality restrictions: the `1:n` notation and the `(min,max)` notation. These notations can be used to specify cardinalities in addition to the depicted relation, to show in what quantity the entities of one entity type are related to entities of the other entity type. These cardinalities are written on the edges between the entity type and the relationship in the ER diagram.

```python
g.add_relation(
    from_entities: dict[str, int | str | dict[str, int | str]],
    relation_label: str,
    to_entities: dict[str, int | str | dict[str, int | str]]
)
```
**Parameters:**
 - `from_relations`: A dictionary of entities that the relationship is coming from. The key is the entity label, and the value is either the cardinality directly, or a dictionary containing the cardinality and the `is_weak` flag.
 - `relation_label`: The name of the relationship.
 - `to_relations`: A dictionary of entities that the relationship is going to. The key is the entity label, and the value is either the cardinality directly, or a dictionary containing the cardinality and the `is_weak` flag.

#### Examples
```python
from erdiagram import ER

g = ER()

g.add_relation({"Person": "1"}, "owns", {"Car": "n"})
```
![Relation 1](./examples/images/relation_1.png)

<hr>

```python
from erdiagram import ER

g = ER()

g.add_entity("Contract", is_weak=True)
g.add_relation(
    {"Person": "1"},
    "owns",
    {
        "Car": "n",
        "Contract": {
            "cardinality": "n",
            "is_weak": True
        }
    }
)
```
![Relation 2](./examples/images/relation_2.png)

## Attributes
Entities and relationships can have attributes in an ER diagram. These attributes describe the characteristics of the entity or relationship, such as color, weight, and price for the "Parts" entity type. Attribute values typically come from value ranges such as INTEGER, REAL, STRING, etc., but structured values such as lists and trees are also possible.

A key is a minimal set of attributes whose values uniquely identify the associated entity or relationship among all entities or relationships of its type. Attributes are represented in the ER diagram by ellipses:

 - Attributes are connected to the corresponding entity or relationship type by undirected edges.
 - Key attributes (primary key) are (usually) underlined.

An attribute can consist of other attributes. An example of this is an address, which consists of street + house number, postal code, and city. Sub-attributes are connected to the composite attribute by undirected edges. To create a composite attribute, a list of sub-attributes must be passed as the "composedOf" parameter when creating the attribute.

A (multi-valued) attribute can contain a set of values. An example of this is the "Author" attribute of the "Book" entity type, since a book can be written by multiple authors. A multi-valued attribute is represented by an ellipse with a double border. To indicate that an attribute is multi-valued, the "is_multiple" parameter must be set to true when creating the attribute.

```python
g.add_attribute(
    parent_label: str,
    attribute_label: str,
    is_pk: bool = False,
    is_multiple: bool = False,
    is_weak: bool = False,
    composed_of: list[str] = [],
)
```
**Parameters:**
 - `parent_label`: The label of the entity or relationship that the attribute belongs to.
 - `attribute_label`: The name of the attribute.
 - `is_pk`: Whether the attribute is a primary key.
 - `is_multiple`: Whether the attribute is multivalued.
 - `is_weak`: Whether the attribute is weak.
 - `composed_of`: A list of sub-attributes that the attribute is composed of.

#### Examples
```python
from erdiagram import ER

g = ER()

g.add_entity("A")
g.add_attribute("A", "attr_a1", is_multiple=False, is_pk=False)
g.add_attribute("A", "attr_a2", is_multiple=False, is_pk=True)
g.add_attribute("A", "attr_a3", is_multiple=True, is_pk=False)
g.add_attribute("A", "attr_a4", is_multiple=True, is_pk=True)

g.add_entity("B", is_weak=True)
g.add_attribute("B", "attr_b1", is_multiple=False, is_pk=False, is_weak=True)
g.add_attribute("B", "attr_b2", is_multiple=False, is_pk=True, is_weak=True)
g.add_attribute("B", "attr_b3", is_multiple=True, is_pk=False, is_weak=True)
g.add_attribute("B", "attr_b4", is_multiple=True, is_pk=True, is_weak=True)
```
![Attribute 1](./examples/images/attribute_1.png)

<hr>

```python
from erdiagram import ER

g = ER()

g.add_entity("A")
g.add_attribute("A", "attr_a1", composed_of=["sub_a1", "sub_a2"])

g.add_entity("B", is_weak=True)
g.add_attribute("B", "attr_b2", composed_of=["sub_b1", "sub_b2"], is_weak=True, is_pk=True)
```
![Attribute 2](./examples/images/attribute_2.png)

## Specialization/Generalization Relationships
There can be inheritance relationships (isA) between entity types and specialized entity types. These are represented in the ER diagram as inverted triangles with an undirected edge to the general entity type and one or more directed edges to the specialized entity types.

There are different forms of these inheritance relationships:

 - <u>Disjoint</u>: Specializations are disjoint (an employee cannot be both an assistant and a professor). Arrows point towards the specialization.
 - <u>Non-disjoint</u>: Specializations are not disjoint (a person can be both an employee and a student). Arrows point towards the generalization.
 - <u>Total</u>: The decomposition of the generalization is complete (there are either scientific or non-scientific employees). Represented by "t" next to the isA relationship.
 - <u>Partial</u>: The union of the specialization is a proper subset of the generalization. Represented by "p" next to the isA relationship.

```python
g.add_is_a(
    super_class_label: str,
    sub_class_labels: str | list[str],
    is_total: bool,
    is_disjunct: bool,
    custom_text: Optional[str] = None,
)
```
**Parameters:**
 - `super_class_label`: The label of the general entity type.
 - `sub_class_labels`: The label of the specialized entity type, or a list of labels of the specialized entity types.
 - `is_total`: Whether the specialization is total.
 - `is_disjunct`: Whether the specialization is disjoint.
 - `custom_text`: Custom text to be displayed next to the isA relationship in place of "p" or "t" for partial or total relationships, respectively.


# Examples
```python
from erdiagram import ER

g = ER()

g.add_entity("Person")
g.add_entity("Student")
g.add_entity("Professor")
g.add_is_a("Person", ["Student", "Professor"], is_total=False, is_disjunct=True)


g.add_entity("Brightness")
g.add_entity("Light")
g.add_entity("Darkness")
g.add_is_a("Brightness", ["Light", "Darkness"], is_total=True, is_disjunct=False)
```
![IsA 1](./examples/images/is_a_1.png)

<hr>

```python
from erdiagram import ER

g = ER()

g.add_is_a(
    "Super",
    "Sub",
    is_total=True,
    is_disjunct=True,
    custom_text="Some custom text",
)
```
![IsA 2](./examples/images/is_a_2.png)

# Further Usage
_This section is relevant to developers only._

## Internal Representation
The ER diagram class `ER` internally stores the diagram as a graph, using [networkx](https://networkx.org/). In order to query the diagram, getter methods are provided that return the corresponding ER diagram objects (entities, relationships, attributes, isA relationships). The format of the returned objects are the following dictionaries:

### Entity Format
```python
{
    "id": int,
    "node_type": NodeType.ENTITY,
    "label": str,
    "is_multiple": bool,
    "is_weak": bool,
    "relation_ids_from": list[int],
    "relation_ids_to": list[int],
    "attribute_ids": list[int],
    "is_a_super_id": int,
    "is_a_sub_id": int
}
```
Where:
 - `id`: The internal id of the entity.
 - `node_type`: The type of the node. In this case, `NodeType.ENTITY`.
 - `label`: The label of the entity.
 - `is_multiple`: Whether the entity is multivalued.
 - `is_weak`: Whether the entity is weak.
 - `relation_ids_from`: A list of relation ids where the entity is the source of the relation.
 - `relation_ids_to`: A list of relation ids where the entity is the target of the relation.
 - `attribute_ids`: A list of attribute ids that are associated with the entity.
 - `is_a_super_id`: The id of the isA relationship to its superclass.
 - `is_a_sub_id`: The id of the isA relationship to its sub classes.

### IsA Format
```python
{
    "id": int,
    "node_type": NodeType.IS_A,
    "is_total": bool,
    "is_disjunct": bool,
    "custom_text": str,
    "superclass_id": int,
    "subclass_ids": list[int]
}
```
Where:
 - `id`: The id of the isA relationship.
 - `node_type`: The type of the node. In this case, NodeType.IS_A.
 - `is_total`: Whether the isA relationship is total.
 - `is_disjunct`: Whether the isA relationship is disjunct.
 - `custom_text`: A custom text to display instead of "P" or "T".
 - `superclass_id`: The id of the superclass entity.
 - `subclass_ids`: A list of ids of the subclass entities.

### Attribute Format
```python
{
    "id": int,
    "node_type": NodeType.ATTRIBUTE,
    "parent_id": int,
    "parent_type": NodeType.ENTITY | NodeType.RELATION,
    "label": str,
    "is_pk": bool,
    "is_multiple": bool,
    "is_weak": bool,
    "composed_of_attribute_ids": list[int]
}
```
Where:
 - `id`: The internal id of the attribute.
 - `node_type`: The type of the node. In this case, NodeType.ATTRIBUTE.
 - `parent_id`: The id of the parent node (either an entity or a relation).
 - `parent_type`: The type of the parent node, either NodeType.ENTITY or NodeType.RELATION.
 - `label`: The label of the attribute.
 - `is_pk`: Whether the attribute is a primary key.
 - `is_multiple`: Whether the attribute is multivalued.
 - `is_weak`: Whether the attribute is a part of a weak entity.
 - `composed_of_attribute_ids`: A list of attribute ids that this attribute is composed of (if it is a composite attribute).

### Composed Attribute Format
```python
{
    "id": int,
    "node_type": NodeType.COMPOSED_ATTRIBUTE,
    "label": str,
    "is_pk": bool,
    "is_multiple": bool,
    "is_weak": bool,
    "parent_id": int
}
```
Where:
 - `id`: The internal id of the composed attribute.
 - `node_type`: The type of the node. In this case, NodeType.COMPOSED_ATTRIBUTE.
 - `label`: The label of the composed attribute.
 - `is_pk`: Whether the composed attribute is a primary key.
 - `is_multiple`: Whether the composed attribute is multivalued.
 - `is_weak`: Whether the composed attribute is weak.
 - `parent_id`: The id of the parent attribute that the composed attribute is composed of.

### Relation Format
```python
{
    "id": int,
    "node_type": NodeType.RELATION,
    "label": str,
    "attribute_ids": list[int],
    "from_entities": {
        "entity_label": {
            "id": int,
            "cardinality": str,
            "is_weak": bool
        }
    },
    "to_entities": {
        "entity_label": {
            "id": int,
            "cardinality": str,
            "is_weak": bool
        }
    }
}
```
Where:
 - `id`: The internal id of the relation.
 - `label`: The label of the relation.
 - `node_type`: The type of the node. In this case, NodeType.RELATION.
 - `attribute_ids`: A list of attribute ids that are associated with the relation.
 - `from_entities`: A dictionary where the keys are entity `labels` and the values are dictionaries containing the following information about the entities that the relation is coming from:
	 - `id`: The id of the entity.
	 - `cardinality`: The cardinality of the entity to the relation (e.g. "1", "n").
	 - `is_weak`: Whether the entity is bound weak to this relation.
 - `to_entities`: A dictionary where the keys are entity `labels` and the values are dictionaries containing the following information about the entities that the relation is going to:
	 - `id`: The id of the entity.
	 - `cardinality`: The cardinality of the entity to the relation (e.g. "1", "n").
	 - `is_weak`: Whether the entity is bound weak to this relation.

## Grading
This library provides a method `grade_submission` to compare a submission to a (correct) solution. The method returns a grading log and the grading score. This score represents the graph distance between submission and solution (:warning: non-negative value) and may be interpreted as the amount of errors in the submission.

> Note, that `grade_submission(solution, submission)` is not necessarily equal to `grade_submission(submission, solution)`. The grading is not symmetric in order to simplify the grading process.
