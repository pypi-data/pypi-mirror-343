[project]
name = "universal-mcp"
version = "0.1.12"
description = "Universal MCP acts as a middle ware for your API applications. It can store your credentials, authorize, enable disable apps on the fly and much more."
readme = "README.md"
authors = [
    { name = "Manoj Bajaj", email = "manojbajaj95@gmail.com" }
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.11.1",
    "pydantic-settings>=2.8.1",
    "loguru>=0.7.3",
    "pyyaml>=6.0.2",
    "typer>=0.15.2",
    "keyring>=25.6.0",
    "litellm>=1.30.7",
    "rich>=14.0.0",
    "posthog>=3.24.0",
    "mcp>=1.6.0",
    "gql[all]>=3.5.2",
    "langchain-cerebras>=0.5.0",
    "langchain-google-genai>=2.1.3",
]

[project.optional-dependencies]
playground = [
    "fastapi[standard]>=0.115.12",
    "langchain-mcp-adapters>=0.0.3",
    "langgraph>=0.3.24",
    "langgraph-checkpoint-sqlite>=2.0.6",
    "streamlit>=1.44.1",
    "python-dotenv>=1.0.1",
    "langchain-openai>=0.3.12",
    "watchdog>=6.0.0",
]
dev = [
    "ruff>=0.11.4",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pyright>=1.1.398",
    "litellm>=1.30.7",
]
e2b = [
    "e2b-code-interpreter>=1.2.0",
]
firecrawl=[
    "firecrawl-py>=1.15.0",
]
serpapi = [
    "google-search-results>=2.4.2",
]
markitdown = [
    "markitdown[all]>=0.1.1",
]
fal-ai = [
    "fal-client>=0.5.9",
]
all = [
    "fastapi[standard]>=0.115.12",
    "langchain-mcp-adapters>=0.0.3",
    "langgraph>=0.3.24",
    "langgraph-checkpoint-sqlite>=2.0.6",
    "streamlit>=1.44.1",
    "python-dotenv>=1.0.1",
    "langchain-openai>=0.3.12",
    "watchdog>=6.0.0",
    "ruff>=0.11.4",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pyright>=1.1.398",
    "litellm>=1.30.7",
    "e2b-code-interpreter>=1.2.0",
    "firecrawl-py>=1.15.0",
    "google-search-results>=2.4.2",
    "markitdown[all]>=0.1.1",
    "fal-client>=0.5.9",
]
[project.scripts]
universal_mcp = "universal_mcp.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = ['E501', 'B008']

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
