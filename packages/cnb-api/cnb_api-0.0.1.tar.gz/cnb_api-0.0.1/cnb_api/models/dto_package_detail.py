# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.dto_chart_package_detail import DtoChartPackageDetail
from cnb_api.models.dto_container_package_detail import DtoContainerPackageDetail
from cnb_api.models.dto_maven_package_detail import DtoMavenPackageDetail
from cnb_api.models.dto_npm_package_detail import DtoNpmPackageDetail
from cnb_api.models.dto_ohpm_package_detail import DtoOhpmPackageDetail
from typing import Optional, Set
from typing_extensions import Self

class DtoPackageDetail(BaseModel):
    """
    DtoPackageDetail
    """ # noqa: E501
    docker: Optional[DtoContainerPackageDetail] = None
    helm: Optional[DtoChartPackageDetail] = None
    maven: Optional[DtoMavenPackageDetail] = None
    npm: Optional[DtoNpmPackageDetail] = None
    ohpm: Optional[DtoOhpmPackageDetail] = None
    __properties: ClassVar[List[str]] = ["docker", "helm", "maven", "npm", "ohpm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoPackageDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of docker
        if self.docker:
            _dict['docker'] = self.docker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of helm
        if self.helm:
            _dict['helm'] = self.helm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maven
        if self.maven:
            _dict['maven'] = self.maven.to_dict()
        # override the default output from pydantic by calling `to_dict()` of npm
        if self.npm:
            _dict['npm'] = self.npm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ohpm
        if self.ohpm:
            _dict['ohpm'] = self.ohpm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoPackageDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "docker": DtoContainerPackageDetail.from_dict(obj["docker"]) if obj.get("docker") is not None else None,
            "helm": DtoChartPackageDetail.from_dict(obj["helm"]) if obj.get("helm") is not None else None,
            "maven": DtoMavenPackageDetail.from_dict(obj["maven"]) if obj.get("maven") is not None else None,
            "npm": DtoNpmPackageDetail.from_dict(obj["npm"]) if obj.get("npm") is not None else None,
            "ohpm": DtoOhpmPackageDetail.from_dict(obj["ohpm"]) if obj.get("ohpm") is not None else None
        })
        return _obj


