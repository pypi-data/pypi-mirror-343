# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.web_branch_list_item import WebBranchListItem
from typing import Optional, Set
from typing_extensions import Self

class WebOverviewBranches(BaseModel):
    """
    WebOverviewBranches
    """ # noqa: E501
    active_branches: Optional[List[WebBranchListItem]] = None
    default_branch: Optional[WebBranchListItem] = None
    has_more_active_branch: Optional[StrictBool] = None
    has_more_stale_branch: Optional[StrictBool] = None
    has_more_yours_branch: Optional[StrictBool] = None
    initialized: Optional[StrictBool] = None
    stale_branches: Optional[List[WebBranchListItem]] = None
    yours_branches: Optional[List[WebBranchListItem]] = None
    __properties: ClassVar[List[str]] = ["active_branches", "default_branch", "has_more_active_branch", "has_more_stale_branch", "has_more_yours_branch", "initialized", "stale_branches", "yours_branches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebOverviewBranches from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_branches (list)
        _items = []
        if self.active_branches:
            for _item_active_branches in self.active_branches:
                if _item_active_branches:
                    _items.append(_item_active_branches.to_dict())
            _dict['active_branches'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_branch
        if self.default_branch:
            _dict['default_branch'] = self.default_branch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stale_branches (list)
        _items = []
        if self.stale_branches:
            for _item_stale_branches in self.stale_branches:
                if _item_stale_branches:
                    _items.append(_item_stale_branches.to_dict())
            _dict['stale_branches'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in yours_branches (list)
        _items = []
        if self.yours_branches:
            for _item_yours_branches in self.yours_branches:
                if _item_yours_branches:
                    _items.append(_item_yours_branches.to_dict())
            _dict['yours_branches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebOverviewBranches from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_branches": [WebBranchListItem.from_dict(_item) for _item in obj["active_branches"]] if obj.get("active_branches") is not None else None,
            "default_branch": WebBranchListItem.from_dict(obj["default_branch"]) if obj.get("default_branch") is not None else None,
            "has_more_active_branch": obj.get("has_more_active_branch"),
            "has_more_stale_branch": obj.get("has_more_stale_branch"),
            "has_more_yours_branch": obj.get("has_more_yours_branch"),
            "initialized": obj.get("initialized"),
            "stale_branches": [WebBranchListItem.from_dict(_item) for _item in obj["stale_branches"]] if obj.get("stale_branches") is not None else None,
            "yours_branches": [WebBranchListItem.from_dict(_item) for _item in obj["yours_branches"]] if obj.get("yours_branches") is not None else None
        })
        return _obj


