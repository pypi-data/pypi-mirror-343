# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.web_gpg_email import WebGPGEmail
from cnb_api.models.web_gpg_subkey import WebGPGSubkey
from typing import Optional, Set
from typing_extensions import Self

class WebGPGPublicKey(BaseModel):
    """
    WebGPGPublicKey
    """ # noqa: E501
    created_at: Optional[StrictStr] = None
    emails: Optional[List[WebGPGEmail]] = None
    expired_at: Optional[StrictStr] = Field(default=None, description="过期时间")
    fingerprint: Optional[StrictStr] = Field(default=None, description="公钥指纹")
    id: Optional[StrictStr] = None
    key_creation_time: Optional[StrictStr] = Field(default=None, description="密钥创建时间")
    key_id: Optional[StrictStr] = Field(default=None, description="公钥 ID")
    name: Optional[StrictStr] = Field(default=None, description="标题")
    public_key: Optional[StrictStr] = None
    subkeys: Optional[List[WebGPGSubkey]] = Field(default=None, description="子密钥指纹，当为 primary key 时与 primary_fingerprint 相同")
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["created_at", "emails", "expired_at", "fingerprint", "id", "key_creation_time", "key_id", "name", "public_key", "subkeys", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebGPGPublicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item_emails in self.emails:
                if _item_emails:
                    _items.append(_item_emails.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subkeys (list)
        _items = []
        if self.subkeys:
            for _item_subkeys in self.subkeys:
                if _item_subkeys:
                    _items.append(_item_subkeys.to_dict())
            _dict['subkeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebGPGPublicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "emails": [WebGPGEmail.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "expired_at": obj.get("expired_at"),
            "fingerprint": obj.get("fingerprint"),
            "id": obj.get("id"),
            "key_creation_time": obj.get("key_creation_time"),
            "key_id": obj.get("key_id"),
            "name": obj.get("name"),
            "public_key": obj.get("public_key"),
            "subkeys": [WebGPGSubkey.from_dict(_item) for _item in obj["subkeys"]] if obj.get("subkeys") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj


