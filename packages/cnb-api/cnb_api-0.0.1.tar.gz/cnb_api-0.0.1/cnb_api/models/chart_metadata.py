# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.chart_dependency import ChartDependency
from cnb_api.models.chart_maintainer import ChartMaintainer
from typing import Optional, Set
from typing_extensions import Self

class ChartMetadata(BaseModel):
    """
    ChartMetadata
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations are additional mappings uninterpreted by Helm, made available for inspection by other applications.")
    api_version: Optional[StrictStr] = Field(default=None, description="The API Version of this chart. Required.", alias="apiVersion")
    app_version: Optional[StrictStr] = Field(default=None, description="The version of the application enclosed inside of this chart.", alias="appVersion")
    condition: Optional[StrictStr] = Field(default=None, description="The condition to check to enable chart")
    dependencies: Optional[List[ChartDependency]] = Field(default=None, description="Dependencies are a list of dependencies for a chart.")
    deprecated: Optional[StrictBool] = Field(default=None, description="Whether or not this chart is deprecated")
    description: Optional[StrictStr] = Field(default=None, description="A one-sentence description of the chart")
    home: Optional[StrictStr] = Field(default=None, description="The URL to a relevant project page, git repo, or contact person")
    icon: Optional[StrictStr] = Field(default=None, description="The URL to an icon file.")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="A list of string keywords")
    kube_version: Optional[StrictStr] = Field(default=None, description="KubeVersion is a SemVer constraint specifying the version of Kubernetes required.", alias="kubeVersion")
    maintainers: Optional[List[ChartMaintainer]] = Field(default=None, description="A list of name and URL/email address combinations for the maintainer(s)")
    name: Optional[StrictStr] = Field(default=None, description="The name of the chart. Required.")
    sources: Optional[List[StrictStr]] = Field(default=None, description="Source is the URL to the source code of this chart")
    tags: Optional[StrictStr] = Field(default=None, description="The tags to check to enable chart")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the chart type: application or library")
    version: Optional[StrictStr] = Field(default=None, description="A SemVer 2 conformant version string of the chart. Required.")
    __properties: ClassVar[List[str]] = ["annotations", "apiVersion", "appVersion", "condition", "dependencies", "deprecated", "description", "home", "icon", "keywords", "kubeVersion", "maintainers", "name", "sources", "tags", "type", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChartMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maintainers (list)
        _items = []
        if self.maintainers:
            for _item_maintainers in self.maintainers:
                if _item_maintainers:
                    _items.append(_item_maintainers.to_dict())
            _dict['maintainers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChartMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "apiVersion": obj.get("apiVersion"),
            "appVersion": obj.get("appVersion"),
            "condition": obj.get("condition"),
            "dependencies": [ChartDependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None,
            "deprecated": obj.get("deprecated"),
            "description": obj.get("description"),
            "home": obj.get("home"),
            "icon": obj.get("icon"),
            "keywords": obj.get("keywords"),
            "kubeVersion": obj.get("kubeVersion"),
            "maintainers": [ChartMaintainer.from_dict(_item) for _item in obj["maintainers"]] if obj.get("maintainers") is not None else None,
            "name": obj.get("name"),
            "sources": obj.get("sources"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj


