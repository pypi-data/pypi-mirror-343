# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.constant_repo_display_module import ConstantRepoDisplayModule
from cnb_api.models.constant_repo_status import ConstantRepoStatus
from cnb_api.models.constant_visibility import ConstantVisibility
from cnb_api.models.convert_null_time import ConvertNullTime
from typing import Optional, Set
from typing_extensions import Self

class DtoActivityRepos(BaseModel):
    """
    DtoActivityRepos
    """ # noqa: E501
    created_at: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    display_module: Optional[ConstantRepoDisplayModule] = None
    fork_count: Optional[StrictInt] = None
    fork_target: Optional[StrictStr] = None
    forked_from: Optional[StrictStr] = None
    freeze: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    is_star: Optional[StrictBool] = None
    language: Optional[StrictStr] = Field(default=None, description="仓库程序语言，预留")
    last_updated_at: Optional[ConvertNullTime] = Field(default=None, description="最新代码更新时间")
    license: Optional[StrictStr] = None
    mark_count: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    site: Optional[StrictStr] = None
    star_count: Optional[StrictInt] = None
    status: Optional[ConstantRepoStatus] = None
    topics: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    visibility_level: Optional[ConstantVisibility] = None
    __properties: ClassVar[List[str]] = ["created_at", "description", "display_module", "fork_count", "fork_target", "forked_from", "freeze", "id", "is_star", "language", "last_updated_at", "license", "mark_count", "name", "path", "site", "star_count", "status", "topics", "updated_at", "visibility_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoActivityRepos from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "freeze",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_updated_at
        if self.last_updated_at:
            _dict['last_updated_at'] = self.last_updated_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoActivityRepos from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "display_module": obj.get("display_module"),
            "fork_count": obj.get("fork_count"),
            "fork_target": obj.get("fork_target"),
            "forked_from": obj.get("forked_from"),
            "freeze": obj.get("freeze"),
            "id": obj.get("id"),
            "is_star": obj.get("is_star"),
            "language": obj.get("language"),
            "last_updated_at": ConvertNullTime.from_dict(obj["last_updated_at"]) if obj.get("last_updated_at") is not None else None,
            "license": obj.get("license"),
            "mark_count": obj.get("mark_count"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "site": obj.get("site"),
            "star_count": obj.get("star_count"),
            "status": obj.get("status"),
            "topics": obj.get("topics"),
            "updated_at": obj.get("updated_at"),
            "visibility_level": obj.get("visibility_level")
        })
        return _obj


