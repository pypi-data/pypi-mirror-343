# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoSpecialAmount(BaseModel):
    """
    DtoSpecialAmount
    """ # noqa: E501
    compute_build_corehour: Optional[StrictInt] = None
    compute_build_desc: Optional[StrictStr] = None
    compute_build_expire: Optional[StrictStr] = None
    compute_develop_corehour: Optional[StrictInt] = None
    compute_develop_desc: Optional[StrictStr] = None
    compute_develop_expire: Optional[StrictStr] = None
    storage_git_desc: Optional[StrictStr] = None
    storage_git_expire: Optional[StrictStr] = None
    storage_git_gib: Optional[StrictInt] = None
    storage_object_desc: Optional[StrictStr] = None
    storage_object_expire: Optional[StrictStr] = None
    storage_object_gib: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["compute_build_corehour", "compute_build_desc", "compute_build_expire", "compute_develop_corehour", "compute_develop_desc", "compute_develop_expire", "storage_git_desc", "storage_git_expire", "storage_git_gib", "storage_object_desc", "storage_object_expire", "storage_object_gib"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoSpecialAmount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoSpecialAmount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compute_build_corehour": obj.get("compute_build_corehour"),
            "compute_build_desc": obj.get("compute_build_desc"),
            "compute_build_expire": obj.get("compute_build_expire"),
            "compute_develop_corehour": obj.get("compute_develop_corehour"),
            "compute_develop_desc": obj.get("compute_develop_desc"),
            "compute_develop_expire": obj.get("compute_develop_expire"),
            "storage_git_desc": obj.get("storage_git_desc"),
            "storage_git_expire": obj.get("storage_git_expire"),
            "storage_git_gib": obj.get("storage_git_gib"),
            "storage_object_desc": obj.get("storage_object_desc"),
            "storage_object_expire": obj.get("storage_object_expire"),
            "storage_object_gib": obj.get("storage_object_gib")
        })
        return _obj


