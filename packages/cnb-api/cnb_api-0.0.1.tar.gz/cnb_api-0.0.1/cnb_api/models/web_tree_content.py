# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.web_commit import WebCommit
from cnb_api.models.web_preload_file import WebPreloadFile
from cnb_api.models.web_repository import WebRepository
from cnb_api.models.web_tree_entry import WebTreeEntry
from typing import Optional, Set
from typing_extensions import Self

class WebTreeContent(BaseModel):
    """
    WebTreeContent
    """ # noqa: E501
    branch_count: Optional[StrictInt] = None
    cnb_settings: Optional[WebPreloadFile] = None
    commit_count: Optional[StrictInt] = None
    commit_count_exceeded: Optional[StrictBool] = None
    entries: Optional[List[WebTreeEntry]] = None
    file_list_exceeded: Optional[StrictBool] = None
    file_list_limit: Optional[StrictInt] = None
    has_web_trigger: Optional[StrictBool] = None
    initialized: Optional[StrictBool] = None
    is_protected: Optional[StrictBool] = Field(default=None, description="如果当前访问的是分支，那么表示是否是保护分支")
    last_commit: Optional[WebCommit] = None
    name: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    read_me: Optional[WebPreloadFile] = None
    repository: Optional[WebRepository] = None
    tag_count: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["branch_count", "cnb_settings", "commit_count", "commit_count_exceeded", "entries", "file_list_exceeded", "file_list_limit", "has_web_trigger", "initialized", "is_protected", "last_commit", "name", "path", "read_me", "repository", "tag_count", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebTreeContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cnb_settings
        if self.cnb_settings:
            _dict['cnb_settings'] = self.cnb_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_commit
        if self.last_commit:
            _dict['last_commit'] = self.last_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_me
        if self.read_me:
            _dict['read_me'] = self.read_me.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebTreeContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branch_count": obj.get("branch_count"),
            "cnb_settings": WebPreloadFile.from_dict(obj["cnb_settings"]) if obj.get("cnb_settings") is not None else None,
            "commit_count": obj.get("commit_count"),
            "commit_count_exceeded": obj.get("commit_count_exceeded"),
            "entries": [WebTreeEntry.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None,
            "file_list_exceeded": obj.get("file_list_exceeded"),
            "file_list_limit": obj.get("file_list_limit"),
            "has_web_trigger": obj.get("has_web_trigger"),
            "initialized": obj.get("initialized"),
            "is_protected": obj.get("is_protected"),
            "last_commit": WebCommit.from_dict(obj["last_commit"]) if obj.get("last_commit") is not None else None,
            "name": obj.get("name"),
            "path": obj.get("path"),
            "read_me": WebPreloadFile.from_dict(obj["read_me"]) if obj.get("read_me") is not None else None,
            "repository": WebRepository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "tag_count": obj.get("tag_count"),
            "type": obj.get("type")
        })
        return _obj


