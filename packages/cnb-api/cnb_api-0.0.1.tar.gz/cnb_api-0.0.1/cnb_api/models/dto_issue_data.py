# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.dto_creator import DtoCreator
from cnb_api.models.dto_label import DtoLabel
from typing import Optional, Set
from typing_extensions import Self

class DtoIssueData(BaseModel):
    """
    DtoIssueData
    """ # noqa: E501
    associated_pull_request_counts: Optional[StrictInt] = None
    comment_counts: Optional[StrictInt] = None
    created_time: Optional[StrictStr] = None
    creator: Optional[DtoCreator] = None
    label: Optional[List[DtoLabel]] = None
    number: Optional[StrictInt] = None
    pinned: Optional[StrictBool] = None
    priority: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    slug_freeze: Optional[StrictBool] = None
    state: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    todo_id: Optional[StrictStr] = None
    updated_time: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["associated_pull_request_counts", "comment_counts", "created_time", "creator", "label", "number", "pinned", "priority", "slug", "slug_freeze", "state", "title", "todo_id", "updated_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoIssueData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in label (list)
        _items = []
        if self.label:
            for _item_label in self.label:
                if _item_label:
                    _items.append(_item_label.to_dict())
            _dict['label'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoIssueData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associated_pull_request_counts": obj.get("associated_pull_request_counts"),
            "comment_counts": obj.get("comment_counts"),
            "created_time": obj.get("created_time"),
            "creator": DtoCreator.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "label": [DtoLabel.from_dict(_item) for _item in obj["label"]] if obj.get("label") is not None else None,
            "number": obj.get("number"),
            "pinned": obj.get("pinned"),
            "priority": obj.get("priority"),
            "slug": obj.get("slug"),
            "slug_freeze": obj.get("slug_freeze"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "todo_id": obj.get("todo_id"),
            "updated_time": obj.get("updated_time")
        })
        return _obj


