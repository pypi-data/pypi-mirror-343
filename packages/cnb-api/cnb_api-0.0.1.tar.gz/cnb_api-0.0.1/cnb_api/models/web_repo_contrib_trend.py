# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.web_contributor_trend import WebContributorTrend
from cnb_api.models.web_meta import WebMeta
from cnb_api.models.web_week import WebWeek
from typing import Optional, Set
from typing_extensions import Self

class WebRepoContribTrend(BaseModel):
    """
    WebRepoContribTrend
    """ # noqa: E501
    meta: Optional[WebMeta] = None
    repo_data: Optional[List[WebWeek]] = None
    user_total: Optional[StrictInt] = None
    users_data: Optional[List[WebContributorTrend]] = None
    week_total: Optional[StrictInt] = None
    with_line_counts: Optional[StrictBool] = Field(default=None, description="是否统计增删的行数, 默认总提交超过 10000 的仓库不统计")
    __properties: ClassVar[List[str]] = ["meta", "repo_data", "user_total", "users_data", "week_total", "with_line_counts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebRepoContribTrend from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repo_data (list)
        _items = []
        if self.repo_data:
            for _item_repo_data in self.repo_data:
                if _item_repo_data:
                    _items.append(_item_repo_data.to_dict())
            _dict['repo_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users_data (list)
        _items = []
        if self.users_data:
            for _item_users_data in self.users_data:
                if _item_users_data:
                    _items.append(_item_users_data.to_dict())
            _dict['users_data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebRepoContribTrend from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meta": WebMeta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "repo_data": [WebWeek.from_dict(_item) for _item in obj["repo_data"]] if obj.get("repo_data") is not None else None,
            "user_total": obj.get("user_total"),
            "users_data": [WebContributorTrend.from_dict(_item) for _item in obj["users_data"]] if obj.get("users_data") is not None else None,
            "week_total": obj.get("week_total"),
            "with_line_counts": obj.get("with_line_counts")
        })
        return _obj


