# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.v1_platform import V1Platform
from typing import Optional, Set
from typing_extensions import Self

class V1Descriptor(BaseModel):
    """
    V1Descriptor
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations contains arbitrary metadata relating to the targeted content.")
    artifact_type: Optional[StrictStr] = Field(default=None, description="ArtifactType is the IANA media type of this artifact.", alias="artifactType")
    data: Optional[List[StrictInt]] = Field(default=None, description="Data is an embedding of the targeted content. This is encoded as a base64 string when marshalled to JSON (automatically, by encoding/json). If present, Data can be used directly to avoid fetching the targeted content.")
    digest: Optional[StrictStr] = Field(default=None, description="Digest is the digest of the targeted content.")
    media_type: Optional[StrictStr] = Field(default=None, description="MediaType is the media type of the object this schema refers to.", alias="mediaType")
    platform: Optional[V1Platform] = Field(default=None, description="Platform describes the platform which the image in the manifest runs on.  This should only be used when referring to a manifest.")
    size: Optional[StrictInt] = Field(default=None, description="Size specifies the size in bytes of the blob.")
    urls: Optional[List[StrictStr]] = Field(default=None, description="URLs specifies a list of URLs from which this object MAY be downloaded")
    __properties: ClassVar[List[str]] = ["annotations", "artifactType", "data", "digest", "mediaType", "platform", "size", "urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Descriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Descriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "artifactType": obj.get("artifactType"),
            "data": obj.get("data"),
            "digest": obj.get("digest"),
            "mediaType": obj.get("mediaType"),
            "platform": V1Platform.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "size": obj.get("size"),
            "urls": obj.get("urls")
        })
        return _obj


