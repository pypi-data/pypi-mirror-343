# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.constant_visibility import ConstantVisibility
from cnb_api.models.dto_users import DtoUsers
from typing import Optional, Set
from typing_extensions import Self

class DtoResourceRegistry(BaseModel):
    """
    DtoResourceRegistry
    """ # noqa: E501
    artifact_policy: Optional[StrictStr] = 'all'
    created_at: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    freeze: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    last_push_time: Optional[StrictStr] = None
    last_push_user: Optional[DtoUsers] = None
    name: Optional[StrictStr] = None
    overwrite_policy: Optional[StrictStr] = 'forbid'
    path: Optional[StrictStr] = None
    pkg_count: Optional[StrictInt] = None
    updated_at: Optional[StrictStr] = None
    used_size: Optional[StrictInt] = None
    visibility_level: Optional[ConstantVisibility] = None
    __properties: ClassVar[List[str]] = ["artifact_policy", "created_at", "description", "freeze", "id", "kind", "last_push_time", "last_push_user", "name", "overwrite_policy", "path", "pkg_count", "updated_at", "used_size", "visibility_level"]

    @field_validator('artifact_policy')
    def artifact_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'snapshot', 'release']):
            raise ValueError("must be one of enum values ('all', 'snapshot', 'release')")
        return value

    @field_validator('overwrite_policy')
    def overwrite_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['forbid', 'allow']):
            raise ValueError("must be one of enum values ('forbid', 'allow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoResourceRegistry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "freeze",
            "pkg_count",
            "used_size",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_push_user
        if self.last_push_user:
            _dict['last_push_user'] = self.last_push_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoResourceRegistry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifact_policy": obj.get("artifact_policy") if obj.get("artifact_policy") is not None else 'all',
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "freeze": obj.get("freeze"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "last_push_time": obj.get("last_push_time"),
            "last_push_user": DtoUsers.from_dict(obj["last_push_user"]) if obj.get("last_push_user") is not None else None,
            "name": obj.get("name"),
            "overwrite_policy": obj.get("overwrite_policy") if obj.get("overwrite_policy") is not None else 'forbid',
            "path": obj.get("path"),
            "pkg_count": obj.get("pkg_count"),
            "updated_at": obj.get("updated_at"),
            "used_size": obj.get("used_size"),
            "visibility_level": obj.get("visibility_level")
        })
        return _obj


