# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.constant_access_role import ConstantAccessRole
from cnb_api.models.constant_user_type import ConstantUserType
from cnb_api.models.dto_users import DtoUsers
from typing import Optional, Set
from typing_extensions import Self

class DtoMember4GetAllMembersByRoot(BaseModel):
    """
    DtoMember4GetAllMembersByRoot
    """ # noqa: E501
    access_level: Optional[ConstantAccessRole] = None
    avatar: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    freeze: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    inviter: Optional[DtoUsers] = None
    join_time: Optional[StrictStr] = None
    nickname: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    type: Optional[ConstantUserType] = None
    user_freeze: Optional[StrictBool] = None
    username: Optional[StrictStr] = None
    verified: Optional[StrictInt] = Field(default=None, description="认证类型")
    verified_expire_in: Optional[StrictStr] = Field(default=None, description="认证过期时间")
    __properties: ClassVar[List[str]] = ["access_level", "avatar", "created_at", "email", "freeze", "id", "inviter", "join_time", "nickname", "path", "type", "user_freeze", "username", "verified", "verified_expire_in"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoMember4GetAllMembersByRoot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inviter
        if self.inviter:
            _dict['inviter'] = self.inviter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoMember4GetAllMembersByRoot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_level": obj.get("access_level"),
            "avatar": obj.get("avatar"),
            "created_at": obj.get("created_at"),
            "email": obj.get("email"),
            "freeze": obj.get("freeze"),
            "id": obj.get("id"),
            "inviter": DtoUsers.from_dict(obj["inviter"]) if obj.get("inviter") is not None else None,
            "join_time": obj.get("join_time"),
            "nickname": obj.get("nickname"),
            "path": obj.get("path"),
            "type": obj.get("type"),
            "user_freeze": obj.get("user_freeze"),
            "username": obj.get("username"),
            "verified": obj.get("verified"),
            "verified_expire_in": obj.get("verified_expire_in")
        })
        return _obj


