# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoWorkspaceInfo(BaseModel):
    """
    DtoWorkspaceInfo
    """ # noqa: E501
    branch: Optional[StrictStr] = Field(default=None, description="分支名，例如：main")
    commit_count: Optional[StrictInt] = Field(default=None, description="备份的 commit 数")
    create_time: Optional[StrictStr] = Field(default=None, description="开发环境创建时间，例如：2024-12-02T03:20:22.000Z")
    duration: Optional[StrictInt] = Field(default=None, description="开发环境持续时间，单位：ms（非实时更新）")
    file_count: Optional[StrictInt] = Field(default=None, description="备份的文件数")
    file_list: Optional[StrictStr] = Field(default=None, description="备份的文件列表，仅前五个备份文件相对路径")
    latest_sha: Optional[StrictStr] = Field(default=None, description="环境销毁时远程最新的 commit short hash")
    pipeline_id: Optional[StrictStr] = Field(default=None, description="创建环境的子流水线 id")
    remote_stash_count: Optional[StrictInt] = Field(default=None, description="备份的 stash 数")
    repo_url: Optional[StrictStr] = Field(default=None, description="仓库地址")
    restore_id: Optional[StrictStr] = Field(default=None, description="恢复备份代码的流水线 id，如果有值表示备份代码已被恢复（重建环境时会恢复备份代码）")
    slug: Optional[StrictStr] = Field(default=None, description="仓库路径，例如：groupname/reponame")
    sn: Optional[StrictStr] = Field(default=None, description="创建开发环境的流水线 sn")
    ssh: Optional[StrictBool] = Field(default=None, description="开发环境是否支持 ssh 链接")
    status: Optional[StrictStr] = Field(default=None, description="工作区状态，running: 开发环境已启动，closed：开发环境已关闭")
    workspace: Optional[StrictStr] = Field(default=None, description="开发环境默认工作区路径")
    __properties: ClassVar[List[str]] = ["branch", "commit_count", "create_time", "duration", "file_count", "file_list", "latest_sha", "pipeline_id", "remote_stash_count", "repo_url", "restore_id", "slug", "sn", "ssh", "status", "workspace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoWorkspaceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoWorkspaceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branch": obj.get("branch"),
            "commit_count": obj.get("commit_count"),
            "create_time": obj.get("create_time"),
            "duration": obj.get("duration"),
            "file_count": obj.get("file_count"),
            "file_list": obj.get("file_list"),
            "latest_sha": obj.get("latest_sha"),
            "pipeline_id": obj.get("pipeline_id"),
            "remote_stash_count": obj.get("remote_stash_count"),
            "repo_url": obj.get("repo_url"),
            "restore_id": obj.get("restore_id"),
            "slug": obj.get("slug"),
            "sn": obj.get("sn"),
            "ssh": obj.get("ssh"),
            "status": obj.get("status"),
            "workspace": obj.get("workspace")
        })
        return _obj


