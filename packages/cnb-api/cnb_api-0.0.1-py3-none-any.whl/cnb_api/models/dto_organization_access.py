# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.constant_access_role import ConstantAccessRole
from typing import Optional, Set
from typing_extensions import Self

class DtoOrganizationAccess(BaseModel):
    """
    DtoOrganizationAccess
    """ # noqa: E501
    access_role: Optional[ConstantAccessRole] = Field(default=None, description="AccessRole 用户在当前资源的最大权限")
    all_member_count: Optional[StrictInt] = None
    all_sub_group_count: Optional[StrictInt] = Field(default=None, description="下面所有层级子组织")
    all_sub_mission_count: Optional[StrictInt] = Field(default=None, description="下面所有层级子任务")
    all_sub_registry_count: Optional[StrictInt] = None
    all_sub_repo_count: Optional[StrictInt] = Field(default=None, description="下面所有层级子仓库")
    created_at: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    follow_count: Optional[StrictInt] = None
    freeze: Optional[StrictBool] = None
    has_sub_group: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    member_count: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    remark: Optional[StrictStr] = None
    site: Optional[StrictStr] = None
    sub_group_count: Optional[StrictInt] = Field(default=None, description="下一级子组织数量")
    sub_mission_count: Optional[StrictInt] = None
    sub_registry_count: Optional[StrictInt] = None
    sub_repo_count: Optional[StrictInt] = Field(default=None, description="下一级子仓库")
    updated_at: Optional[StrictStr] = None
    wechat_mp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["access_role", "all_member_count", "all_sub_group_count", "all_sub_mission_count", "all_sub_registry_count", "all_sub_repo_count", "created_at", "description", "domain", "email", "follow_count", "freeze", "has_sub_group", "id", "member_count", "name", "path", "remark", "site", "sub_group_count", "sub_mission_count", "sub_registry_count", "sub_repo_count", "updated_at", "wechat_mp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoOrganizationAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "freeze",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoOrganizationAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_role": obj.get("access_role"),
            "all_member_count": obj.get("all_member_count"),
            "all_sub_group_count": obj.get("all_sub_group_count"),
            "all_sub_mission_count": obj.get("all_sub_mission_count"),
            "all_sub_registry_count": obj.get("all_sub_registry_count"),
            "all_sub_repo_count": obj.get("all_sub_repo_count"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "email": obj.get("email"),
            "follow_count": obj.get("follow_count"),
            "freeze": obj.get("freeze"),
            "has_sub_group": obj.get("has_sub_group"),
            "id": obj.get("id"),
            "member_count": obj.get("member_count"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "remark": obj.get("remark"),
            "site": obj.get("site"),
            "sub_group_count": obj.get("sub_group_count"),
            "sub_mission_count": obj.get("sub_mission_count"),
            "sub_registry_count": obj.get("sub_registry_count"),
            "sub_repo_count": obj.get("sub_repo_count"),
            "updated_at": obj.get("updated_at"),
            "wechat_mp": obj.get("wechat_mp")
        })
        return _obj


