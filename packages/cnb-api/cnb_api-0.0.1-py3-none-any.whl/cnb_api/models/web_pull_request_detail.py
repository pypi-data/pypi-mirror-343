# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.git_woa_com_cnb_monorepo_git_internal_dto_web_user_info import GitWoaComCnbMonorepoGitInternalDtoWebUserInfo
from cnb_api.models.label_option import LabelOption
from cnb_api.models.web_commit_statuses import WebCommitStatuses
from cnb_api.models.web_pull_request_assignee import WebPullRequestAssignee
from cnb_api.models.web_pull_request_repository import WebPullRequestRepository
from cnb_api.models.web_pull_request_reviewer import WebPullRequestReviewer
from cnb_api.models.web_pull_request_reviews import WebPullRequestReviews
from cnb_api.models.web_pull_request_setting import WebPullRequestSetting
from typing import Optional, Set
from typing_extensions import Self

class WebPullRequestDetail(BaseModel):
    """
    WebPullRequestDetail
    """ # noqa: E501
    allow_merge_styles: Optional[List[StrictStr]] = None
    assignees: Optional[List[WebPullRequestAssignee]] = None
    author: Optional[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo] = None
    base: Optional[WebPullRequestRepository] = None
    base_repo_ref: Optional[StrictStr] = None
    blocked_on: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    can_do_merge: Optional[StrictBool] = None
    comment_count: Optional[StrictInt] = None
    commit_count: Optional[StrictInt] = None
    commit_statuses: Optional[WebCommitStatuses] = None
    conflict_file_count: Optional[StrictInt] = None
    conflict_files: Optional[List[StrictStr]] = None
    created_at: Optional[StrictStr] = None
    file_count: Optional[StrictInt] = None
    head: Optional[WebPullRequestRepository] = None
    head_deleted: Optional[StrictBool] = None
    head_repo_ref: Optional[StrictStr] = None
    head_repo_slug: Optional[StrictStr] = None
    is_merged: Optional[StrictBool] = None
    is_ready_for_merge: Optional[StrictBool] = None
    labels: Optional[List[LabelOption]] = None
    last_acted_at: Optional[StrictStr] = None
    merge_style: Optional[StrictStr] = None
    mergeable_state: Optional[StrictStr] = None
    number: Optional[StrictStr] = None
    participants: Optional[List[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo]] = None
    review_comment_count: Optional[StrictInt] = None
    review_count: Optional[StrictInt] = None
    reviewers: Optional[List[WebPullRequestReviewer]] = None
    reviews: Optional[WebPullRequestReviews] = None
    settings: Optional[WebPullRequestSetting] = None
    state: Optional[StrictStr] = None
    status_check_commit_sha: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allow_merge_styles", "assignees", "author", "base", "base_repo_ref", "blocked_on", "body", "can_do_merge", "comment_count", "commit_count", "commit_statuses", "conflict_file_count", "conflict_files", "created_at", "file_count", "head", "head_deleted", "head_repo_ref", "head_repo_slug", "is_merged", "is_ready_for_merge", "labels", "last_acted_at", "merge_style", "mergeable_state", "number", "participants", "review_comment_count", "review_count", "reviewers", "reviews", "settings", "state", "status_check_commit_sha", "title", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebPullRequestDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base
        if self.base:
            _dict['base'] = self.base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commit_statuses
        if self.commit_statuses:
            _dict['commit_statuses'] = self.commit_statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of head
        if self.head:
            _dict['head'] = self.head.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in participants (list)
        _items = []
        if self.participants:
            for _item_participants in self.participants:
                if _item_participants:
                    _items.append(_item_participants.to_dict())
            _dict['participants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviewers (list)
        _items = []
        if self.reviewers:
            for _item_reviewers in self.reviewers:
                if _item_reviewers:
                    _items.append(_item_reviewers.to_dict())
            _dict['reviewers'] = _items
        # override the default output from pydantic by calling `to_dict()` of reviews
        if self.reviews:
            _dict['reviews'] = self.reviews.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebPullRequestDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_merge_styles": obj.get("allow_merge_styles"),
            "assignees": [WebPullRequestAssignee.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "author": GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "base": WebPullRequestRepository.from_dict(obj["base"]) if obj.get("base") is not None else None,
            "base_repo_ref": obj.get("base_repo_ref"),
            "blocked_on": obj.get("blocked_on"),
            "body": obj.get("body"),
            "can_do_merge": obj.get("can_do_merge"),
            "comment_count": obj.get("comment_count"),
            "commit_count": obj.get("commit_count"),
            "commit_statuses": WebCommitStatuses.from_dict(obj["commit_statuses"]) if obj.get("commit_statuses") is not None else None,
            "conflict_file_count": obj.get("conflict_file_count"),
            "conflict_files": obj.get("conflict_files"),
            "created_at": obj.get("created_at"),
            "file_count": obj.get("file_count"),
            "head": WebPullRequestRepository.from_dict(obj["head"]) if obj.get("head") is not None else None,
            "head_deleted": obj.get("head_deleted"),
            "head_repo_ref": obj.get("head_repo_ref"),
            "head_repo_slug": obj.get("head_repo_slug"),
            "is_merged": obj.get("is_merged"),
            "is_ready_for_merge": obj.get("is_ready_for_merge"),
            "labels": [LabelOption.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "last_acted_at": obj.get("last_acted_at"),
            "merge_style": obj.get("merge_style"),
            "mergeable_state": obj.get("mergeable_state"),
            "number": obj.get("number"),
            "participants": [GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(_item) for _item in obj["participants"]] if obj.get("participants") is not None else None,
            "review_comment_count": obj.get("review_comment_count"),
            "review_count": obj.get("review_count"),
            "reviewers": [WebPullRequestReviewer.from_dict(_item) for _item in obj["reviewers"]] if obj.get("reviewers") is not None else None,
            "reviews": WebPullRequestReviews.from_dict(obj["reviews"]) if obj.get("reviews") is not None else None,
            "settings": WebPullRequestSetting.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "state": obj.get("state"),
            "status_check_commit_sha": obj.get("status_check_commit_sha"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


