# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.web_commit_statuses import WebCommitStatuses
from cnb_api.models.web_pull_request_reviews import WebPullRequestReviews
from cnb_api.models.web_pull_request_setting import WebPullRequestSetting
from typing import Optional, Set
from typing_extensions import Self

class WebPullRequestState(BaseModel):
    """
    WebPullRequestState
    """ # noqa: E501
    commit_statuses: Optional[WebCommitStatuses] = None
    merge_style: Optional[StrictStr] = None
    mergeable_state: Optional[StrictStr] = None
    number: Optional[StrictStr] = None
    reviews: Optional[WebPullRequestReviews] = None
    settings: Optional[WebPullRequestSetting] = None
    state: Optional[StrictStr] = None
    status_check_commit_sha: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["commit_statuses", "merge_style", "mergeable_state", "number", "reviews", "settings", "state", "status_check_commit_sha"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebPullRequestState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commit_statuses
        if self.commit_statuses:
            _dict['commit_statuses'] = self.commit_statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviews
        if self.reviews:
            _dict['reviews'] = self.reviews.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebPullRequestState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit_statuses": WebCommitStatuses.from_dict(obj["commit_statuses"]) if obj.get("commit_statuses") is not None else None,
            "merge_style": obj.get("merge_style"),
            "mergeable_state": obj.get("mergeable_state"),
            "number": obj.get("number"),
            "reviews": WebPullRequestReviews.from_dict(obj["reviews"]) if obj.get("reviews") is not None else None,
            "settings": WebPullRequestSetting.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "state": obj.get("state"),
            "status_check_commit_sha": obj.get("status_check_commit_sha")
        })
        return _obj


