# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1Platform(BaseModel):
    """
    V1Platform
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="Architecture field specifies the CPU architecture, for example `amd64` or `ppc64le`.")
    os: Optional[StrictStr] = Field(default=None, description="OS specifies the operating system, for example `linux` or `windows`.")
    os_features: Optional[List[StrictStr]] = Field(default=None, description="OSFeatures is an optional field specifying an array of strings, each listing a required OS feature (for example on Windows `win32k`).", alias="os.features")
    os_version: Optional[StrictStr] = Field(default=None, description="OSVersion is an optional field specifying the operating system version, for example on Windows `10.0.14393.1066`.", alias="os.version")
    variant: Optional[StrictStr] = Field(default=None, description="Variant is an optional field specifying a variant of the CPU, for example `v7` to specify ARMv7 when architecture is `arm`.")
    __properties: ClassVar[List[str]] = ["architecture", "os", "os.features", "os.version", "variant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Platform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Platform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "os": obj.get("os"),
            "os.features": obj.get("os.features"),
            "os.version": obj.get("os.version"),
            "variant": obj.get("variant")
        })
        return _obj


