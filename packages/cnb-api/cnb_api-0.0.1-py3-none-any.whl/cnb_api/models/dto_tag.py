# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.dto_chart_tag import DtoChartTag
from cnb_api.models.dto_container_tag import DtoContainerTag
from cnb_api.models.dto_maven_tag import DtoMavenTag
from cnb_api.models.dto_npm_tag import DtoNpmTag
from cnb_api.models.dto_ohpm_tag import DtoOhpmTag
from typing import Optional, Set
from typing_extensions import Self

class DtoTag(BaseModel):
    """
    DtoTag
    """ # noqa: E501
    docker: Optional[List[DtoContainerTag]] = None
    helm: Optional[List[DtoChartTag]] = None
    maven: Optional[List[DtoMavenTag]] = None
    npm: Optional[List[DtoNpmTag]] = None
    ohpm: Optional[List[DtoOhpmTag]] = None
    package: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["docker", "helm", "maven", "npm", "ohpm", "package"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in docker (list)
        _items = []
        if self.docker:
            for _item_docker in self.docker:
                if _item_docker:
                    _items.append(_item_docker.to_dict())
            _dict['docker'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in helm (list)
        _items = []
        if self.helm:
            for _item_helm in self.helm:
                if _item_helm:
                    _items.append(_item_helm.to_dict())
            _dict['helm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maven (list)
        _items = []
        if self.maven:
            for _item_maven in self.maven:
                if _item_maven:
                    _items.append(_item_maven.to_dict())
            _dict['maven'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in npm (list)
        _items = []
        if self.npm:
            for _item_npm in self.npm:
                if _item_npm:
                    _items.append(_item_npm.to_dict())
            _dict['npm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ohpm (list)
        _items = []
        if self.ohpm:
            for _item_ohpm in self.ohpm:
                if _item_ohpm:
                    _items.append(_item_ohpm.to_dict())
            _dict['ohpm'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "docker": [DtoContainerTag.from_dict(_item) for _item in obj["docker"]] if obj.get("docker") is not None else None,
            "helm": [DtoChartTag.from_dict(_item) for _item in obj["helm"]] if obj.get("helm") is not None else None,
            "maven": [DtoMavenTag.from_dict(_item) for _item in obj["maven"]] if obj.get("maven") is not None else None,
            "npm": [DtoNpmTag.from_dict(_item) for _item in obj["npm"]] if obj.get("npm") is not None else None,
            "ohpm": [DtoOhpmTag.from_dict(_item) for _item in obj["ohpm"]] if obj.get("ohpm") is not None else None,
            "package": obj.get("package")
        })
        return _obj


