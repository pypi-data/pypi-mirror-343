# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.api_commit import ApiCommit
from cnb_api.models.api_commit_diff_file_patch import ApiCommitDiffFilePatch
from typing import Optional, Set
from typing_extensions import Self

class ApiCompareResponse(BaseModel):
    """
    ApiCompareResponse
    """ # noqa: E501
    base_commit: Optional[ApiCommit] = None
    commits: Optional[List[ApiCommit]] = None
    files: Optional[List[ApiCommitDiffFilePatch]] = None
    head_commit: Optional[ApiCommit] = None
    merge_base_commit: Optional[ApiCommit] = None
    total_commits: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["base_commit", "commits", "files", "head_commit", "merge_base_commit", "total_commits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiCompareResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_commit
        if self.base_commit:
            _dict['base_commit'] = self.base_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in commits (list)
        _items = []
        if self.commits:
            for _item_commits in self.commits:
                if _item_commits:
                    _items.append(_item_commits.to_dict())
            _dict['commits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of head_commit
        if self.head_commit:
            _dict['head_commit'] = self.head_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merge_base_commit
        if self.merge_base_commit:
            _dict['merge_base_commit'] = self.merge_base_commit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiCompareResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_commit": ApiCommit.from_dict(obj["base_commit"]) if obj.get("base_commit") is not None else None,
            "commits": [ApiCommit.from_dict(_item) for _item in obj["commits"]] if obj.get("commits") is not None else None,
            "files": [ApiCommitDiffFilePatch.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "head_commit": ApiCommit.from_dict(obj["head_commit"]) if obj.get("head_commit") is not None else None,
            "merge_base_commit": ApiCommit.from_dict(obj["merge_base_commit"]) if obj.get("merge_base_commit") is not None else None,
            "total_commits": obj.get("total_commits")
        })
        return _obj


