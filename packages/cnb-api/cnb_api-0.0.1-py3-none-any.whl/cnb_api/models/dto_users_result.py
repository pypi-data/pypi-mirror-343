# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.constant_user_type import ConstantUserType
from typing import Optional, Set
from typing_extensions import Self

class DtoUsersResult(BaseModel):
    """
    DtoUsersResult
    """ # noqa: E501
    address: Optional[StrictStr] = None
    appreciate_status: Optional[StrictInt] = Field(default=None, description="用户赞赏码状态，0-无赞赏码，1-有")
    avatar: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    company: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    follow_count: Optional[StrictInt] = None
    follow_mission_count: Optional[StrictInt] = None
    follow_repo_count: Optional[StrictInt] = None
    follower_count: Optional[StrictInt] = None
    freeze: Optional[StrictBool] = None
    gender: Optional[StrictInt] = None
    group_count: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    is_following: Optional[StrictBool] = Field(default=None, description="查询人是否follow了此用户")
    location: Optional[StrictStr] = None
    mission_count: Optional[StrictInt] = None
    nickname: Optional[StrictStr] = None
    registry_count: Optional[StrictInt] = None
    repo_count: Optional[StrictInt] = None
    reward_amount: Optional[StrictInt] = None
    reward_count: Optional[StrictInt] = None
    site: Optional[StrictStr] = None
    stars_count: Optional[StrictInt] = None
    type: Optional[ConstantUserType] = None
    username: Optional[StrictStr] = None
    verified: Optional[StrictInt] = Field(default=None, description="认证类型")
    verified_expire_in: Optional[StrictStr] = Field(default=None, description="认证过期时间")
    wechat_mp: Optional[StrictStr] = None
    wechat_mp_qrcode: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["address", "appreciate_status", "avatar", "bio", "company", "created_at", "email", "follow_count", "follow_mission_count", "follow_repo_count", "follower_count", "freeze", "gender", "group_count", "id", "is_following", "location", "mission_count", "nickname", "registry_count", "repo_count", "reward_amount", "reward_count", "site", "stars_count", "type", "username", "verified", "verified_expire_in", "wechat_mp", "wechat_mp_qrcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoUsersResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoUsersResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "appreciate_status": obj.get("appreciate_status"),
            "avatar": obj.get("avatar"),
            "bio": obj.get("bio"),
            "company": obj.get("company"),
            "created_at": obj.get("created_at"),
            "email": obj.get("email"),
            "follow_count": obj.get("follow_count"),
            "follow_mission_count": obj.get("follow_mission_count"),
            "follow_repo_count": obj.get("follow_repo_count"),
            "follower_count": obj.get("follower_count"),
            "freeze": obj.get("freeze"),
            "gender": obj.get("gender"),
            "group_count": obj.get("group_count"),
            "id": obj.get("id"),
            "is_following": obj.get("is_following"),
            "location": obj.get("location"),
            "mission_count": obj.get("mission_count"),
            "nickname": obj.get("nickname"),
            "registry_count": obj.get("registry_count"),
            "repo_count": obj.get("repo_count"),
            "reward_amount": obj.get("reward_amount"),
            "reward_count": obj.get("reward_count"),
            "site": obj.get("site"),
            "stars_count": obj.get("stars_count"),
            "type": obj.get("type"),
            "username": obj.get("username"),
            "verified": obj.get("verified"),
            "verified_expire_in": obj.get("verified_expire_in"),
            "wechat_mp": obj.get("wechat_mp"),
            "wechat_mp_qrcode": obj.get("wechat_mp_qrcode")
        })
        return _obj


