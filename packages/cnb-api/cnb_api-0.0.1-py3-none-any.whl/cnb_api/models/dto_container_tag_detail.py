# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.dto_container_annotation import DtoContainerAnnotation
from cnb_api.models.dto_container_image import DtoContainerImage
from cnb_api.models.dto_last_pusher import DtoLastPusher
from typing import Optional, Set
from typing_extensions import Self

class DtoContainerTagDetail(BaseModel):
    """
    DtoContainerTagDetail
    """ # noqa: E501
    address: Optional[StrictStr] = None
    annotations: Optional[DtoContainerAnnotation] = None
    image: Optional[DtoContainerImage] = None
    last_pusher: Optional[DtoLastPusher] = None
    options: Optional[List[DtoContainerImage]] = None
    package: Optional[StrictStr] = None
    pull_count: Optional[StrictInt] = None
    recent_pull_count: Optional[StrictInt] = None
    slug: Optional[StrictStr] = None
    tag: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["address", "annotations", "image", "last_pusher", "options", "package", "pull_count", "recent_pull_count", "slug", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoContainerTagDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotations
        if self.annotations:
            _dict['annotations'] = self.annotations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_pusher
        if self.last_pusher:
            _dict['last_pusher'] = self.last_pusher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoContainerTagDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "annotations": DtoContainerAnnotation.from_dict(obj["annotations"]) if obj.get("annotations") is not None else None,
            "image": DtoContainerImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "last_pusher": DtoLastPusher.from_dict(obj["last_pusher"]) if obj.get("last_pusher") is not None else None,
            "options": [DtoContainerImage.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "package": obj.get("package"),
            "pull_count": obj.get("pull_count"),
            "recent_pull_count": obj.get("recent_pull_count"),
            "slug": obj.get("slug"),
            "tag": obj.get("tag")
        })
        return _obj


