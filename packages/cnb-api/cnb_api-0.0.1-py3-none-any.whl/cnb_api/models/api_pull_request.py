# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.api_pull_ref import ApiPullRef
from cnb_api.models.api_repo import ApiRepo
from cnb_api.models.git_woa_com_cnb_monorepo_git_internal_app_git_service_bff_api_user_info import GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo
from typing import Optional, Set
from typing_extensions import Self

class ApiPullRequest(BaseModel):
    """
    ApiPullRequest
    """ # noqa: E501
    assignees: Optional[List[GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo]] = None
    author: Optional[GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo] = None
    base: Optional[ApiPullRef] = None
    blocked_on: Optional[StrictStr] = None
    comment_count: Optional[StrictInt] = None
    created_at: Optional[StrictStr] = None
    head: Optional[ApiPullRef] = None
    last_acted_at: Optional[StrictStr] = None
    mergeable_state: Optional[StrictStr] = None
    merged_by: Optional[GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo] = None
    number: Optional[StrictStr] = None
    repo: Optional[ApiRepo] = None
    review_count: Optional[StrictInt] = None
    state: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["assignees", "author", "base", "blocked_on", "comment_count", "created_at", "head", "last_acted_at", "mergeable_state", "merged_by", "number", "repo", "review_count", "state", "title", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPullRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item_assignees in self.assignees:
                if _item_assignees:
                    _items.append(_item_assignees.to_dict())
            _dict['assignees'] = _items
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base
        if self.base:
            _dict['base'] = self.base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of head
        if self.head:
            _dict['head'] = self.head.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merged_by
        if self.merged_by:
            _dict['merged_by'] = self.merged_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repo
        if self.repo:
            _dict['repo'] = self.repo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPullRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignees": [GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "author": GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "base": ApiPullRef.from_dict(obj["base"]) if obj.get("base") is not None else None,
            "blocked_on": obj.get("blocked_on"),
            "comment_count": obj.get("comment_count"),
            "created_at": obj.get("created_at"),
            "head": ApiPullRef.from_dict(obj["head"]) if obj.get("head") is not None else None,
            "last_acted_at": obj.get("last_acted_at"),
            "mergeable_state": obj.get("mergeable_state"),
            "merged_by": GitWoaComCnbMonorepoGitInternalAppGitServiceBffApiUserInfo.from_dict(obj["merged_by"]) if obj.get("merged_by") is not None else None,
            "number": obj.get("number"),
            "repo": ApiRepo.from_dict(obj["repo"]) if obj.get("repo") is not None else None,
            "review_count": obj.get("review_count"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


