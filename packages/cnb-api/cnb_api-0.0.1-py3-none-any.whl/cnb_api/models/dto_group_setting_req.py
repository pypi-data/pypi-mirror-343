# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoGroupSettingReq(BaseModel):
    """
    DtoGroupSettingReq
    """ # noqa: E501
    email_verification: Optional[StrictStr] = Field(default=None, description="组织限制指定邮箱认证才能加入")
    group_protection: Optional[StrictInt] = Field(default=None, description="组织保护开关，0 - 关闭，1 - 打开")
    hide_members: Optional[StrictInt] = Field(default=None, description="是否对外隐藏组织成员，0 - 否, 1 - 是")
    hide_sub_groups: Optional[StrictInt] = Field(default=None, description="是否对外隐藏子组织，0 - 否, 1 - 是")
    show_private_repo_watermark: Optional[StrictInt] = Field(default=None, description="是否对外显示私有仓库水印，0 - 否, 1 - 是")
    values: Optional[StrictStr] = Field(default=None, description="SettingValue 组织设置值，多个选项，用逗号拼接。可选值来自 SettingNamesArray 的值，e.g. disable_organization_readme,cloud_native_dev_only")
    __properties: ClassVar[List[str]] = ["email_verification", "group_protection", "hide_members", "hide_sub_groups", "show_private_repo_watermark", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoGroupSettingReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoGroupSettingReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_verification": obj.get("email_verification"),
            "group_protection": obj.get("group_protection"),
            "hide_members": obj.get("hide_members"),
            "hide_sub_groups": obj.get("hide_sub_groups"),
            "show_private_repo_watermark": obj.get("show_private_repo_watermark"),
            "values": obj.get("values")
        })
        return _obj


