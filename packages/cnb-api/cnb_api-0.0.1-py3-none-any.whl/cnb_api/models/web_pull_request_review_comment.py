# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.git_woa_com_cnb_monorepo_git_internal_dto_web_user_info import GitWoaComCnbMonorepoGitInternalDtoWebUserInfo
from cnb_api.models.web_diff_line import WebDiffLine
from cnb_api.models.web_pull_request_review_comment_reply import WebPullRequestReviewCommentReply
from typing import Optional, Set
from typing_extensions import Self

class WebPullRequestReviewComment(BaseModel):
    """
    WebPullRequestReviewComment
    """ # noqa: E501
    author: Optional[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo] = None
    author_meta: Optional[List[StrictInt]] = None
    body: Optional[StrictStr] = None
    comment_id: Optional[StrictStr] = None
    commit_hash: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    diff_hunk: Optional[List[WebDiffLine]] = None
    end_line: Optional[StrictInt] = None
    end_side: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    replies: Optional[List[WebPullRequestReviewCommentReply]] = None
    reply_to_comment_id: Optional[StrictStr] = None
    review_id: Optional[StrictStr] = None
    start_line: Optional[StrictInt] = None
    start_side: Optional[StrictStr] = None
    subject_type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["author", "author_meta", "body", "comment_id", "commit_hash", "created_at", "diff_hunk", "end_line", "end_side", "path", "replies", "reply_to_comment_id", "review_id", "start_line", "start_side", "subject_type", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebPullRequestReviewComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in diff_hunk (list)
        _items = []
        if self.diff_hunk:
            for _item_diff_hunk in self.diff_hunk:
                if _item_diff_hunk:
                    _items.append(_item_diff_hunk.to_dict())
            _dict['diff_hunk'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in replies (list)
        _items = []
        if self.replies:
            for _item_replies in self.replies:
                if _item_replies:
                    _items.append(_item_replies.to_dict())
            _dict['replies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebPullRequestReviewComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "author_meta": obj.get("author_meta"),
            "body": obj.get("body"),
            "comment_id": obj.get("comment_id"),
            "commit_hash": obj.get("commit_hash"),
            "created_at": obj.get("created_at"),
            "diff_hunk": [WebDiffLine.from_dict(_item) for _item in obj["diff_hunk"]] if obj.get("diff_hunk") is not None else None,
            "end_line": obj.get("end_line"),
            "end_side": obj.get("end_side"),
            "path": obj.get("path"),
            "replies": [WebPullRequestReviewCommentReply.from_dict(_item) for _item in obj["replies"]] if obj.get("replies") is not None else None,
            "reply_to_comment_id": obj.get("reply_to_comment_id"),
            "review_id": obj.get("review_id"),
            "start_line": obj.get("start_line"),
            "start_side": obj.get("start_side"),
            "subject_type": obj.get("subject_type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


