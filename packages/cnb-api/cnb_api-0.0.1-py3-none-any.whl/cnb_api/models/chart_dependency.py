# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChartDependency(BaseModel):
    """
    ChartDependency
    """ # noqa: E501
    alias: Optional[StrictStr] = Field(default=None, description="Alias usable alias to be used for the chart")
    condition: Optional[StrictStr] = Field(default=None, description="A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )")
    enabled: Optional[StrictBool] = Field(default=None, description="Enabled bool determines if chart should be loaded")
    import_values: Optional[List[Dict[str, Any]]] = Field(default=None, description="ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.", alias="import-values")
    name: Optional[StrictStr] = Field(default=None, description="Name is the name of the dependency.  This must mach the name in the dependency's Chart.yaml.")
    repository: Optional[StrictStr] = Field(default=None, description="The URL to the repository.  Appending `index.yaml` to this string should result in a URL that can be used to fetch the repository index.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags can be used to group charts for enabling/disabling together")
    version: Optional[StrictStr] = Field(default=None, description="Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.")
    __properties: ClassVar[List[str]] = ["alias", "condition", "enabled", "import-values", "name", "repository", "tags", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChartDependency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChartDependency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "condition": obj.get("condition"),
            "enabled": obj.get("enabled"),
            "import-values": obj.get("import-values"),
            "name": obj.get("name"),
            "repository": obj.get("repository"),
            "tags": obj.get("tags"),
            "version": obj.get("version")
        })
        return _obj


