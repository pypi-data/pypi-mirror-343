# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.git_woa_com_cnb_monorepo_git_internal_dto_web_user_info import GitWoaComCnbMonorepoGitInternalDtoWebUserInfo
from cnb_api.models.web_raw_author import WebRawAuthor
from typing import Optional, Set
from typing_extensions import Self

class WebCodeSensitiveInfo(BaseModel):
    """
    WebCodeSensitiveInfo
    """ # noqa: E501
    created_at: Optional[StrictStr] = Field(default=None, description="问题创建时间")
    file_name: Optional[StrictStr] = Field(default=None, description="包含问题的文件名")
    file_path: Optional[StrictStr] = Field(default=None, description="包含问题的文件路径")
    id: Optional[StrictStr] = Field(default=None, description="问题id")
    issue_type: Optional[StrictStr] = Field(default=None, description="问题类型")
    occur_version: Optional[StrictStr] = Field(default=None, description="问题发生版本")
    owner: Optional[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo] = Field(default=None, description="问题责任人(平台信息)")
    raw_author: Optional[WebRawAuthor] = Field(default=None, description="问题责任人原生git信息")
    repo_id: Optional[StrictStr] = Field(default=None, description="仓库id")
    revision: Optional[StrictStr] = Field(default=None, description="问题所在版本")
    risk_level: Optional[StrictStr] = Field(default=None, description="问题等级")
    state: Optional[StrictStr] = Field(default=None, description="问题状态 开启/忽略")
    tool: Optional[StrictStr] = Field(default=None, description="扫描工具")
    __properties: ClassVar[List[str]] = ["created_at", "file_name", "file_path", "id", "issue_type", "occur_version", "owner", "raw_author", "repo_id", "revision", "risk_level", "state", "tool"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebCodeSensitiveInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_author
        if self.raw_author:
            _dict['raw_author'] = self.raw_author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebCodeSensitiveInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "file_name": obj.get("file_name"),
            "file_path": obj.get("file_path"),
            "id": obj.get("id"),
            "issue_type": obj.get("issue_type"),
            "occur_version": obj.get("occur_version"),
            "owner": GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "raw_author": WebRawAuthor.from_dict(obj["raw_author"]) if obj.get("raw_author") is not None else None,
            "repo_id": obj.get("repo_id"),
            "revision": obj.get("revision"),
            "risk_level": obj.get("risk_level"),
            "state": obj.get("state"),
            "tool": obj.get("tool")
        })
        return _obj


