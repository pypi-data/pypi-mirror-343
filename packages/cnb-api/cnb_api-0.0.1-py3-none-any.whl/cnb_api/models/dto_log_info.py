# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoLogInfo(BaseModel):
    """
    DtoLogInfo
    """ # noqa: E501
    build_log_url: Optional[StrictStr] = Field(default=None, description="构建日志 url", alias="buildLogUrl")
    commit_title: Optional[StrictStr] = Field(default=None, description="提交日志 title", alias="commitTitle")
    create_time: Optional[StrictStr] = Field(default=None, description="构建开始时间", alias="createTime")
    duration: Optional[StrictInt] = Field(default=None, description="构建耗时，单位：ms")
    event: Optional[StrictStr] = Field(default=None, description="事件名")
    event_url: Optional[StrictStr] = Field(default=None, description="事件 url", alias="eventUrl")
    freeze: Optional[StrictBool] = Field(default=None, description="构建用户是否被冻结")
    group_name: Optional[StrictStr] = Field(default=None, description="组织名", alias="groupName")
    labels: Optional[StrictStr] = Field(default=None, description="流水线标签")
    nick_name: Optional[StrictStr] = Field(default=None, description="构建用户昵称", alias="nickName")
    pipeline_fail_count: Optional[StrictInt] = Field(default=None, description="失败的子流水线个数", alias="pipelineFailCount")
    pipeline_success_count: Optional[StrictInt] = Field(default=None, description="成功的子流水线个数", alias="pipelineSuccessCount")
    pipeline_total_count: Optional[StrictInt] = Field(default=None, description="子流水线个数", alias="pipelineTotalCount")
    sha: Optional[StrictStr] = Field(default=None, description="commitid")
    slug: Optional[StrictStr] = Field(default=None, description="仓库路径")
    sn: Optional[StrictStr] = Field(default=None, description="构建号")
    source_ref: Optional[StrictStr] = Field(default=None, description="源分支名", alias="sourceRef")
    source_slug: Optional[StrictStr] = Field(default=None, description="源仓库路径", alias="sourceSlug")
    status: Optional[StrictStr] = Field(default=None, description="构建状态")
    target_ref: Optional[StrictStr] = Field(default=None, description="目标分支名", alias="targetRef")
    title: Optional[StrictStr] = Field(default=None, description="构建 title")
    user_name: Optional[StrictStr] = Field(default=None, description="用户名", alias="userName")
    __properties: ClassVar[List[str]] = ["buildLogUrl", "commitTitle", "createTime", "duration", "event", "eventUrl", "freeze", "groupName", "labels", "nickName", "pipelineFailCount", "pipelineSuccessCount", "pipelineTotalCount", "sha", "slug", "sn", "sourceRef", "sourceSlug", "status", "targetRef", "title", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoLogInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoLogInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildLogUrl": obj.get("buildLogUrl"),
            "commitTitle": obj.get("commitTitle"),
            "createTime": obj.get("createTime"),
            "duration": obj.get("duration"),
            "event": obj.get("event"),
            "eventUrl": obj.get("eventUrl"),
            "freeze": obj.get("freeze"),
            "groupName": obj.get("groupName"),
            "labels": obj.get("labels"),
            "nickName": obj.get("nickName"),
            "pipelineFailCount": obj.get("pipelineFailCount"),
            "pipelineSuccessCount": obj.get("pipelineSuccessCount"),
            "pipelineTotalCount": obj.get("pipelineTotalCount"),
            "sha": obj.get("sha"),
            "slug": obj.get("slug"),
            "sn": obj.get("sn"),
            "sourceRef": obj.get("sourceRef"),
            "sourceSlug": obj.get("sourceSlug"),
            "status": obj.get("status"),
            "targetRef": obj.get("targetRef"),
            "title": obj.get("title"),
            "userName": obj.get("userName")
        })
        return _obj


