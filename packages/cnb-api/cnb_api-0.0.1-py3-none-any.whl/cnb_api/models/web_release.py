# coding: utf-8

"""
    CNB OPENAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: cnb@tencent.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cnb_api.models.git_woa_com_cnb_monorepo_git_internal_dto_web_user_info import GitWoaComCnbMonorepoGitInternalDtoWebUserInfo
from cnb_api.models.web_release_asset import WebReleaseAsset
from typing import Optional, Set
from typing_extensions import Self

class WebRelease(BaseModel):
    """
    WebRelease
    """ # noqa: E501
    assets: Optional[List[WebReleaseAsset]] = None
    author: Optional[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo] = None
    body: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_draft: Optional[StrictBool] = None
    is_latest: Optional[StrictBool] = None
    is_prerelease: Optional[StrictBool] = None
    last_updated_by: Optional[GitWoaComCnbMonorepoGitInternalDtoWebUserInfo] = None
    published_at: Optional[StrictStr] = None
    tag_ref: Optional[StrictStr] = None
    target_commit_hash: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["assets", "author", "body", "created_at", "id", "is_draft", "is_latest", "is_prerelease", "last_updated_by", "published_at", "tag_ref", "target_commit_hash", "title", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebRelease from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item_assets in self.assets:
                if _item_assets:
                    _items.append(_item_assets.to_dict())
            _dict['assets'] = _items
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_updated_by
        if self.last_updated_by:
            _dict['last_updated_by'] = self.last_updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebRelease from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assets": [WebReleaseAsset.from_dict(_item) for _item in obj["assets"]] if obj.get("assets") is not None else None,
            "author": GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "body": obj.get("body"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "is_draft": obj.get("is_draft"),
            "is_latest": obj.get("is_latest"),
            "is_prerelease": obj.get("is_prerelease"),
            "last_updated_by": GitWoaComCnbMonorepoGitInternalDtoWebUserInfo.from_dict(obj["last_updated_by"]) if obj.get("last_updated_by") is not None else None,
            "published_at": obj.get("published_at"),
            "tag_ref": obj.get("tag_ref"),
            "target_commit_hash": obj.get("target_commit_hash"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


