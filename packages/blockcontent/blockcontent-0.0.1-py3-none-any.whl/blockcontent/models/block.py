# coding: utf-8

"""
    BlockContent Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from blockcontent.models.chart_block import ChartBlock
from blockcontent.models.table_block import TableBlock
from blockcontent.models.text_block import TextBlock
from typing import Optional, Set
from typing_extensions import Self

class Block(BaseModel):
    """
    A content block, used to represent structured sections such as text, charts, etc.
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="type of block")
    chart_block: Optional[ChartBlock] = None
    table_block: Optional[TableBlock] = None
    text_block: Optional[TextBlock] = None
    __properties: ClassVar[List[str]] = ["type", "chart_block", "table_block", "text_block"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['chart', 'table', 'text']):
            raise ValueError("must be one of enum values ('chart', 'table', 'text')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Block from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chart_block
        if self.chart_block:
            _dict['chart_block'] = self.chart_block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_block
        if self.table_block:
            _dict['table_block'] = self.table_block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_block
        if self.text_block:
            _dict['text_block'] = self.text_block.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Block from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "chart_block": ChartBlock.from_dict(obj["chart_block"]) if obj.get("chart_block") is not None else None,
            "table_block": TableBlock.from_dict(obj["table_block"]) if obj.get("table_block") is not None else None,
            "text_block": TextBlock.from_dict(obj["text_block"]) if obj.get("text_block") is not None else None
        })
        return _obj


