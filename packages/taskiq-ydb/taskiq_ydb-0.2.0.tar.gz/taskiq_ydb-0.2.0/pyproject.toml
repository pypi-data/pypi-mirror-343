[project]
name = "taskiq-ydb"
version = "0.2.0"
description = "YDB integration for taskiq"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Typing :: Typed",
    "Operating System :: OS Independent",
]
keywords = ["taskiq", "tasks", "distributed", "async", "ydb"]
authors = [
    {name = "Anfimov Dima", email = "lovesolaristics@gmail.com"}
]
requires-python = ">=3.9"
dependencies = [
    "taskiq>=0.11.16",
    "ydb>=3.20.1",
]

[project.urls]
"Bug Tracker" = "https://github.com/danfimov/taskiq-ydb/issues"
"Repository" = "https://github.com/danfimov/taskiq-ydb/"

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    "pytest-report>=0.2.1",
    "ruff>=0.11.4",
    "taskiq-redis>=1.0.4",
]

[tool.pytest.ini_options]
pythonpath = [
  "."
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks unit tests",
    "integration: marks tests with real infrastructure env",
    "linting: marks tests as linter/static analyzers",
]
filterwarnings = [
    # generation of OpenAPI schema from pydantic models
    "ignore:The event_loop fixture provided by pytest-asyncio has been redefined:DeprecationWarning",
]

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __unicode__",
]
show_missing = true
skip_empty = true
omit = [
    "*/__init__.py",
    "tests/*",
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Docstrings
    "D104",  # in public package
    "D100",  # in public module

    # Conflicted rules
    "D203",  # with D211
    "D212",  # with D213
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Docstrings
    "D",

    # annotations
    "ANN",

    # Strange rules about boolean args
    "FBT001",
    "FBT002",

    "S101",  # assert usage
    "S311",  # pseudo-random generators are not suitable for cryptographic purposes
]
"tests/test_linting.py" = [
    "S603",  # subprocess usage
]

[tool.ruff.lint.isort]
known-local-folder = ["taskiq_aiopg"]
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
multiline-quotes = "double"
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
