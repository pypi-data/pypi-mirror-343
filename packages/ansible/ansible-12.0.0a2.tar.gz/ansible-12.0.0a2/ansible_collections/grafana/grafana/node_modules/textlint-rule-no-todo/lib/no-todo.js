// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _textlintRuleHelper = require("textlint-rule-helper");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @param {RuleContext} context
 */
function _default(context) {
  var _ref;

  var helper = new _textlintRuleHelper.RuleHelper(context);
  var Syntax = context.Syntax,
      getSource = context.getSource,
      RuleError = context.RuleError,
      report = context.report;
  return _ref = {}, _defineProperty(_ref, Syntax.Str, function (node) {
    if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote])) {
      return;
    } // get text from node


    var text = getSource(node); // does text contain "todo:"?

    var match = text.match(/todo:/i);

    if (match) {
      var todoText = text.substring(match.index);
      report(node, new RuleError("Found TODO: '".concat(todoText, "'"), {
        index: match.index
      }));
    }
  }), _defineProperty(_ref, Syntax.ListItem, function (node) {
    var text = context.getSource(node);
    var match = text.match(/\[\s+\]\s/i);

    if (match) {
      report(node, new context.RuleError("Found TODO: '".concat(text, "'"), {
        index: match.index
      }));
    }
  }), _ref;
}
//# sourceMappingURL=no-todo.js.map