{"version":3,"sources":["../src/no-todo.js"],"names":["context","helper","RuleHelper","Syntax","getSource","RuleError","report","Str","node","isChildNode","Link","Image","BlockQuote","text","match","todoText","substring","index","ListItem"],"mappings":"AAAA;AACA;;;;;;;AACA;;;;AACA;;;AAGe,kBAAUA,OAAV,EAAmB;AAAA;;AAC9B,MAAMC,MAAM,GAAG,IAAIC,8BAAJ,CAAeF,OAAf,CAAf;AAD8B,MAEvBG,MAFuB,GAEiBH,OAFjB,CAEvBG,MAFuB;AAAA,MAEfC,SAFe,GAEiBJ,OAFjB,CAEfI,SAFe;AAAA,MAEJC,SAFI,GAEiBL,OAFjB,CAEJK,SAFI;AAAA,MAEOC,MAFP,GAEiBN,OAFjB,CAEOM,MAFP;AAG9B,0CASKH,MAAM,CAACI,GATZ,YASiBC,IATjB,EASuB;AACf,QAAIP,MAAM,CAACQ,WAAP,CAAmBD,IAAnB,EAAyB,CAACL,MAAM,CAACO,IAAR,EAAcP,MAAM,CAACQ,KAArB,EAA4BR,MAAM,CAACS,UAAnC,CAAzB,CAAJ,EAA8E;AAC1E;AACH,KAHc,CAIf;;;AACA,QAAMC,IAAI,GAAGT,SAAS,CAACI,IAAD,CAAtB,CALe,CAMf;;AACA,QAAMM,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAW,QAAX,CAAd;;AACA,QAAIA,KAAJ,EAAW;AACP,UAAMC,QAAQ,GAAGF,IAAI,CAACG,SAAL,CAAeF,KAAK,CAACG,KAArB,CAAjB;AACAX,MAAAA,MAAM,CAACE,IAAD,EAAO,IAAIH,SAAJ,wBAA8BU,QAA9B,QAA2C;AACpDE,QAAAA,KAAK,EAAEH,KAAK,CAACG;AADuC,OAA3C,CAAP,CAAN;AAGH;AACJ,GAvBL,yBAgCKd,MAAM,CAACe,QAhCZ,YAgCsBV,IAhCtB,EAgC4B;AACpB,QAAMK,IAAI,GAAGb,OAAO,CAACI,SAAR,CAAkBI,IAAlB,CAAb;AACA,QAAMM,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAW,YAAX,CAAd;;AACA,QAAIA,KAAJ,EAAW;AACPR,MAAAA,MAAM,CAACE,IAAD,EAAO,IAAIR,OAAO,CAACK,SAAZ,wBAAsCQ,IAAtC,QAA+C;AACxDI,QAAAA,KAAK,EAAEH,KAAK,CAACG;AAD2C,OAA/C,CAAP,CAAN;AAGH;AACJ,GAxCL;AA0CH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {RuleHelper} from \"textlint-rule-helper\";\n/**\n * @param {RuleContext} context\n */\nexport default function (context) {\n    const helper = new RuleHelper(context);\n    const {Syntax, getSource, RuleError, report} = context;\n    return {\n        /*\n        Match pattern\n\n            # Header\n            TODO: quick fix this.\n            ^^^^^\n            Hit!\n        */\n        [Syntax.Str](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote])) {\n                return;\n            }\n            // get text from node\n            const text = getSource(node);\n            // does text contain \"todo:\"?\n            const match = text.match(/todo:/i);\n            if (match) {\n                const todoText = text.substring(match.index);\n                report(node, new RuleError(`Found TODO: '${todoText}'`, {\n                    index: match.index\n                }));\n            }\n        },\n        /*\n        Match Pattern\n\n            # Header\n            - [ ] Todo\n              ^^^\n              Hit!\n        */\n        [Syntax.ListItem](node) {\n            const text = context.getSource(node);\n            const match = text.match(/\\[\\s+\\]\\s/i);\n            if (match) {\n                report(node, new context.RuleError(`Found TODO: '${text}'`, {\n                    index: match.index\n                }));\n            }\n        }\n    };\n}\n"],"file":"no-todo.js"}