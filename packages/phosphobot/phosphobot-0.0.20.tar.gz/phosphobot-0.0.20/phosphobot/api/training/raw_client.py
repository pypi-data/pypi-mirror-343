# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from ..types.training_config import TrainingConfig
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.model_status_response import ModelStatusResponse
from ..types.status_response import StatusResponse
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTrainingClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def delete_model_from_training_list(
        self,
        *,
        creation_date: str,
        dataset_name: str,
        model_name: str,
        model_type: str,
        url: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TrainingConfig]:
        """
        Delete a model from the training list

        Parameters
        ----------
        creation_date : str

        dataset_name : str

        model_name : str

        model_type : str

        url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TrainingConfig]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "training/models/delete",
            method="POST",
            json={
                "creation_date": creation_date,
                "dataset_name": dataset_name,
                "model_name": model_name,
                "model_type": model_type,
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_models(self, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[TrainingConfig]:
        """
        Get the list of models to be trained

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TrainingConfig]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "training/models/read",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_model_status(
        self, *, model_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ModelStatusResponse]:
        """
        Get the status of a model. Will return Not started, In progress or Done.

        Parameters
        ----------
        model_url : str
            Hugging Face model URL

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ModelStatusResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "training/models/status",
            method="POST",
            json={
                "model_url": model_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ModelStatusResponse,
                    parse_obj_as(
                        type_=ModelStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_model_to_training_list(
        self,
        *,
        creation_date: str,
        dataset_name: str,
        model_name: str,
        model_type: str,
        url: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TrainingConfig]:
        """
        Add a model to the training list, this will not start training

        Parameters
        ----------
        creation_date : str

        dataset_name : str

        model_name : str

        model_type : str

        url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TrainingConfig]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "training/models/write",
            method="POST",
            json={
                "creation_date": creation_date,
                "dataset_name": dataset_name,
                "model_name": model_name,
                "model_type": model_type,
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def start_training(
        self,
        *,
        dataset: str,
        model_name: str,
        batch_size: typing.Optional[int] = OMIT,
        epochs: typing.Optional[int] = OMIT,
        learning_rate: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StatusResponse]:
        """
        Start training a gr00t model on the specified dataset. This will upload a trained model to the Hugging Face Hub using the main branch of the specified dataset.

        Parameters
        ----------
        dataset : str
            Dataset repository ID

        model_name : str
            Name of the model to be trained

        batch_size : typing.Optional[int]
            Batch size for training, default and max is 64

        epochs : typing.Optional[int]
            Number of epochs to train for, default is 20

        learning_rate : typing.Optional[float]
            Learning rate for training, default is 0.0002

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[StatusResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "training/start",
            method="POST",
            json={
                "batch_size": batch_size,
                "dataset": dataset,
                "epochs": epochs,
                "learning_rate": learning_rate,
                "model_name": model_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    StatusResponse,
                    parse_obj_as(
                        type_=StatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawTrainingClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def delete_model_from_training_list(
        self,
        *,
        creation_date: str,
        dataset_name: str,
        model_name: str,
        model_type: str,
        url: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TrainingConfig]:
        """
        Delete a model from the training list

        Parameters
        ----------
        creation_date : str

        dataset_name : str

        model_name : str

        model_type : str

        url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TrainingConfig]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "training/models/delete",
            method="POST",
            json={
                "creation_date": creation_date,
                "dataset_name": dataset_name,
                "model_name": model_name,
                "model_type": model_type,
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_models(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[TrainingConfig]:
        """
        Get the list of models to be trained

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TrainingConfig]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "training/models/read",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_model_status(
        self, *, model_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ModelStatusResponse]:
        """
        Get the status of a model. Will return Not started, In progress or Done.

        Parameters
        ----------
        model_url : str
            Hugging Face model URL

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ModelStatusResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "training/models/status",
            method="POST",
            json={
                "model_url": model_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ModelStatusResponse,
                    parse_obj_as(
                        type_=ModelStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_model_to_training_list(
        self,
        *,
        creation_date: str,
        dataset_name: str,
        model_name: str,
        model_type: str,
        url: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TrainingConfig]:
        """
        Add a model to the training list, this will not start training

        Parameters
        ----------
        creation_date : str

        dataset_name : str

        model_name : str

        model_type : str

        url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TrainingConfig]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "training/models/write",
            method="POST",
            json={
                "creation_date": creation_date,
                "dataset_name": dataset_name,
                "model_name": model_name,
                "model_type": model_type,
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrainingConfig,
                    parse_obj_as(
                        type_=TrainingConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def start_training(
        self,
        *,
        dataset: str,
        model_name: str,
        batch_size: typing.Optional[int] = OMIT,
        epochs: typing.Optional[int] = OMIT,
        learning_rate: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StatusResponse]:
        """
        Start training a gr00t model on the specified dataset. This will upload a trained model to the Hugging Face Hub using the main branch of the specified dataset.

        Parameters
        ----------
        dataset : str
            Dataset repository ID

        model_name : str
            Name of the model to be trained

        batch_size : typing.Optional[int]
            Batch size for training, default and max is 64

        epochs : typing.Optional[int]
            Number of epochs to train for, default is 20

        learning_rate : typing.Optional[float]
            Learning rate for training, default is 0.0002

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[StatusResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "training/start",
            method="POST",
            json={
                "batch_size": batch_size,
                "dataset": dataset,
                "epochs": epochs,
                "learning_rate": learning_rate,
                "model_name": model_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    StatusResponse,
                    parse_obj_as(
                        type_=StatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
