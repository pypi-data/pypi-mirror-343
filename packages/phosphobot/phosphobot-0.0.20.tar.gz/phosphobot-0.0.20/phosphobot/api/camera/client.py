# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawCameraClient
import typing
from ..core.request_options import RequestOptions
from .types.video_feed_for_camera_video_camera_id_get_request_camera_id import (
    VideoFeedForCameraVideoCameraIdGetRequestCameraId,
)
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawCameraClient


class CameraClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCameraClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCameraClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCameraClient
        """
        return self._raw_client

    def get_all_camera_frames(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[str]]:
        """
        Capture frames from all available cameras. Returns a dictionary with camera IDs as keys and base64 encoded JPG images as values. If a camera is not available or fails to capture, its value will be None.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[str]]
            Successfully captured frames from available cameras

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.get_all_camera_frames()
        """
        response = self._raw_client.get_all_camera_frames(
            request_options=request_options,
        )
        return response.data

    def video_feed_for_camera(
        self,
        camera_id: typing.Optional[VideoFeedForCameraVideoCameraIdGetRequestCameraId],
        *,
        height: typing.Optional[int] = None,
        width: typing.Optional[int] = None,
        quality: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Stream video feed of the specified camera. If no camera id is provided, the default camera is used. If the camera id is 'realsense' or 'depth', the realsense camera is used.Specify a target size and quality using query parameters.

        Parameters
        ----------
        camera_id : typing.Optional[VideoFeedForCameraVideoCameraIdGetRequestCameraId]

        height : typing.Optional[int]

        width : typing.Optional[int]

        quality : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.video_feed_for_camera()
        """
        response = self._raw_client.video_feed_for_camera(
            camera_id,
            height=height,
            width=width,
            quality=quality,
            request_options=request_options,
        )
        return response.data


class AsyncCameraClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCameraClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCameraClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCameraClient
        """
        return self._raw_client

    async def get_all_camera_frames(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[str]]:
        """
        Capture frames from all available cameras. Returns a dictionary with camera IDs as keys and base64 encoded JPG images as values. If a camera is not available or fails to capture, its value will be None.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[str]]
            Successfully captured frames from available cameras

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.get_all_camera_frames()


        asyncio.run(main())
        """
        response = await self._raw_client.get_all_camera_frames(
            request_options=request_options,
        )
        return response.data

    async def video_feed_for_camera(
        self,
        camera_id: typing.Optional[VideoFeedForCameraVideoCameraIdGetRequestCameraId],
        *,
        height: typing.Optional[int] = None,
        width: typing.Optional[int] = None,
        quality: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Stream video feed of the specified camera. If no camera id is provided, the default camera is used. If the camera id is 'realsense' or 'depth', the realsense camera is used.Specify a target size and quality using query parameters.

        Parameters
        ----------
        camera_id : typing.Optional[VideoFeedForCameraVideoCameraIdGetRequestCameraId]

        height : typing.Optional[int]

        width : typing.Optional[int]

        quality : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.video_feed_for_camera()


        asyncio.run(main())
        """
        response = await self._raw_client.video_feed_for_camera(
            camera_id,
            height=height,
            width=width,
            quality=quality,
            request_options=request_options,
        )
        return response.data
