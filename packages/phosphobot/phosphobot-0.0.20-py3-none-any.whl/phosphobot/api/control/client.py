# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawControlClient
from ..core.request_options import RequestOptions
from ..types.status_response import StatusResponse
from ..types.calibrate_response import CalibrateResponse
from ..types.end_effector_position import EndEffectorPosition
from ..types.joints_read_response import JointsReadResponse
from .types.unit import Unit
from .types.source import Source
from ..types.torque_read_response import TorqueReadResponse
from ..types.voltage_read_response import VoltageReadResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawControlClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ControlClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawControlClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawControlClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawControlClient
        """
        return self._raw_client

    def pause_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Pause the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.pause_auto_control()
        """
        response = self._raw_client.pause_auto_control(
            request_options=request_options,
        )
        return response.data

    def resume_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Resume the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.resume_auto_control()
        """
        response = self._raw_client.resume_auto_control(
            request_options=request_options,
        )
        return response.data

    def start_auto_control(
        self,
        *,
        model_id: str,
        prompt: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Start the auto control by AI.

        Parameters
        ----------
        model_id : str
            Hugging Face model id to use

        prompt : typing.Optional[str]
            Prompt to be followed by the robot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.start_auto_control(
            model_id="model_id",
        )
        """
        response = self._raw_client.start_auto_control(
            model_id=model_id,
            prompt=prompt,
            request_options=request_options,
        )
        return response.data

    def stop_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Stop the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.stop_auto_control()
        """
        response = self._raw_client.stop_auto_control(
            request_options=request_options,
        )
        return response.data

    def calibrate(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> CalibrateResponse:
        """
        Start the calibration sequence for the robot.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalibrateResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.calibrate()
        """
        response = self._raw_client.calibrate(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def end_effector_read(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> EndEffectorPosition:
        """
        Retrieve the position, orientation, and open status of the robot's end effector.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EndEffectorPosition
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.end_effector_read()
        """
        response = self._raw_client.end_effector_read(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def start_gravity(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Enable gravity compensation for the robot.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.start_gravity()
        """
        response = self._raw_client.start_gravity(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def stop_gravity_compensation(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Stop the gravity compensation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.stop_gravity_compensation()
        """
        response = self._raw_client.stop_gravity_compensation(
            request_options=request_options,
        )
        return response.data

    def read_joints(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> JointsReadResponse:
        """
        Read the current positions of the robot's joints in radians and motor units.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JointsReadResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.read_joints()
        """
        response = self._raw_client.read_joints(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def write_joints(
        self,
        *,
        angles: typing.Sequence[float],
        robot_id: typing.Optional[int] = None,
        joints_ids: typing.Optional[typing.Sequence[int]] = OMIT,
        unit: typing.Optional[Unit] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot's joints to the specified angles.

        Parameters
        ----------
        angles : typing.Sequence[float]
            A list with the position of each joint. The length of the list must be equal to the number of joints. The unit is given by the 'unit' field.

        robot_id : typing.Optional[int]

        joints_ids : typing.Optional[typing.Sequence[int]]
            If set, only set the joints with these ids. If None, set all joints.Example: 'angles'=[1,1,1], 'joints_ids'=[0,1,2] will set the first 3 joints to 1 radian.

        unit : typing.Optional[Unit]
            The unit of the angles. Defaults to radian.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.write_joints(
            angles=[1.1],
        )
        """
        response = self._raw_client.write_joints(
            angles=angles,
            robot_id=robot_id,
            joints_ids=joints_ids,
            unit=unit,
            request_options=request_options,
        )
        return response.data

    def move_to_absolute_position(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        max_trials: typing.Optional[int] = OMIT,
        orientation_tolerance: typing.Optional[float] = OMIT,
        position_tolerance: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot to an absolute position specified by the end-effector (in centimeters and degrees). Make sure to call `/move/init` before using this endpoint.

        Parameters
        ----------
        open : float
            0 for closed, 1 for open

        rx : float
            Absolute Pitch in degrees

        ry : float
            Absolute Yaw in degrees

        rz : float
            Absolute Roll in degrees

        x : float
            X position in centimeters

        y : float
            Y position in centimeters

        z : float
            Z position in centimeters

        robot_id : typing.Optional[int]

        max_trials : typing.Optional[int]
            The maximum number of trials to reach the target position.

        orientation_tolerance : typing.Optional[float]
            Increase max_trials and decrease tolerance to get more precision.Orientation tolerance is the euclidean distance between the target and the current orientation.

        position_tolerance : typing.Optional[float]
            Increase max_trials and decrease tolerance to get more precision.Position tolerance is the euclidean distance between the target and the current position.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.move_to_absolute_position(
            open=1.1,
            rx=1.1,
            ry=1.1,
            rz=1.1,
            x=1.1,
            y=1.1,
            z=1.1,
        )
        """
        response = self._raw_client.move_to_absolute_position(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            max_trials=max_trials,
            orientation_tolerance=orientation_tolerance,
            position_tolerance=position_tolerance,
            request_options=request_options,
        )
        return response.data

    def say_hello(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Make the robot say hello by opening and closing its gripper. (Test endpoint)

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.say_hello()
        """
        response = self._raw_client.say_hello(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def move_init(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Initialize the robot to its initial position before starting the teleoperation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.move_init()
        """
        response = self._raw_client.move_init(
            request_options=request_options,
        )
        return response.data

    def start_leader_follower(
        self,
        *,
        enable_gravity_compensation: typing.Optional[bool] = OMIT,
        gravity_compensation_values: typing.Optional[typing.Dict[str, typing.Optional[int]]] = OMIT,
        invert_controls: typing.Optional[bool] = OMIT,
        robot_order: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Use the leader arm to control the follower arm.

        Parameters
        ----------
        enable_gravity_compensation : typing.Optional[bool]
            Disable gravity compensation for the leader robot

        gravity_compensation_values : typing.Optional[typing.Dict[str, typing.Optional[int]]]
            Gravity compensation pourcentage values for shoulder, elbow, and wrist joints (0-100%)

        invert_controls : typing.Optional[bool]
            Mirror controls for the follower robot

        robot_order : typing.Optional[typing.Sequence[str]]
            List of robot serial numbers in the order of leader, follower

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.start_leader_follower()
        """
        response = self._raw_client.start_leader_follower(
            enable_gravity_compensation=enable_gravity_compensation,
            gravity_compensation_values=gravity_compensation_values,
            invert_controls=invert_controls,
            robot_order=robot_order,
            request_options=request_options,
        )
        return response.data

    def stop_leader_follower(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Stop the leader-follower control.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.stop_leader_follower()
        """
        response = self._raw_client.stop_leader_follower(
            request_options=request_options,
        )
        return response.data

    def move_relative(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot to a relative position based on received delta values (in centimeters and degrees).

        Parameters
        ----------
        open : float

        rx : float
            Relative Pitch in degrees

        ry : float
            Relative Yaw in degrees

        rz : float
            Relative Roll in degrees

        x : float
            Delta X position in centimeters

        y : float
            Delta Y position in centimeters

        z : float
            Delta Z position in centimeters

        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.move_relative(
            open=1.1,
            rx=1.1,
            ry=1.1,
            rz=1.1,
            x=1.1,
            y=1.1,
            z=1.1,
        )
        """
        response = self._raw_client.move_relative(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def move_sleep(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Put the robot to its sleep position by giving direct instructions to joints.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.move_sleep()
        """
        response = self._raw_client.move_sleep(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def move_teleop_post(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        source: typing.Optional[Source] = OMIT,
        timestamp: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Parameters
        ----------
        open : float
            0 for closed, 1 for open

        rx : float
            Absolute Pitch in degrees

        ry : float
            Absolute Yaw in degrees

        rz : float
            Absolute Roll in degrees

        x : float

        y : float

        z : float

        robot_id : typing.Optional[int]

        source : typing.Optional[Source]
            Which hand the data comes from. Can be left or right.

        timestamp : typing.Optional[float]
            Unix timestamp with milliseconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.move_teleop_post(
            open=1.1,
            rx=1.1,
            ry=1.1,
            rz=1.1,
            x=1.1,
            y=1.1,
            z=1.1,
        )
        """
        response = self._raw_client.move_teleop_post(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            source=source,
            timestamp=timestamp,
            request_options=request_options,
        )
        return response.data

    def read_torque(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> TorqueReadResponse:
        """
        Read the current torque of the robot's joints.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TorqueReadResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.read_torque()
        """
        response = self._raw_client.read_torque(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def toggle_torque(
        self,
        *,
        torque_status: bool,
        robot_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Enable or disable the torque of the robot.

        Parameters
        ----------
        torque_status : bool
            Whether to enable or disable torque control.

        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.toggle_torque(
            torque_status=True,
        )
        """
        response = self._raw_client.toggle_torque(
            torque_status=torque_status,
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    def read_voltage(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> VoltageReadResponse:
        """
        Read the current voltage of the robot's motors.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VoltageReadResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.control.read_voltage()
        """
        response = self._raw_client.read_voltage(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data


class AsyncControlClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawControlClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawControlClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawControlClient
        """
        return self._raw_client

    async def pause_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Pause the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.pause_auto_control()


        asyncio.run(main())
        """
        response = await self._raw_client.pause_auto_control(
            request_options=request_options,
        )
        return response.data

    async def resume_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Resume the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.resume_auto_control()


        asyncio.run(main())
        """
        response = await self._raw_client.resume_auto_control(
            request_options=request_options,
        )
        return response.data

    async def start_auto_control(
        self,
        *,
        model_id: str,
        prompt: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Start the auto control by AI.

        Parameters
        ----------
        model_id : str
            Hugging Face model id to use

        prompt : typing.Optional[str]
            Prompt to be followed by the robot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.start_auto_control(
                model_id="model_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.start_auto_control(
            model_id=model_id,
            prompt=prompt,
            request_options=request_options,
        )
        return response.data

    async def stop_auto_control(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Stop the auto control by AI.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.stop_auto_control()


        asyncio.run(main())
        """
        response = await self._raw_client.stop_auto_control(
            request_options=request_options,
        )
        return response.data

    async def calibrate(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> CalibrateResponse:
        """
        Start the calibration sequence for the robot.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalibrateResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.calibrate()


        asyncio.run(main())
        """
        response = await self._raw_client.calibrate(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def end_effector_read(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> EndEffectorPosition:
        """
        Retrieve the position, orientation, and open status of the robot's end effector.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EndEffectorPosition
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.end_effector_read()


        asyncio.run(main())
        """
        response = await self._raw_client.end_effector_read(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def start_gravity(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Enable gravity compensation for the robot.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.start_gravity()


        asyncio.run(main())
        """
        response = await self._raw_client.start_gravity(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def stop_gravity_compensation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Stop the gravity compensation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.stop_gravity_compensation()


        asyncio.run(main())
        """
        response = await self._raw_client.stop_gravity_compensation(
            request_options=request_options,
        )
        return response.data

    async def read_joints(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> JointsReadResponse:
        """
        Read the current positions of the robot's joints in radians and motor units.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JointsReadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.read_joints()


        asyncio.run(main())
        """
        response = await self._raw_client.read_joints(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def write_joints(
        self,
        *,
        angles: typing.Sequence[float],
        robot_id: typing.Optional[int] = None,
        joints_ids: typing.Optional[typing.Sequence[int]] = OMIT,
        unit: typing.Optional[Unit] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot's joints to the specified angles.

        Parameters
        ----------
        angles : typing.Sequence[float]
            A list with the position of each joint. The length of the list must be equal to the number of joints. The unit is given by the 'unit' field.

        robot_id : typing.Optional[int]

        joints_ids : typing.Optional[typing.Sequence[int]]
            If set, only set the joints with these ids. If None, set all joints.Example: 'angles'=[1,1,1], 'joints_ids'=[0,1,2] will set the first 3 joints to 1 radian.

        unit : typing.Optional[Unit]
            The unit of the angles. Defaults to radian.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.write_joints(
                angles=[1.1],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.write_joints(
            angles=angles,
            robot_id=robot_id,
            joints_ids=joints_ids,
            unit=unit,
            request_options=request_options,
        )
        return response.data

    async def move_to_absolute_position(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        max_trials: typing.Optional[int] = OMIT,
        orientation_tolerance: typing.Optional[float] = OMIT,
        position_tolerance: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot to an absolute position specified by the end-effector (in centimeters and degrees). Make sure to call `/move/init` before using this endpoint.

        Parameters
        ----------
        open : float
            0 for closed, 1 for open

        rx : float
            Absolute Pitch in degrees

        ry : float
            Absolute Yaw in degrees

        rz : float
            Absolute Roll in degrees

        x : float
            X position in centimeters

        y : float
            Y position in centimeters

        z : float
            Z position in centimeters

        robot_id : typing.Optional[int]

        max_trials : typing.Optional[int]
            The maximum number of trials to reach the target position.

        orientation_tolerance : typing.Optional[float]
            Increase max_trials and decrease tolerance to get more precision.Orientation tolerance is the euclidean distance between the target and the current orientation.

        position_tolerance : typing.Optional[float]
            Increase max_trials and decrease tolerance to get more precision.Position tolerance is the euclidean distance between the target and the current position.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.move_to_absolute_position(
                open=1.1,
                rx=1.1,
                ry=1.1,
                rz=1.1,
                x=1.1,
                y=1.1,
                z=1.1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.move_to_absolute_position(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            max_trials=max_trials,
            orientation_tolerance=orientation_tolerance,
            position_tolerance=position_tolerance,
            request_options=request_options,
        )
        return response.data

    async def say_hello(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Make the robot say hello by opening and closing its gripper. (Test endpoint)

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.say_hello()


        asyncio.run(main())
        """
        response = await self._raw_client.say_hello(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def move_init(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Initialize the robot to its initial position before starting the teleoperation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.move_init()


        asyncio.run(main())
        """
        response = await self._raw_client.move_init(
            request_options=request_options,
        )
        return response.data

    async def start_leader_follower(
        self,
        *,
        enable_gravity_compensation: typing.Optional[bool] = OMIT,
        gravity_compensation_values: typing.Optional[typing.Dict[str, typing.Optional[int]]] = OMIT,
        invert_controls: typing.Optional[bool] = OMIT,
        robot_order: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Use the leader arm to control the follower arm.

        Parameters
        ----------
        enable_gravity_compensation : typing.Optional[bool]
            Disable gravity compensation for the leader robot

        gravity_compensation_values : typing.Optional[typing.Dict[str, typing.Optional[int]]]
            Gravity compensation pourcentage values for shoulder, elbow, and wrist joints (0-100%)

        invert_controls : typing.Optional[bool]
            Mirror controls for the follower robot

        robot_order : typing.Optional[typing.Sequence[str]]
            List of robot serial numbers in the order of leader, follower

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.start_leader_follower()


        asyncio.run(main())
        """
        response = await self._raw_client.start_leader_follower(
            enable_gravity_compensation=enable_gravity_compensation,
            gravity_compensation_values=gravity_compensation_values,
            invert_controls=invert_controls,
            robot_order=robot_order,
            request_options=request_options,
        )
        return response.data

    async def stop_leader_follower(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Stop the leader-follower control.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.stop_leader_follower()


        asyncio.run(main())
        """
        response = await self._raw_client.stop_leader_follower(
            request_options=request_options,
        )
        return response.data

    async def move_relative(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Move the robot to a relative position based on received delta values (in centimeters and degrees).

        Parameters
        ----------
        open : float

        rx : float
            Relative Pitch in degrees

        ry : float
            Relative Yaw in degrees

        rz : float
            Relative Roll in degrees

        x : float
            Delta X position in centimeters

        y : float
            Delta Y position in centimeters

        z : float
            Delta Z position in centimeters

        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.move_relative(
                open=1.1,
                rx=1.1,
                ry=1.1,
                rz=1.1,
                x=1.1,
                y=1.1,
                z=1.1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.move_relative(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def move_sleep(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Put the robot to its sleep position by giving direct instructions to joints.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.move_sleep()


        asyncio.run(main())
        """
        response = await self._raw_client.move_sleep(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def move_teleop_post(
        self,
        *,
        open: float,
        rx: float,
        ry: float,
        rz: float,
        x: float,
        y: float,
        z: float,
        robot_id: typing.Optional[int] = None,
        source: typing.Optional[Source] = OMIT,
        timestamp: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Parameters
        ----------
        open : float
            0 for closed, 1 for open

        rx : float
            Absolute Pitch in degrees

        ry : float
            Absolute Yaw in degrees

        rz : float
            Absolute Roll in degrees

        x : float

        y : float

        z : float

        robot_id : typing.Optional[int]

        source : typing.Optional[Source]
            Which hand the data comes from. Can be left or right.

        timestamp : typing.Optional[float]
            Unix timestamp with milliseconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.move_teleop_post(
                open=1.1,
                rx=1.1,
                ry=1.1,
                rz=1.1,
                x=1.1,
                y=1.1,
                z=1.1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.move_teleop_post(
            open=open,
            rx=rx,
            ry=ry,
            rz=rz,
            x=x,
            y=y,
            z=z,
            robot_id=robot_id,
            source=source,
            timestamp=timestamp,
            request_options=request_options,
        )
        return response.data

    async def read_torque(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> TorqueReadResponse:
        """
        Read the current torque of the robot's joints.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TorqueReadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.read_torque()


        asyncio.run(main())
        """
        response = await self._raw_client.read_torque(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def toggle_torque(
        self,
        *,
        torque_status: bool,
        robot_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Enable or disable the torque of the robot.

        Parameters
        ----------
        torque_status : bool
            Whether to enable or disable torque control.

        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.toggle_torque(
                torque_status=True,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.toggle_torque(
            torque_status=torque_status,
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data

    async def read_voltage(
        self, *, robot_id: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> VoltageReadResponse:
        """
        Read the current voltage of the robot's motors.

        Parameters
        ----------
        robot_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VoltageReadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.control.read_voltage()


        asyncio.run(main())
        """
        response = await self._raw_client.read_voltage(
            robot_id=robot_id,
            request_options=request_options,
        )
        return response.data
