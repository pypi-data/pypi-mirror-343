# This file was auto-generated by Fern from our API Definition.

import typing
import httpx
from .core.client_wrapper import SyncClientWrapper
from .raw_client import RawPhosphoApi
from .control.client import ControlClient
from .auth.client import AuthClient
from .camera.client import CameraClient
from .recording.client import RecordingClient
from .training.client import TrainingClient
from .update.client import UpdateClient
from .core.request_options import RequestOptions
from .types.server_status import ServerStatus
from .core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawPhosphoApi
from .control.client import AsyncControlClient
from .auth.client import AsyncAuthClient
from .camera.client import AsyncCameraClient
from .recording.client import AsyncRecordingClient
from .training.client import AsyncTrainingClient
from .update.client import AsyncUpdateClient


class PhosphoApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phospho import PhosphoApi

    client = PhosphoApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout
            if timeout is not None
            else 60
            if httpx_client is None
            else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawPhosphoApi(client_wrapper=self._client_wrapper)
        self.control = ControlClient(client_wrapper=self._client_wrapper)
        self.auth = AuthClient(client_wrapper=self._client_wrapper)
        self.camera = CameraClient(client_wrapper=self._client_wrapper)
        self.recording = RecordingClient(client_wrapper=self._client_wrapper)
        self.training = TrainingClient(client_wrapper=self._client_wrapper)
        self.update = UpdateClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawPhosphoApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPhosphoApi
        """
        return self._raw_client

    def status_status_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ServerStatus:
        """
        Get the status of the server.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServerStatus
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.status_status_get()
        """
        response = self._raw_client.status_status_get(
            request_options=request_options,
        )
        return response.data


class AsyncPhosphoApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phospho import AsyncPhosphoApi

    client = AsyncPhosphoApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout
            if timeout is not None
            else 60
            if httpx_client is None
            else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawPhosphoApi(client_wrapper=self._client_wrapper)
        self.control = AsyncControlClient(client_wrapper=self._client_wrapper)
        self.auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        self.camera = AsyncCameraClient(client_wrapper=self._client_wrapper)
        self.recording = AsyncRecordingClient(client_wrapper=self._client_wrapper)
        self.training = AsyncTrainingClient(client_wrapper=self._client_wrapper)
        self.update = AsyncUpdateClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPhosphoApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPhosphoApi
        """
        return self._raw_client

    async def status_status_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ServerStatus:
        """
        Get the status of the server.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServerStatus
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.status_status_get()


        asyncio.run(main())
        """
        response = await self._raw_client.status_status_get(
            request_options=request_options,
        )
        return response.data
