# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawAuthClient
from ..core.request_options import RequestOptions
from ..types.auth_response import AuthResponse
from ..types.session_reponse import SessionReponse
from ..types.status_response import StatusResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawAuthClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthClient
        """
        return self._raw_client

    def is_authenticated(self, *, request_options: typing.Optional[RequestOptions] = None) -> AuthResponse:
        """
        Check if the user is authenticated by validating the session with Supabase.
        Returns a JSON response indicating authentication status.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.is_authenticated()
        """
        response = self._raw_client.is_authenticated(
            request_options=request_options,
        )
        return response.data

    def confirm_email(
        self, *, access_token: str, refresh_token: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Parameters
        ----------
        access_token : str

        refresh_token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.confirm_email(
            access_token="access_token",
            refresh_token="refresh_token",
        )
        """
        response = self._raw_client.confirm_email(
            access_token=access_token,
            refresh_token=refresh_token,
            request_options=request_options,
        )
        return response.data

    def forgot_password(self, *, email: str, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Send a password reset email to the provided email address.

        Parameters
        ----------
        email : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.forgot_password(
            email="email",
        )
        """
        response = self._raw_client.forgot_password(
            email=email,
            request_options=request_options,
        )
        return response.data

    def logout(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.logout()
        """
        response = self._raw_client.logout(
            request_options=request_options,
        )
        return response.data

    def reset_password(
        self,
        *,
        access_token: str,
        new_password: str,
        refresh_token: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Reset a user's password using the recovery tokens from the Supabase reset email.

        Parameters
        ----------
        access_token : str
            Access token from the reset email

        new_password : str
            New password to set for the user

        refresh_token : str
            Refresh token from the reset email

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.reset_password(
            access_token="access_token",
            new_password="new_password",
            refresh_token="refresh_token",
        )
        """
        response = self._raw_client.reset_password(
            access_token=access_token,
            new_password=new_password,
            refresh_token=refresh_token,
            request_options=request_options,
        )
        return response.data

    def signin(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Sign in an existing user.

        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.signin(
            email="email",
            password="password",
        )
        """
        response = self._raw_client.signin(
            email=email,
            password=password,
            request_options=request_options,
        )
        return response.data

    def signup(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Sign up a new user.

        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        from phospho import PhosphoApi

        client = PhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.auth.signup(
            email="email",
            password="password",
        )
        """
        response = self._raw_client.signup(
            email=email,
            password=password,
            request_options=request_options,
        )
        return response.data


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthClient
        """
        return self._raw_client

    async def is_authenticated(self, *, request_options: typing.Optional[RequestOptions] = None) -> AuthResponse:
        """
        Check if the user is authenticated by validating the session with Supabase.
        Returns a JSON response indicating authentication status.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.is_authenticated()


        asyncio.run(main())
        """
        response = await self._raw_client.is_authenticated(
            request_options=request_options,
        )
        return response.data

    async def confirm_email(
        self, *, access_token: str, refresh_token: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Parameters
        ----------
        access_token : str

        refresh_token : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.confirm_email(
                access_token="access_token",
                refresh_token="refresh_token",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.confirm_email(
            access_token=access_token,
            refresh_token=refresh_token,
            request_options=request_options,
        )
        return response.data

    async def forgot_password(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> StatusResponse:
        """
        Send a password reset email to the provided email address.

        Parameters
        ----------
        email : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.forgot_password(
                email="email",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.forgot_password(
            email=email,
            request_options=request_options,
        )
        return response.data

    async def logout(self, *, request_options: typing.Optional[RequestOptions] = None) -> StatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.logout()


        asyncio.run(main())
        """
        response = await self._raw_client.logout(
            request_options=request_options,
        )
        return response.data

    async def reset_password(
        self,
        *,
        access_token: str,
        new_password: str,
        refresh_token: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StatusResponse:
        """
        Reset a user's password using the recovery tokens from the Supabase reset email.

        Parameters
        ----------
        access_token : str
            Access token from the reset email

        new_password : str
            New password to set for the user

        refresh_token : str
            Refresh token from the reset email

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.reset_password(
                access_token="access_token",
                new_password="new_password",
                refresh_token="refresh_token",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.reset_password(
            access_token=access_token,
            new_password=new_password,
            refresh_token=refresh_token,
            request_options=request_options,
        )
        return response.data

    async def signin(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Sign in an existing user.

        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.signin(
                email="email",
                password="password",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.signin(
            email=email,
            password=password,
            request_options=request_options,
        )
        return response.data

    async def signup(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionReponse:
        """
        Sign up a new user.

        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionReponse
            Successful Response

        Examples
        --------
        import asyncio

        from phospho import AsyncPhosphoApi

        client = AsyncPhosphoApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.auth.signup(
                email="email",
                password="password",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.signup(
            email=email,
            password=password,
            request_options=request_options,
        )
        return response.data
