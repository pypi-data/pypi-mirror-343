Metadata-Version: 2.4
Name: rest-core
Version: 0.1.1
Summary: A lightweight Django package to enhance your Django REST Framework (DRF) APIs with consistent response formatting, smart exception handling, rate-limit introspection, and response time tracking.
Author-email: shailesh pandit <shaileshpandit141@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Shailesh Pandit
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/shaileshpandit141/rest-core
Project-URL: Repository, https://github.com/shaileshpandit141/rest-core
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Framework :: Django :: 4.0
Classifier: Framework :: Django :: 4.1
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.0
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: django>=5.2
Requires-Dist: djangorestframework>=3.16.0
Requires-Dist: pytz>=2025.2
Dynamic: license-file

# rest_core

![PyPI - Version](https://img.shields.io/pypi/v/rest-core) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/rest-core)

**A lightweight Django package to enhance your Django REST Framework (DRF) APIs with consistent response formatting, smart exception handling, rate-limit introspection, and response time tracking.**

## 🔧 Features

- ✅ **Consistent JSON API Responses**  
- 🚫 **Custom Exception Handling** with built-in throttle checks  
- 🔍 **Rate Limit Inspector** to show per-view throttle info  
- ⚙️ **Custom JSON Renderer** for standardized output  
- ⏱️ **Response Time Middleware** with `X-Response-Time` header  
- 💬 **Developer-friendly Response Class**

## 📦 Installation

Install from PyPI:

```bash
pip install rest-core
```

## 🚀 Quick Start

### 1. Add to `settings.py`

```python
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_core.renderers.JSONBaseRenderer",
    ],
    "EXCEPTION_HANDLER": "rest_core.exceptions.base_exception_handler",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "10/minute",
        "user": "100/minute",
    },
}
```

### 2. Update Middleware

```python
MIDDLEWARE = [
    ...
    "rest_core.middlewares.ResponseTimeMiddleware",
]
```

## ✅ Usage

### Example View Using Custom Response

```python
from rest_core.response.response import Response
from rest_framework.views import APIView

class MyAPIView(APIView):
    def get(self, request):
        data = {"foo": "bar"}
        return Response(message="Success", data=data, status=200)
```

## 📄 Example API Response Format

```json
{
  "status": "succeeded",
  "status_code": 200,
  "message": "Success",
  "data": {
    "foo": "bar"
  },
  "errors": null,
  "meta": {
    "response_time": "0.001892 seconds",
    "request_id": "uuid",
    "timestamp": "2025-04-23T09:00:00.000Z",
    "documentation_url": "N/A",
    "rate_limits": {
      "throttled_by": null,
      "throttles": {
        "anon": {
          "limit": 10,
          "remaining": 8,
          "reset_time": "2025-04-23T09:01:00Z",
          "retry_after": "60 seconds"
        }
      }
    }
  }
}
```

## ⚠️ Exception Throttling

If throttled, the exception handler:

- Detects if the request exceeded limits  
- Returns a DRF-standard `429 Too Many Requests` response  
- Adds `Retry-After` and reset time in the response metadata

## 🧪 Throttle Inspector

The `ThrottleInspector` class checks throttle classes for the request and includes:

- Rate limits  
- Remaining request count  
- Time until reset  
- Retry suggestions  

## ⏱️ Response Time

A custom middleware appends the following header to all responses:

```http
X-Response-Time: 0.001621 seconds
```

## 🙌 Contributing

Contributions are welcome! Please open an issue or submit a pull request for any improvements or new features.

## 🧾 License

This project is licensed under the MIT License. See the [LICENSE](https://github.com/shaileshpandit141/rest-core/blob/main/LICENSE) file for details.

## 👤 Author

If you have any questions or need assistance with this project, feel free to reach out:

**Shailesh Pandit**  
📧 `shaileshpandit141@gmail.com`
