# coding: utf-8

"""
    File Service v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CompletedPartTypeDef(BaseModel):
    """
    CompletedPartTypeDef
    """ # noqa: E501
    e_tag: Optional[StrictStr] = Field(default=None, alias="ETag")
    checksum_crc32: Optional[StrictStr] = Field(default=None, alias="ChecksumCRC32")
    checksum_crc32_c: Optional[StrictStr] = Field(default=None, alias="ChecksumCRC32C")
    checksum_crc64_nvme: Optional[StrictStr] = Field(default=None, alias="ChecksumCRC64NVME")
    checksum_sha1: Optional[StrictStr] = Field(default=None, alias="ChecksumSHA1")
    checksum_sha256: Optional[StrictStr] = Field(default=None, alias="ChecksumSHA256")
    part_number: Optional[StrictInt] = Field(default=None, alias="PartNumber")
    __properties: ClassVar[List[str]] = ["ETag", "ChecksumCRC32", "ChecksumCRC32C", "ChecksumCRC64NVME", "ChecksumSHA1", "ChecksumSHA256", "PartNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletedPartTypeDef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletedPartTypeDef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ETag": obj.get("ETag"),
            "ChecksumCRC32": obj.get("ChecksumCRC32"),
            "ChecksumCRC32C": obj.get("ChecksumCRC32C"),
            "ChecksumCRC64NVME": obj.get("ChecksumCRC64NVME"),
            "ChecksumSHA1": obj.get("ChecksumSHA1"),
            "ChecksumSHA256": obj.get("ChecksumSHA256"),
            "PartNumber": obj.get("PartNumber")
        })
        return _obj
