# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.26.7)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._operations import (
    build_api_keys_create_api_key_request,
    build_api_keys_delete_api_key_request,
    build_api_keys_get_api_key_info_request,
    build_api_keys_get_api_key_request,
    build_api_keys_list_api_keys_request,
    build_api_keys_update_api_key_request,
    build_audit_get_audit_events_request,
    build_customizations_delete_app_name_request,
    build_customizations_delete_logo_request,
    build_customizations_delete_logos_request,
    build_customizations_delete_theme_request,
    build_customizations_get_app_name_request,
    build_customizations_get_logos_request,
    build_customizations_get_theme_request,
    build_customizations_patch_theme_request,
    build_customizations_put_app_name_request,
    build_customizations_put_theme_request,
    build_identity_add_group_members_request,
    build_identity_create_group_request,
    build_identity_create_user_request,
    build_identity_delete_group_request,
    build_identity_delete_user_request,
    build_identity_get_group_request,
    build_identity_get_user_request,
    build_identity_list_effective_permissions_request,
    build_identity_list_group_members_request,
    build_identity_list_groups_request,
    build_identity_list_permissions_request,
    build_identity_list_users_request,
    build_identity_remove_group_members_request,
    build_identity_update_group_request,
    build_identity_update_user_request,
    build_metrics_get_cluster_metrics_request,
    build_projects_list_request,
)
from .._vendor import raise_if_not_implemented

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class ApiKeysOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`api_keys` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def list_api_keys(
        self, **kwargs: Any
    ) -> Union[_models.ApiKeyListRepresentation, _models.ErrorResponse]:
        """List all API keys.

        Returns a list of all the API keys in redacted form.

        :return: ApiKeyListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.ApiKeyListRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_api_keys_list_api_keys_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApiKeyListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_api_key(
        self,
        body: _models.ApiKeyRepresentation,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Create an API key.

        Creates an API key.

        :param body: An API key request. Required.
        :type body: ~polaris.sdk.global_api.models.ApiKeyRepresentation
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_api_key(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Create an API key.

        Creates an API key.

        :param body: An API key request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_api_key(
        self, body: Union[_models.ApiKeyRepresentation, IO[bytes]], **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Create an API key.

        Creates an API key.

        :param body: An API key request. Is either a ApiKeyRepresentation type or a IO[bytes] type.
         Required.
        :type body: ~polaris.sdk.global_api.models.ApiKeyRepresentation or IO[bytes]
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.ApiKeyRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ApiKeyRepresentation")

        _request = build_api_keys_create_api_key_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Location"] = self._deserialize(
                "str", response.headers.get("Location")
            )

            deserialized = self._deserialize(
                "ApiKeyRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_api_key(
        self, id: str, **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Get API key details.

        Returns information for a single API key.

        :param id: The API key ID. Required.
        :type id: str
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.ApiKeyRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_api_keys_get_api_key_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApiKeyRepresentation", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update_api_key(
        self,
        id: str,
        body: _models.ApiKeyRepresentation,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Update an API key.

        Updates an API key.

        :param id: The API key ID. Required.
        :type id: str
        :param body: Required.
        :type body: ~polaris.sdk.global_api.models.ApiKeyRepresentation
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_api_key(
        self,
        id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Update an API key.

        Updates an API key.

        :param id: The API key ID. Required.
        :type id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_api_key(
        self,
        id: str,
        body: Union[_models.ApiKeyRepresentation, IO[bytes]],
        **kwargs: Any
    ) -> Union[_models.ApiKeyRepresentation, _models.ErrorResponse]:
        """Update an API key.

        Updates an API key.

        :param id: The API key ID. Required.
        :type id: str
        :param body: Is either a ApiKeyRepresentation type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.ApiKeyRepresentation or IO[bytes]
        :return: ApiKeyRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.ApiKeyRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ApiKeyRepresentation")

        _request = build_api_keys_update_api_key_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApiKeyRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_api_key(
        self, id: str, **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Delete an API key.

        Deletes an API key.

        :param id: The API key ID. Required.
        :type id: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_api_keys_delete_api_key_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_api_key_info(
        self, **kwargs: Any
    ) -> Union[_models.ApiKeyInfo, _models.ErrorResponse]:
        """Get details for the API key used to authenticate this request.

        Returns information for the API key used to authenticate to the Polaris API.

        :return: ApiKeyInfo or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApiKeyInfo or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.ApiKeyInfo, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_api_keys_get_api_key_info_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApiKeyInfo", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class AuditOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`audit` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def get_audit_events(
        self,
        *,
        from_parameter: Optional[datetime.datetime] = None,
        to: Optional[datetime.datetime] = None,
        ip: Optional[str] = None,
        user: Optional[str] = None,
        type: Optional[Union[str, _models.AuditEventType]] = None,
        **kwargs: Any
    ) -> Union[_models.AuditEventList, JSON]:
        """List all audit logs.

        Returns all audit logs for the organization.

        :keyword from_parameter: Filter audit logs that happened after the specified date. Default
         value is None.
        :paramtype from_parameter: ~datetime.datetime
        :keyword to: Filter audit logs that happened before the specified date. Default value is None.
        :paramtype to: ~datetime.datetime
        :keyword ip: Filter audit logs by the IP address. Default value is None.
        :paramtype ip: str
        :keyword user: Filter audit logs by the user ID. Default value is None.
        :paramtype user: str
        :keyword type: Filter audit logs by type. Known values are: "IMPERSONATED", "LOGIN",
         "LOGIN_FAILED", "LOGOUT", "PASSWORD_RESET_REQUESTED", "PASSWORD_UPDATED",
         "USER_INVITE_ACCEPTED", "APIKEY_CREATED", "APIKEY_DELETED", "APIKEY_NAME_UPDATED",
         "APIKEY_DESCRIPTION_UPDATED", "APIKEY_PERMISSIONS_ADDED", "APIKEY_PERMISSIONS_REMOVED",
         "APIKEY_SCOPE_ALL_PROJECTS", "APIKEY_SCOPE_SPECIFIC_PROJECTS", "APIKEY_UPDATED",
         "GROUP_CREATED", "GROUP_DELETED", "GROUP_MEMBER_ADDED", "GROUP_MEMBER_REMOVED",
         "GROUP_NAME_CHANGED", "GROUP_PERMISSIONS_ADDED", "GROUP_PERMISSIONS_REMOVED",
         "GROUP_SCOPE_ALL_PROJECTS", "GROUP_SCOPE_SPECIFIC_PROJECTS", "GROUP_UPDATED", "USER_CREATED",
         "USER_DELETED", "USER_DISABLED", "USER_ENABLED", "USER_INVITE_SENT", "USER_NAME_CHANGED",
         "USER_PASSWORD_RESET", "USER_GROUPS_ADDED", "USER_GROUPS_REMOVED", and "USER_UPDATED". Default
         value is None.
        :paramtype type: str or ~polaris.sdk.global_api.models.AuditEventType
        :return: AuditEventList or JSON
        :rtype: ~polaris.sdk.global_api.models.AuditEventList or JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.AuditEventList, JSON]] = kwargs.pop("cls", None)

        _request = build_audit_get_audit_events_request(
            from_parameter=from_parameter,
            to=to,
            ip=ip,
            user=user,
            type=type,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "AuditEventList", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize("object", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class CustomizationsOperations:  # pylint: disable=abstract-class-instantiated
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`customizations` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

        raise_if_not_implemented(
            self.__class__,
            [
                "put_logo",
            ],
        )

    @distributed_trace_async
    async def get_app_name(
        self, **kwargs: Any
    ) -> Union[_models.ApplicationNameResponse, _models.ErrorResponse]:
        """Get application name.

        Returns the application name of the organization.

        :return: ApplicationNameResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApplicationNameResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.ApplicationNameResponse, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_customizations_get_app_name_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApplicationNameResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def put_app_name(
        self,
        body: _models.ApplicationName,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ApplicationNameResponse, _models.ErrorResponse]:
        """Update application name.

        Updates the application name of the organization.

        :param body: Required.
        :type body: ~polaris.sdk.global_api.models.ApplicationName
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApplicationNameResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApplicationNameResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_app_name(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.ApplicationNameResponse, _models.ErrorResponse]:
        """Update application name.

        Updates the application name of the organization.

        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ApplicationNameResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApplicationNameResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_app_name(
        self, body: Union[_models.ApplicationName, IO[bytes]], **kwargs: Any
    ) -> Union[_models.ApplicationNameResponse, _models.ErrorResponse]:
        """Update application name.

        Updates the application name of the organization.

        :param body: Is either a ApplicationName type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.ApplicationName or IO[bytes]
        :return: ApplicationNameResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ApplicationNameResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.ApplicationNameResponse, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "ApplicationName")

        _request = build_customizations_put_app_name_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ApplicationNameResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_app_name(self, **kwargs: Any) -> Optional[_models.ErrorResponse]:
        """Delete application name.

        Deletes the customized application name of the organization. The application name is reset to
        the default - Imply.

        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_customizations_delete_app_name_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_logos(
        self, **kwargs: Any
    ) -> Union[_models.LogosResponse, _models.ErrorResponse]:
        """Get logos.

        Returns the customized logos of the organization.

        :return: LogosResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.LogosResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.LogosResponse, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_customizations_get_logos_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "LogosResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_logos(self, **kwargs: Any) -> Optional[_models.ErrorResponse]:
        """Delete all logos.

        Deletes all customized logos for the organization. Logos are reset to the Polaris defaults.

        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_customizations_delete_logos_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_logo(
        self, kind: Union[str, _models.LogoKind], **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Delete logos by type.

        Deletes logos with a specified type for the organization. Logos are reset to the Polaris
        defaults.

        :param kind: Logo type. Known values are: "full" and "favicon". Required.
        :type kind: str or ~polaris.sdk.global_api.models.LogoKind
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_customizations_delete_logo_request(
            kind=kind,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 404, 500]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        deserialized = self._deserialize(
            "ErrorResponse", pipeline_response.http_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_theme(
        self, **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Get theme.

        Returns the visual theme applied to the organization, including color palettes for the Polaris
        UI and visualizations.

        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.ThemeResponse, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_customizations_get_theme_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ThemeResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def put_theme(
        self,
        body: _models.Theme,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update entire theme.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request reset to the default values.

        :param body: New theme details. Required.
        :type body: ~polaris.sdk.global_api.models.Theme
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_theme(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update entire theme.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request reset to the default values.

        :param body: New theme details. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_theme(
        self, body: Union[_models.Theme, IO[bytes]], **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update entire theme.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request reset to the default values.

        :param body: New theme details. Is either a Theme type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.Theme or IO[bytes]
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.ThemeResponse, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "Theme")

        _request = build_customizations_put_theme_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ThemeResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def patch_theme(
        self,
        body: _models.Theme,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update specified theme properties.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request retain their previous values.

        :param body: Theme updates. Required.
        :type body: ~polaris.sdk.global_api.models.Theme
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def patch_theme(
        self,
        body: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update specified theme properties.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request retain their previous values.

        :param body: Theme updates. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def patch_theme(
        self, body: Union[_models.Theme, IO[bytes]], **kwargs: Any
    ) -> Union[_models.ThemeResponse, _models.ErrorResponse]:
        """Update specified theme properties.

        Updates the visual theme for the organization, including color palettes for the Polaris UI and
        visualizations. Any properties omitted from the request retain their previous values.

        :param body: Theme updates. Is either a Theme type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.Theme or IO[bytes]
        :return: ThemeResponse or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.ThemeResponse or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.ThemeResponse, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "Theme")

        _request = build_customizations_patch_theme_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "ThemeResponse", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_theme(self, **kwargs: Any) -> Optional[_models.ErrorResponse]:
        """Delete theme.

        Deletes the visual theme applied to the organization, including custom color palettes for the
        Polaris UI and visualizations. Colors are reset to the Polaris defaults.

        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_customizations_delete_theme_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class IdentityOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`identity` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def list_permissions(
        self, **kwargs: Any
    ) -> Union[_models.PermissionListRepresentation, _models.ErrorResponse]:
        """List all permissions.

        Returns all permissions.

        :return: PermissionListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.PermissionListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[
            Union[_models.PermissionListRepresentation, _models.ErrorResponse]
        ] = kwargs.pop("cls", None)

        _request = build_identity_list_permissions_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "PermissionListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_users(
        self,
        *,
        top: int = 100,
        skip: int = 0,
        search: Optional[str] = None,
        **kwargs: Any
    ) -> Union[_models.UserListRepresentation, _models.ErrorResponse]:
        """List all users.

        Returns all users.

        :keyword top: The maximum number of records to return. Default value is 100.
        :paramtype top: int
        :keyword skip: The number of user records to skip before returning ``top`` items. Default value
         is 0.
        :paramtype skip: int
        :keyword search: Filter users by a given string. Supported fields for search are ``username``\\
         , ``email``\\ , ``firstName``\\ , ``lastName``. Default value is None.
        :paramtype search: str
        :return: UserListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.UserListRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_identity_list_users_request(
            top=top,
            skip=skip,
            search=search,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "UserListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_user(
        self,
        body: _models.UserRepresentation,
        *,
        skip_invite: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Create a user.

        Creates a user.

        :param body: A user to be created. Required.
        :type body: ~polaris.sdk.global_api.models.UserRepresentation
        :keyword skip_invite: If true, skips sending invitation email to users. Default value is False.
        :paramtype skip_invite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_user(
        self,
        body: IO[bytes],
        *,
        skip_invite: bool = False,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Create a user.

        Creates a user.

        :param body: A user to be created. Required.
        :type body: IO[bytes]
        :keyword skip_invite: If true, skips sending invitation email to users. Default value is False.
        :paramtype skip_invite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_user(
        self,
        body: Union[_models.UserRepresentation, IO[bytes]],
        *,
        skip_invite: bool = False,
        **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Create a user.

        Creates a user.

        :param body: A user to be created. Is either a UserRepresentation type or a IO[bytes] type.
         Required.
        :type body: ~polaris.sdk.global_api.models.UserRepresentation or IO[bytes]
        :keyword skip_invite: If true, skips sending invitation email to users. Default value is False.
        :paramtype skip_invite: bool
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.UserRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "UserRepresentation")

        _request = build_identity_create_user_request(
            skip_invite=skip_invite,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize(
                "UserRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_user(
        self, id: str, **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Get a user.

        Returns information for a specific user.

        :param id: The user ID. Required.
        :type id: str
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.UserRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_identity_get_user_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "UserRepresentation", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update_user(
        self,
        id: str,
        body: _models.UserRepresentation,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Update a user.

        Updates a user.

        :param id: The user ID. Required.
        :type id: str
        :param body: Required.
        :type body: ~polaris.sdk.global_api.models.UserRepresentation
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_user(
        self,
        id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Update a user.

        Updates a user.

        :param id: The user ID. Required.
        :type id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_user(
        self, id: str, body: Union[_models.UserRepresentation, IO[bytes]], **kwargs: Any
    ) -> Union[_models.UserRepresentation, _models.ErrorResponse]:
        """Update a user.

        Updates a user.

        :param id: The user ID. Required.
        :type id: str
        :param body: Is either a UserRepresentation type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.UserRepresentation or IO[bytes]
        :return: UserRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.UserRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "UserRepresentation")

        _request = build_identity_update_user_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "UserRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_user(
        self, id: str, **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Delete a user.

        Deletes a user.

        :param id: The user ID. Required.
        :type id: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_identity_delete_user_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_effective_permissions(
        self, id: str, **kwargs: Any
    ) -> Union[_models.PermissionListRepresentation, _models.ErrorResponse]:
        """List permissions applied to a user.

        Returns all permissions applied to a user through group membership. For more information, see
        `Permissions reference <https://docs.imply.io/ui/saas/help/permissions.html>`_.

        :param id: The user ID. Required.
        :type id: str
        :return: PermissionListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.PermissionListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[
            Union[_models.PermissionListRepresentation, _models.ErrorResponse]
        ] = kwargs.pop("cls", None)

        _request = build_identity_list_effective_permissions_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "PermissionListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_groups(
        self, **kwargs: Any
    ) -> Union[_models.GroupListRepresentation, _models.ErrorResponse]:
        """List all groups.

        Returns all groups.

        :return: GroupListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.GroupListRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_identity_list_groups_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "GroupListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_group(
        self,
        body: _models.GroupRepresentation,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Create a group.

        Creates a group.

        :param body: A group to be created. Required.
        :type body: ~polaris.sdk.global_api.models.GroupRepresentation
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_group(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Create a group.

        Creates a group.

        :param body: A group to be created. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_group(
        self, body: Union[_models.GroupRepresentation, IO[bytes]], **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Create a group.

        Creates a group.

        :param body: A group to be created. Is either a GroupRepresentation type or a IO[bytes] type.
         Required.
        :type body: ~polaris.sdk.global_api.models.GroupRepresentation or IO[bytes]
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.GroupRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "GroupRepresentation")

        _request = build_identity_create_group_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            deserialized = self._deserialize(
                "GroupRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_group(
        self, id: str, **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Get a group.

        Returns information for a specific group.

        :param id: The group ID. Required.
        :type id: str
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.GroupRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_identity_get_group_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "GroupRepresentation", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update_group(
        self,
        id: str,
        body: _models.GroupRepresentation,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Update a group.

        Updates a group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Required.
        :type body: ~polaris.sdk.global_api.models.GroupRepresentation
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_group(
        self,
        id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Update a group.

        Updates a group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_group(
        self,
        id: str,
        body: Union[_models.GroupRepresentation, IO[bytes]],
        **kwargs: Any
    ) -> Union[_models.GroupRepresentation, _models.ErrorResponse]:
        """Update a group.

        Updates a group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Is either a GroupRepresentation type or a IO[bytes] type. Required.
        :type body: ~polaris.sdk.global_api.models.GroupRepresentation or IO[bytes]
        :return: GroupRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.GroupRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.GroupRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "GroupRepresentation")

        _request = build_identity_update_group_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "GroupRepresentation", pipeline_response.http_response
            )

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_group(
        self, id: str, **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Delete a group.

        Deletes a group.

        :param id: The group ID. Required.
        :type id: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_identity_delete_group_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_group_members(
        self,
        id: str,
        *,
        top: int = 100,
        skip: int = 0,
        search: Optional[str] = None,
        **kwargs: Any
    ) -> Union[_models.UserListRepresentation, _models.ErrorResponse]:
        """List users who are members of a group.

        Returns all members for a given group.

        :param id: The group ID. Required.
        :type id: str
        :keyword top: The maximum number of records to return. Default value is 100.
        :paramtype top: int
        :keyword skip: The number of user records to skip before returning ``top`` items. Default value
         is 0.
        :paramtype skip: int
        :keyword search: Filter users by a given string. Supported fields for search are ``username``\\
         , ``email``\\ , ``firstName``\\ , ``lastName``. Default value is None.
        :paramtype search: str
        :return: UserListRepresentation or ErrorResponse
        :rtype: ~polaris.sdk.global_api.models.UserListRepresentation or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.UserListRepresentation, _models.ErrorResponse]] = (
            kwargs.pop("cls", None)
        )

        _request = build_identity_list_group_members_request(
            id=id,
            top=top,
            skip=skip,
            search=search,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "UserListRepresentation", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def add_group_members(
        self,
        id: str,
        body: List[_models.UserRepresentation],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Add users to a group.

        Adds users to the specified group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be added to the specified group. Required.
        :type body: list[~polaris.sdk.global_api.models.UserRepresentation]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add_group_members(
        self,
        id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Add users to a group.

        Adds users to the specified group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be added to the specified group. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add_group_members(
        self,
        id: str,
        body: Union[List[_models.UserRepresentation], IO[bytes]],
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Add users to a group.

        Adds users to the specified group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be added to the specified group. Is either a [UserRepresentation] type or
         a IO[bytes] type. Required.
        :type body: list[~polaris.sdk.global_api.models.UserRepresentation] or IO[bytes]
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "[UserRepresentation]")

        _request = build_identity_add_group_members_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        deserialized = self._deserialize(
            "ErrorResponse", pipeline_response.http_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def remove_group_members(
        self,
        id: str,
        body: List[_models.UserRepresentation],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Remove users from a group.

        Removes specific users from the group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be removed from the group. Required.
        :type body: list[~polaris.sdk.global_api.models.UserRepresentation]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def remove_group_members(
        self,
        id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Remove users from a group.

        Removes specific users from the group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be removed from the group. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def remove_group_members(
        self,
        id: str,
        body: Union[List[_models.UserRepresentation], IO[bytes]],
        **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Remove users from a group.

        Removes specific users from the group.

        :param id: The group ID. Required.
        :type id: str
        :param body: Users to be removed from the group. Is either a [UserRepresentation] type or a
         IO[bytes] type. Required.
        :type body: list[~polaris.sdk.global_api.models.UserRepresentation] or IO[bytes]
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.global_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "[UserRepresentation]")

        _request = build_identity_remove_group_members_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        deserialized = self._deserialize(
            "ErrorResponse", pipeline_response.http_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class MetricsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`metrics` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def get_cluster_metrics(
        self, *, include_legacy_metrics: Optional[bool] = None, **kwargs: Any
    ) -> Union[str, _models.ErrorResponse]:
        """List all metrics.

        Returns metrics for your Polaris organization. Configure your monitoring tools to scrape this
        endpoint to collect performance metrics.

        :keyword include_legacy_metrics: Set to true to include all types of legacy metrics in the
         response. Default value is None.
        :paramtype include_legacy_metrics: bool
        :return: str or ErrorResponse
        :rtype: str or ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[str, _models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_metrics_get_cluster_metrics_request(
            include_legacy_metrics=include_legacy_metrics,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("str", pipeline_response.http_response)

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class ProjectsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.global_api.aio.ImplyPolarisGlobalClient`'s
        :attr:`projects` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def list(
        self, **kwargs: Any
    ) -> Union[List[_models.Project], _models.ErrorResponse]:
        """List all projects.

        Returns all projects.

        To get all projects for the organization,
        use the global base URL ``https://ORGANIZATION_NAME.api.imply.io``.

        To get all projects in a specified region of the organization,
        use the regional base URL
        ``https://ORGANIZATION_NAME.REGION.CLOUD_PROVIDER.api.imply.io``.

        :return: list of Project or ErrorResponse
        :rtype: list[~polaris.sdk.global_api.models.Project] or
         ~polaris.sdk.global_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[List[_models.Project], _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_projects_list_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "[Project]", pipeline_response.http_response
            )

        if response.status_code == 401:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
