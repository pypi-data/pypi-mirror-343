# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.26.7)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable
from typing_extensions import Self

from azure.core import AsyncPipelineClient
from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .. import models as _models
from .._serialization import Deserializer, Serializer
from ._configuration import ImplyPolarisProjectClientConfiguration
from .operations import (
    AlertsOperations,
    CollectionsOperations,
    ConnectionsOperations,
    DashboardsOperations,
    DataCubesOperations,
    EmbeddingLinksOperations,
    EventsOperations,
    FilesOperations,
    JobsOperations,
    LookupsOperations,
    NetworkPolicyOperations,
    QueryOperations,
    ReportsOperations,
    TablesOperations,
)


class ImplyPolarisProjectClient:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """:code:`<!-- markdownlint-disable-next-line MD041 -->`
    You can use the Imply Polaris API to programmatically manage your tables, files, and ingestion
    tasks.
    See `API overview <https://docs.imply.io/polaris/api-overview/>`_ for information and examples
    on how to get started.

    You can also use the Python SDK for Polaris. The SDK is an abstraction layer on top of the
    Polaris API
    that allows you to manage your Polaris resources using Python.
    For package details and installation, see `Polaris SDK
    <https://pypi.org/project/polaris-sdk/>`_.

    Polaris API resources
    =====================

    Polaris API resources are either global or regional.

    Global resources
    ^^^^^^^^^^^^^^^^

    You can access a global resource irrespective of the cloud provider or region in which Polaris
    hosts your project.

    Global resources are relative to the base URL **\\ ``https://ORGANIZATION_NAME.api.imply.io``\\
    **\\ , where ``ORGANIZATION_NAME`` is the custom domain through which you access Polaris.

    The Polaris API supports the following global resources:


    * `Audit v1 <#tag/audit>`_\\ : Retrieve audit logs.
    * `API Keys v1 <#tag/apiKeys>`_\\ : Create and manage API keys to authenticate API requests.
    * `Customizations v1 <#tag/customizations>`_\\ : Customize logos, colors, and visualizations.
    * `Identity management v1 <#tag/identity>`_\\ : View permissions, and manage users and groups.
    * `Metrics v1 <#tag/metrics>`_\\ : Retrieve performance metrics for your organization.

    Regional resources
    ^^^^^^^^^^^^^^^^^^

    A regional resource is only accessible in the cloud and region where Polaris hosts your
    project.
    You must specify the project's cloud provider and region to call a regional resource.
    For more information, see `Cloud providers and regions </polaris/regions/>`_.

    Regional resources are relative to the base URL **\\
    ``https://ORGANIZATION_NAME.REGION.CLOUD_PROVIDER.api.imply.io/v1/projects/PROJECT_ID``\\ **.

    Replace the following:


    * ``ORGANIZATION_NAME``\\ : Custom domain through which you access Polaris.
    * ``REGION``\\ : Cloud region of your Polaris project.
    * ``CLOUD_PROVIDER``\\ : Cloud provider for your Polaris project.
    * ``PROJECT_ID``\\ : Unique identifier for your Polaris project.

    For example:
    ``https://example.us-east-1.aws.api.imply.io/v1/projects/12375ffx-f7x4-4f0x-a1a6-3b3424987ee0/files``.

    The Polaris API supports the following regional resources:


    * `Alerts v1 <#tag/alerts>`_\\ : Create and manage alerts and the conditions that trigger them.
    * `Collections v1 <#tag/collections>`_\\ : Create and manage collections and favorites.
    * `Connections v1 <#tag/projectConnections>`_\\ : Manage connections to external sources of
    data.
    * `Dashboards v1 <#tag/dashboards>`_\\ : Create and manage dashboards and their pages.
    * `Data cubes v1 <#tag/data-cubes>`_\\ : Create and manage data cubes and their dimensions and
    measures.
    * `Embedding links v1 <#tag/embedding-links>`_\\ : Create and manage links to embedded
    visualizations.
    * `Events v1 <#tag/events>`_\\ : Load data from an external data stream.
    * `Files v1 <#tag/projectFiles>`_\\ : Upload, list, and delete files.
    * `Jobs v1 <#tag/projectJobs>`_\\ : Manage ingestion and deletion jobs.
    * `Network policy v1 <#tag/network-policy>`_\\ : Create and manage network policies.
    * `Projects v1 <#tag/projects>`_\\ : View and manage your project plan.
    * `Query v1 <#tag/projectQuery>`_\\ : Issue SQL queries against tables.
    * `Reports v1 <#tag/reports>`_\\ : Create and manage reports.
    * `Tables v1 <#tag/projectTables>`_\\ : Create, view, and update tables.

    For projects created after September 29, 2023, the Collections, Embedding, Events, Files, and
    Query APIs require the project ID in the base URL.
    We strongly recommend updating your regional API calls for existing projects to include the
    project ID prior to September 2024.
    See the `API migration guide </polaris/api-migration/>`_ for more information.

    Deprecated resources
    ^^^^^^^^^^^^^^^^^^^^

    The following Polaris API resources are deprecated. Instead, use the suggested replacements.

    .. list-table::
       :header-rows: 1

       * - Deprecated resource
         - Replacement
         - Deprecation date
         - Removal date
       * - `Connections v2 </api/polaris/legacy-api-reference.html#tag/connections>`_
         - `Connections v1 <#tag/projectConnections>`_
         - September 2023
         - September 2024
       * - `Embedding v1 <#tag/embedding>`_
         - `Embedding links v1 <#tag/embedding-links>`_
         - February 2024
         - September 2024
       * - `Jobs v2 </api/polaris/legacy-api-reference.html#tag/jobs>`_
         - `Jobs v1 <#tag/projectJobs>`_
         - September 2023
         - September 2024
       * - `Project v1 </api/polaris/api-reference.html#tag/project>`_
         - `Projects v1 <#tag/projects>`_
         - September 2023
         - September 2024
       * - `Tables v2 </api/polaris/legacy-api-reference.html#tag/tables>`_
         - `Tables v1 <#tag/projectTables>`_
         - September 2023
         - September 2024


    For more information, see `Migration guide for deprecated APIs </polaris/api-migration/>`_.

    Status and error codes
    ======================

    Imply uses conventional HTTP response codes to indicate success or failure of a Polaris API
    request. In general:


    * Codes in the ``2xx`` range indicate success.
    * Codes in the ``4xx`` range indicate an error that failed due to the information supplied in
    the requestâ€”for example, a required parameter is missing.
    * Codes in the ``5xx`` range indicate an error with the Imply servers.

    Some of the most commonly received status codes are as follows:

    .. list-table::
       :header-rows: 1

       * - Code
         - Description
       * - ``200 - OK``
         - Successful request.
       * - ``400 - Bad request``
         - The request was unacceptable, often due to missing a required parameter. The response
    usually contains information about the problem and how to resolve it.
       * - ``401 - Unauthorized``
         - Valid OAuth credentials not found. See `Authenticate API requests
    <https://docs.imply.io/polaris/oauth/>`_ for information on obtaining credentials for Polaris
    API requests.
       * - ``403 - Forbidden``
         - The supplied user credentials don't have permissions to perform the request.
       * - ``404 - Not found``
         - The requested resource doesn't exist.
       * - ``409 - Conflict``
         - The request can't complete&mdash;for example, due to a conflict with the current state
    of the target resource.
       * - ``429 - Too many requests``
         - Too many requests hit the API too quickly. For push streaming requests the response
    contains details on how many requests you can send in a defined period and how long to wait
    until retry.
       * - ``500``\\ , ``502``\\ , ``504 - Server errors``
         - Something went wrong at the Imply end. These are rare. Contact `Polaris Support
    <https://polaris-support.imply.io/>`_.
       * - ``503 - Service unavailable``
         - Polaris is temporarily unavailable, usually for scheduled maintenance.


    For more information see the official `HTTP status code definitions
    <https://www.rfc-editor.org/rfc/rfc9110.html#name-status-codes>`_.

    :ivar alerts: AlertsOperations operations
    :vartype alerts: polaris.sdk.project_api.aio.operations.AlertsOperations
    :ivar network_policy: NetworkPolicyOperations operations
    :vartype network_policy: polaris.sdk.project_api.aio.operations.NetworkPolicyOperations
    :ivar collections: CollectionsOperations operations
    :vartype collections: polaris.sdk.project_api.aio.operations.CollectionsOperations
    :ivar connections: ConnectionsOperations operations
    :vartype connections: polaris.sdk.project_api.aio.operations.ConnectionsOperations
    :ivar dashboards: DashboardsOperations operations
    :vartype dashboards: polaris.sdk.project_api.aio.operations.DashboardsOperations
    :ivar data_cubes: DataCubesOperations operations
    :vartype data_cubes: polaris.sdk.project_api.aio.operations.DataCubesOperations
    :ivar embedding_links: EmbeddingLinksOperations operations
    :vartype embedding_links: polaris.sdk.project_api.aio.operations.EmbeddingLinksOperations
    :ivar events: EventsOperations operations
    :vartype events: polaris.sdk.project_api.aio.operations.EventsOperations
    :ivar files: FilesOperations operations
    :vartype files: polaris.sdk.project_api.aio.operations.FilesOperations
    :ivar lookups: LookupsOperations operations
    :vartype lookups: polaris.sdk.project_api.aio.operations.LookupsOperations
    :ivar jobs: JobsOperations operations
    :vartype jobs: polaris.sdk.project_api.aio.operations.JobsOperations
    :ivar query: QueryOperations operations
    :vartype query: polaris.sdk.project_api.aio.operations.QueryOperations
    :ivar reports: ReportsOperations operations
    :vartype reports: polaris.sdk.project_api.aio.operations.ReportsOperations
    :ivar tables: TablesOperations operations
    :vartype tables: polaris.sdk.project_api.aio.operations.TablesOperations
    :param project_id: Project ID. Required.
    :type project_id: str
    :keyword endpoint: Service URL. Default value is "https://api.imply.io".
    :paramtype endpoint: str
    """

    def __init__(  # pylint: disable=missing-client-constructor-parameter-credential
        self, project_id: str, *, endpoint: str = "https://api.imply.io", **kwargs: Any
    ) -> None:
        self._config = ImplyPolarisProjectClientConfiguration(
            project_id=project_id, **kwargs
        )
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                (
                    policies.SensitiveHeaderCleanupPolicy(**kwargs)
                    if self._config.redirect_policy
                    else None
                ),
                self._config.http_logging_policy,
            ]
        self._client: AsyncPipelineClient = AsyncPipelineClient(
            base_url=endpoint, policies=_policies, **kwargs
        )

        client_models = {
            k: v for k, v in _models.__dict__.items() if isinstance(v, type)
        }
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.alerts = AlertsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.network_policy = NetworkPolicyOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.collections = CollectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.connections = ConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.dashboards = DashboardsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.data_cubes = DataCubesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.embedding_links = EmbeddingLinksOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.events = EventsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.files = FilesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.lookups = LookupsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.jobs = JobsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.query = QueryOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.reports = ReportsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.tables = TablesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )

    def send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> Self:
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
