# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.26.7)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._operations import (
    build_projects_create_project_request,
    build_projects_delete_request,
    build_projects_get_request,
    build_projects_list_request,
    build_projects_update_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class ProjectsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~polaris.sdk.regional_api.aio.ImplyPolarisRegionalClient`'s
        :attr:`projects` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = (
            input_args.pop(0) if input_args else kwargs.pop("deserializer")
        )

    @distributed_trace_async
    async def list(
        self, **kwargs: Any
    ) -> Union[List[_models.Project], _models.ErrorResponse]:
        """List all projects.

        Returns all projects.

        To get all projects for the organization,
        use the global base URL ``https://ORGANIZATION_NAME.api.imply.io``.

        To get all projects in a specified region of the organization,
        use the regional base URL
        ``https://ORGANIZATION_NAME.REGION.CLOUD_PROVIDER.api.imply.io``.

        :return: list of Project or ErrorResponse
        :rtype: list[~polaris.sdk.regional_api.models.Project] or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[List[_models.Project], _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_projects_list_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize(
                "[Project]", pipeline_response.http_response
            )

        if response.status_code == 401:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_project(
        self,
        body: _models.Project,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Create a project.

        Creates a project in a specified region.

        :param body: Configuration of the project to be created. Required.
        :type body: ~polaris.sdk.regional_api.models.Project
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_project(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Create a project.

        Creates a project in a specified region.

        :param body: Configuration of the project to be created. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_project(
        self, body: Union[_models.Project, IO[bytes]], **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Create a project.

        Creates a project in a specified region.

        :param body: Configuration of the project to be created. Is either a Project type or a
         IO[bytes] type. Required.
        :type body: ~polaris.sdk.regional_api.models.Project or IO[bytes]
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.Project, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "Project")

        _request = build_projects_create_project_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 400, 401]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 202:
            deserialized = self._deserialize("Project", pipeline_response.http_response)

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 401:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get(
        self, project_id: str, **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Get project details.

        Returns information for a single project.

        :param project_id: Project ID. Required.
        :type project_id: str
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[_models.Project, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        _request = build_projects_get_request(
            project_id=project_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize("Project", pipeline_response.http_response)

        if response.status_code == 401:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update(
        self,
        project_id: str,
        body: _models.Project,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Update a project.

        Updates a project to a different plan or state. See `Update a project
        <https://docs.imply.io/polaris/api-project-update/>`_ for more information.

        :param project_id: Project ID. Required.
        :type project_id: str
        :param body: Configuration to update the project to. Required.
        :type body: ~polaris.sdk.regional_api.models.Project
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        project_id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Update a project.

        Updates a project to a different plan or state. See `Update a project
        <https://docs.imply.io/polaris/api-project-update/>`_ for more information.

        :param project_id: Project ID. Required.
        :type project_id: str
        :param body: Configuration to update the project to. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self, project_id: str, body: Union[_models.Project, IO[bytes]], **kwargs: Any
    ) -> Union[_models.Project, _models.ErrorResponse]:
        """Update a project.

        Updates a project to a different plan or state. See `Update a project
        <https://docs.imply.io/polaris/api-project-update/>`_ for more information.

        :param project_id: Project ID. Required.
        :type project_id: str
        :param body: Configuration to update the project to. Is either a Project type or a IO[bytes]
         type. Required.
        :type body: ~polaris.sdk.regional_api.models.Project or IO[bytes]
        :return: Project or ErrorResponse
        :rtype: ~polaris.sdk.regional_api.models.Project or
         ~polaris.sdk.regional_api.models.ErrorResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None)
        )
        cls: ClsType[Union[_models.Project, _models.ErrorResponse]] = kwargs.pop(
            "cls", None
        )

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "Project")

        _request = build_projects_update_request(
            project_id=project_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 400, 401, 404]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        if response.status_code == 202:
            deserialized = self._deserialize("Project", pipeline_response.http_response)

        if response.status_code == 400:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 401:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if response.status_code == 404:
            deserialized = self._deserialize(
                "ErrorResponse", pipeline_response.http_response
            )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(
        self, project_id: str, **kwargs: Any
    ) -> Optional[_models.ErrorResponse]:
        """Delete a project.

        Deletes a project.

        :param project_id: Project ID. Required.
        :type project_id: str
        :return: ErrorResponse or None
        :rtype: ~polaris.sdk.regional_api.models.ErrorResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.ErrorResponse]] = kwargs.pop("cls", None)

        _request = build_projects_delete_request(
            project_id=project_id,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = (
            await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 401, 404, 409]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            raise HttpResponseError(response=response)

        deserialized = None
        deserialized = self._deserialize(
            "ErrorResponse", pipeline_response.http_response
        )

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
