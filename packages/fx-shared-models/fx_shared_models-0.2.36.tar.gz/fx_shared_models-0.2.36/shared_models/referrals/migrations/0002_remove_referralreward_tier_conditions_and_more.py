# Generated by Django 4.2.20 on 2025-04-07 11:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0006_alter_account_options'),
        ('referrals', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='referralreward',
            name='tier_conditions',
        ),
        migrations.AddField(
            model_name='referralreward',
            name='default_reward_amount',
            field=models.DecimalField(blank=True, decimal_places=5, help_text='Default reward amount to use if no specific tier matches (optional).', max_digits=20, null=True),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='default_reward_type',
            field=models.CharField(blank=True, choices=[('FIXED', 'Fixed Amount'), ('PERCENTAGE', 'Percentage of Value'), ('TIER', 'Tiered Reward'), ('CUSTOM', 'Custom Reward')], help_text='Default reward type to use if no specific tier matches (optional).', max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='direct_referrer_share',
            field=models.DecimalField(decimal_places=2, default=100.0, help_text='Percentage share of the reward for the direct referrer (IB/Client/Agent).', max_digits=5),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='ib_agent_share',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text="Percentage share of the reward for the IB's agent (if reward_ib_agent is True).", max_digits=5),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='payment_gateway',
            field=models.CharField(blank=True, choices=[('STRIPE', 'Stripe'), ('MYFATOORAH', 'MyFatoorah'), ('MANUAL', 'Manual Processing'), ('CRYPTO', 'Crypto Payment'), ('WIRE', 'Wire Transfer')], help_text='Specific payment gateway to simulate for deposit rewards (optional).', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='payment_method',
            field=models.CharField(blank=True, choices=[('WIRE', 'Wire Transfer'), ('CRYPTO', 'Cryptocurrency'), ('CARD', 'Credit/Debit Card'), ('MANUAL', 'Manual'), ('SYSTEM', 'System Generated')], help_text='Specific payment method to simulate for deposit rewards (optional).', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='reward_ib_agent',
            field=models.BooleanField(default=False, help_text="Should the IB's assigned agent also receive a share of this reward?"),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='reward_ib_directly',
            field=models.BooleanField(default=True, help_text='Should the direct IB referrer receive this reward?'),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='tier_basis',
            field=models.CharField(blank=True, choices=[('DEPOSIT_AMOUNT', 'First Deposit Amount'), ('TRADE_VOLUME', 'First Trade Volume')], help_text='Basis for tier calculation (e.g., deposit amount). Null if reward_type is not TIER.', max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='trading_requirement_multiplier',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text='Multiplier for trading volume requirement before withdrawal (e.g., 5x of bonus amount). 0 means no requirement.', max_digits=5),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='transaction_type',
            field=models.CharField(choices=[('DEPOSIT', 'Deposit'), ('WITHDRAWAL', 'Withdrawal'), ('BONUS', 'Bonus'), ('REBATE', 'Rebate'), ('COMMISSION', 'Commission'), ('CORRECTION', 'Correction'), ('INTERNAL_TRANSFER', 'Internal Transfer'), ('CREDIT', 'Credit'), ('CHARGE', 'Charge'), ('COMPENSATION', 'Compensation')], default='BONUS', help_text='Type of transaction to create when processing rewards (Bonus, Credit, Deposit, Compensation)', max_length=20),
        ),
        migrations.AddField(
            model_name='referralreward',
            name='withdrawal_lock_days',
            field=models.IntegerField(default=0, help_text='Number of days the reward is locked from withdrawal. 0 means no lock.'),
        ),
        migrations.AddField(
            model_name='referralsource',
            name='target_reward_account',
            field=models.ForeignKey(blank=True, help_text='Optional: Specific account to receive rewards generated by this code.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_referral_sources', to='accounts.account'),
        ),
        migrations.AlterField(
            model_name='referralreward',
            name='minimum_deposit',
            field=models.DecimalField(decimal_places=5, default=0, help_text='Minimum first deposit amount required to trigger this reward.', max_digits=20),
        ),
        migrations.AlterField(
            model_name='referralreward',
            name='reward_amount',
            field=models.DecimalField(decimal_places=5, help_text='Default reward amount if type is not TIER, or fallback if no tier matches.', max_digits=20),
        ),
        migrations.CreateModel(
            name='RewardTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=255, null=True)),
                ('min_value', models.DecimalField(decimal_places=5, help_text='Minimum value (inclusive) for this tier based on ReferralReward.tier_basis.', max_digits=20)),
                ('max_value', models.DecimalField(blank=True, decimal_places=5, help_text='Maximum value (exclusive) for this tier. Null means no upper limit.', max_digits=20, null=True)),
                ('reward_type', models.CharField(choices=[('FIXED', 'Fixed Amount'), ('PERCENTAGE', 'Percentage of Value'), ('TIER', 'Tiered Reward'), ('CUSTOM', 'Custom Reward')], default='FIXED', help_text='Type of reward for this specific tier (e.g., Fixed amount or Percentage).', max_length=20)),
                ('reward_amount', models.DecimalField(decimal_places=5, help_text='Reward amount or percentage for this tier.', max_digits=20)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which tiers are evaluated.')),
                ('referral_reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='referrals.referralreward')),
            ],
            options={
                'verbose_name': 'Reward Tier',
                'verbose_name_plural': 'Reward Tiers',
                'db_table': 'referral_reward_tiers',
                'ordering': ['referral_reward', 'order', 'min_value'],
            },
        ),
    ]
