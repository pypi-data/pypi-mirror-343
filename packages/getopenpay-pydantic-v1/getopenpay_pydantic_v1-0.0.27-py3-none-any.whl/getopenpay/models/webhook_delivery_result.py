# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class WebhookDeliveryResult(BaseModel):
    """
    WebhookDeliveryResult
    """
    attempt_time: datetime = Field(default=..., description="Webhook delivery attempt time in 'ISO 8601' format.")
    event_id: StrictStr = Field(default=..., description="Unique id for the event which was sent to the webhook url.")
    response_code: StrictInt = Field(default=..., description="HTTP response code received upon attempted delivery to webhook endpoint")
    response_text: Optional[StrictStr] = None
    webhook_id: StrictStr = Field(default=..., description="Unique id for the webhook url to which the event was sent.")
    __properties = ["attempt_time", "event_id", "response_code", "response_text", "webhook_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookDeliveryResult:
        """Create an instance of WebhookDeliveryResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if response_text (nullable) is None
        # and __fields_set__ contains the field
        if self.response_text is None and "response_text" in self.__fields_set__:
            _dict['response_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookDeliveryResult:
        """Create an instance of WebhookDeliveryResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebhookDeliveryResult.parse_obj(obj)

        _obj = WebhookDeliveryResult.parse_obj({
            "attempt_time": obj.get("attempt_time"),
            "event_id": obj.get("event_id"),
            "response_code": obj.get("response_code"),
            "response_text": obj.get("response_text"),
            "webhook_id": obj.get("webhook_id")
        })
        return _obj


