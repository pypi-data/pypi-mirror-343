# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from getopenpay.models.checkout_processors_preferences import CheckoutProcessorsPreferences
from getopenpay.models.selected_price_quantity import SelectedPriceQuantity

class FallbackConfigurationInput(BaseModel):
    """
    FallbackConfigurationInput
    """
    fallback_processor_preferences: Optional[CheckoutProcessorsPreferences] = None
    price_groups: Optional[conlist(SelectedPriceQuantity)] = Field(default=None, description="List of price groups that will be used to fall back to if the selected product price quantity fails to be created.")
    __properties = ["fallback_processor_preferences", "price_groups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FallbackConfigurationInput:
        """Create an instance of FallbackConfigurationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fallback_processor_preferences
        if self.fallback_processor_preferences:
            _dict['fallback_processor_preferences'] = self.fallback_processor_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_groups (list)
        _items = []
        if self.price_groups:
            for _item in self.price_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['price_groups'] = _items
        # set to None if fallback_processor_preferences (nullable) is None
        # and __fields_set__ contains the field
        if self.fallback_processor_preferences is None and "fallback_processor_preferences" in self.__fields_set__:
            _dict['fallback_processor_preferences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FallbackConfigurationInput:
        """Create an instance of FallbackConfigurationInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FallbackConfigurationInput.parse_obj(obj)

        _obj = FallbackConfigurationInput.parse_obj({
            "fallback_processor_preferences": CheckoutProcessorsPreferences.from_dict(obj.get("fallback_processor_preferences")) if obj.get("fallback_processor_preferences") is not None else None,
            "price_groups": [SelectedPriceQuantity.from_dict(_item) for _item in obj.get("price_groups")] if obj.get("price_groups") is not None else None
        })
        return _obj


