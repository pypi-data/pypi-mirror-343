# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class PayInvoiceRequest(BaseModel):
    """
    PayInvoiceRequest
    """
    comment: Optional[StrictStr] = None
    paid_out_of_band: Optional[StrictBool] = Field(default=False, description="Boolean representing whether an invoice is paid outside of OpenPay. This will result in no charge being made. Defaults to false.")
    payment_method_id: Optional[StrictStr] = None
    __properties = ["comment", "paid_out_of_band", "payment_method_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayInvoiceRequest:
        """Create an instance of PayInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if comment (nullable) is None
        # and __fields_set__ contains the field
        if self.comment is None and "comment" in self.__fields_set__:
            _dict['comment'] = None

        # set to None if payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method_id is None and "payment_method_id" in self.__fields_set__:
            _dict['payment_method_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayInvoiceRequest:
        """Create an instance of PayInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PayInvoiceRequest.parse_obj(obj)

        _obj = PayInvoiceRequest.parse_obj({
            "comment": obj.get("comment"),
            "paid_out_of_band": obj.get("paid_out_of_band") if obj.get("paid_out_of_band") is not None else False,
            "payment_method_id": obj.get("payment_method_id")
        })
        return _obj


