# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.billing_reason_enum import BillingReasonEnum
from getopenpay.models.collection_method_enum import CollectionMethodEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.discount_external import DiscountExternal
from getopenpay.models.invoice_comment import InvoiceComment
from getopenpay.models.invoice_discount_amounts_external import InvoiceDiscountAmountsExternal
from getopenpay.models.invoice_item_external import InvoiceItemExternal
from getopenpay.models.invoice_status_enum import InvoiceStatusEnum
from getopenpay.models.merchant_tax_id_setting import MerchantTaxIdSetting
from getopenpay.models.object_name import ObjectName
from getopenpay.models.subscription_external import SubscriptionExternal
from getopenpay.models.tax_id_setting import TaxIdSetting

class InvoiceExternal(BaseModel):
    """
    InvoiceExternal
    """
    account_id: StrictStr = Field(default=..., description="Unique identifier of the account.")
    applied_balance_amount_atom: StrictInt = Field(default=..., description="Amount applied from customer balance either from credit or debit. It is in atomic units (in USD this is cents).")
    billing_reason: BillingReasonEnum = Field(default=..., description="Indicates the reason why the invoice was created.")
    collection_method: CollectionMethodEnum = Field(default=..., description="Indicates method of payment collection of the invoice.")
    comments: Optional[conlist(InvoiceComment)] = Field(default=None, description="The history of the status updates.")
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    credit_note_ids: Optional[conlist(StrictStr)] = Field(default=None, description="List of unique identifiers of all the credit notes issued for this invoice.")
    currency: CurrencyEnum = Field(default=..., description="Three-letter ISO currency code, in lowercase.")
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[CustomerExternal] = None
    customer_id: StrictStr = Field(default=..., description="Unique identifier of the customer.")
    customer_tax_ids: Optional[conlist(TaxIdSetting)] = Field(default=None, description="The tax ID settings of the customer.")
    default_payment_method_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    discounts: Optional[conlist(DiscountExternal)] = Field(default=None, description="The discounts applied to the invoice.")
    due_amount_atom: StrictInt = Field(default=..., description="Final amount due at this time for this invoice. It isin atomic units (in USD this is cents).")
    due_date: datetime = Field(default=..., description="Due date to pay the invoice.")
    email_invoice_on_finalization: Optional[StrictBool] = Field(default=False, description="Whether invoice should be sent to the customer upon finalizing the invoice")
    hosted_invoice_url: Optional[StrictStr] = None
    id: StrictStr = Field(default=..., description="Unique identifier of the invoice.")
    invoice_number: StrictInt = Field(default=..., description="Invoice number")
    invoice_pdf_url: StrictStr = Field(default=..., description="The URL for the Invoice PDF")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    is_initial_invoice_for_trial_sub: StrictBool = Field(default=..., description="Whether this is the first invoice for a trial subscription.")
    latest_payment_attempt_failure_message: Optional[StrictStr] = None
    latest_payment_intent_id: Optional[StrictStr] = None
    lines: conlist(InvoiceItemExternal) = Field(default=..., description="List of individual line items that make up the invoice.")
    merchant_tax_ids: Optional[conlist(MerchantTaxIdSetting)] = Field(default=None, description="The tax ID settings of the merchant.")
    metadata: Optional[Dict[str, Any]] = None
    net_d: Optional[StrictInt] = Field(default=-1, description="Number of days the customer has to pay the invoice, from 0 to 365, where -1 indicates due immediately.")
    object: Optional[ObjectName] = None
    paid_amount_atom: StrictInt = Field(default=..., description="The amount that was paid in atomic units (in USD this is cents).")
    paid_at: Optional[datetime] = None
    paid_out_of_band: Optional[StrictBool] = Field(...)
    period_end: datetime = Field(default=..., description="End of the usage period during which invoice_items were added to this invoice. It is in 'ISO 8601' format.")
    period_start: datetime = Field(default=..., description="Start of the usage period during which invoice_items were added to this invoice. It is in 'ISO 8601' format.")
    post_payment_credit_notes_amount: Optional[StrictInt] = None
    pre_payment_credit_notes_amount: Optional[StrictInt] = None
    provider_type_fee_amount_atom: StrictInt = Field(default=..., description="Total fee amount charged for the payment provider type in atomic units.")
    receipt_pdf_url: StrictStr = Field(default=..., description="The URL for the Receipt PDF")
    refund_ids: conlist(StrictStr) = Field(default=..., description="Ids of refund object for this invoice.")
    refunded_amount_atom: Optional[StrictInt] = Field(...)
    remaining_amount_atom: StrictInt = Field(default=..., description="Remaining amount of the invoice to be paid. It is in atomic units (in USD this is cents).")
    status: InvoiceStatusEnum = Field(default=..., description="Status of the invoice.")
    subscription: Optional[SubscriptionExternal] = None
    subscription_id: Optional[StrictStr] = None
    tax_amount_atom: StrictInt = Field(default=..., description="Total tax amount in atomic units.")
    tax_processor_updated_at: Optional[datetime] = None
    total_amount_atom: StrictInt = Field(default=..., description="Total amount of the invoice. Sum of invoice_items' total amount. It is in atomic units (in USD this is cents).")
    total_discount_amount_atoms: Optional[conlist(InvoiceDiscountAmountsExternal)] = Field(default=None, description="The aggregate amount_atoms calculated per discount across all line items.")
    total_excluding_taxes_amount_atom: StrictInt = Field(default=..., description="Total amount excluding taxes. It is in atomic units (in USD this is cents).")
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["account_id", "applied_balance_amount_atom", "billing_reason", "collection_method", "comments", "created_at", "credit_note_ids", "currency", "custom_fields", "customer", "customer_id", "customer_tax_ids", "default_payment_method_id", "description", "discounts", "due_amount_atom", "due_date", "email_invoice_on_finalization", "hosted_invoice_url", "id", "invoice_number", "invoice_pdf_url", "is_deleted", "is_initial_invoice_for_trial_sub", "latest_payment_attempt_failure_message", "latest_payment_intent_id", "lines", "merchant_tax_ids", "metadata", "net_d", "object", "paid_amount_atom", "paid_at", "paid_out_of_band", "period_end", "period_start", "post_payment_credit_notes_amount", "pre_payment_credit_notes_amount", "provider_type_fee_amount_atom", "receipt_pdf_url", "refund_ids", "refunded_amount_atom", "remaining_amount_atom", "status", "subscription", "subscription_id", "tax_amount_atom", "tax_processor_updated_at", "total_amount_atom", "total_discount_amount_atoms", "total_excluding_taxes_amount_atom", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceExternal:
        """Create an instance of InvoiceExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item in self.comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_tax_ids (list)
        _items = []
        if self.customer_tax_ids:
            for _item in self.customer_tax_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customer_tax_ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item in self.discounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in merchant_tax_ids (list)
        _items = []
        if self.merchant_tax_ids:
            for _item in self.merchant_tax_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['merchant_tax_ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in total_discount_amount_atoms (list)
        _items = []
        if self.total_discount_amount_atoms:
            for _item in self.total_discount_amount_atoms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['total_discount_amount_atoms'] = _items
        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if customer (nullable) is None
        # and __fields_set__ contains the field
        if self.customer is None and "customer" in self.__fields_set__:
            _dict['customer'] = None

        # set to None if default_payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.default_payment_method_id is None and "default_payment_method_id" in self.__fields_set__:
            _dict['default_payment_method_id'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if hosted_invoice_url (nullable) is None
        # and __fields_set__ contains the field
        if self.hosted_invoice_url is None and "hosted_invoice_url" in self.__fields_set__:
            _dict['hosted_invoice_url'] = None

        # set to None if latest_payment_attempt_failure_message (nullable) is None
        # and __fields_set__ contains the field
        if self.latest_payment_attempt_failure_message is None and "latest_payment_attempt_failure_message" in self.__fields_set__:
            _dict['latest_payment_attempt_failure_message'] = None

        # set to None if latest_payment_intent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.latest_payment_intent_id is None and "latest_payment_intent_id" in self.__fields_set__:
            _dict['latest_payment_intent_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if paid_at (nullable) is None
        # and __fields_set__ contains the field
        if self.paid_at is None and "paid_at" in self.__fields_set__:
            _dict['paid_at'] = None

        # set to None if paid_out_of_band (nullable) is None
        # and __fields_set__ contains the field
        if self.paid_out_of_band is None and "paid_out_of_band" in self.__fields_set__:
            _dict['paid_out_of_band'] = None

        # set to None if post_payment_credit_notes_amount (nullable) is None
        # and __fields_set__ contains the field
        if self.post_payment_credit_notes_amount is None and "post_payment_credit_notes_amount" in self.__fields_set__:
            _dict['post_payment_credit_notes_amount'] = None

        # set to None if pre_payment_credit_notes_amount (nullable) is None
        # and __fields_set__ contains the field
        if self.pre_payment_credit_notes_amount is None and "pre_payment_credit_notes_amount" in self.__fields_set__:
            _dict['pre_payment_credit_notes_amount'] = None

        # set to None if refunded_amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.refunded_amount_atom is None and "refunded_amount_atom" in self.__fields_set__:
            _dict['refunded_amount_atom'] = None

        # set to None if subscription (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription is None and "subscription" in self.__fields_set__:
            _dict['subscription'] = None

        # set to None if subscription_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_id is None and "subscription_id" in self.__fields_set__:
            _dict['subscription_id'] = None

        # set to None if tax_processor_updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.tax_processor_updated_at is None and "tax_processor_updated_at" in self.__fields_set__:
            _dict['tax_processor_updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceExternal:
        """Create an instance of InvoiceExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceExternal.parse_obj(obj)

        _obj = InvoiceExternal.parse_obj({
            "account_id": obj.get("account_id"),
            "applied_balance_amount_atom": obj.get("applied_balance_amount_atom"),
            "billing_reason": obj.get("billing_reason"),
            "collection_method": obj.get("collection_method"),
            "comments": [InvoiceComment.from_dict(_item) for _item in obj.get("comments")] if obj.get("comments") is not None else None,
            "created_at": obj.get("created_at"),
            "credit_note_ids": obj.get("credit_note_ids"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer": CustomerExternal.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "customer_id": obj.get("customer_id"),
            "customer_tax_ids": [TaxIdSetting.from_dict(_item) for _item in obj.get("customer_tax_ids")] if obj.get("customer_tax_ids") is not None else None,
            "default_payment_method_id": obj.get("default_payment_method_id"),
            "description": obj.get("description"),
            "discounts": [DiscountExternal.from_dict(_item) for _item in obj.get("discounts")] if obj.get("discounts") is not None else None,
            "due_amount_atom": obj.get("due_amount_atom"),
            "due_date": obj.get("due_date"),
            "email_invoice_on_finalization": obj.get("email_invoice_on_finalization") if obj.get("email_invoice_on_finalization") is not None else False,
            "hosted_invoice_url": obj.get("hosted_invoice_url"),
            "id": obj.get("id"),
            "invoice_number": obj.get("invoice_number"),
            "invoice_pdf_url": obj.get("invoice_pdf_url"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "is_initial_invoice_for_trial_sub": obj.get("is_initial_invoice_for_trial_sub"),
            "latest_payment_attempt_failure_message": obj.get("latest_payment_attempt_failure_message"),
            "latest_payment_intent_id": obj.get("latest_payment_intent_id"),
            "lines": [InvoiceItemExternal.from_dict(_item) for _item in obj.get("lines")] if obj.get("lines") is not None else None,
            "merchant_tax_ids": [MerchantTaxIdSetting.from_dict(_item) for _item in obj.get("merchant_tax_ids")] if obj.get("merchant_tax_ids") is not None else None,
            "metadata": obj.get("metadata"),
            "net_d": obj.get("net_d") if obj.get("net_d") is not None else -1,
            "object": obj.get("object"),
            "paid_amount_atom": obj.get("paid_amount_atom"),
            "paid_at": obj.get("paid_at"),
            "paid_out_of_band": obj.get("paid_out_of_band"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "post_payment_credit_notes_amount": obj.get("post_payment_credit_notes_amount"),
            "pre_payment_credit_notes_amount": obj.get("pre_payment_credit_notes_amount"),
            "provider_type_fee_amount_atom": obj.get("provider_type_fee_amount_atom"),
            "receipt_pdf_url": obj.get("receipt_pdf_url"),
            "refund_ids": obj.get("refund_ids"),
            "refunded_amount_atom": obj.get("refunded_amount_atom"),
            "remaining_amount_atom": obj.get("remaining_amount_atom"),
            "status": obj.get("status"),
            "subscription": SubscriptionExternal.from_dict(obj.get("subscription")) if obj.get("subscription") is not None else None,
            "subscription_id": obj.get("subscription_id"),
            "tax_amount_atom": obj.get("tax_amount_atom"),
            "tax_processor_updated_at": obj.get("tax_processor_updated_at"),
            "total_amount_atom": obj.get("total_amount_atom"),
            "total_discount_amount_atoms": [InvoiceDiscountAmountsExternal.from_dict(_item) for _item in obj.get("total_discount_amount_atoms")] if obj.get("total_discount_amount_atoms") is not None else None,
            "total_excluding_taxes_amount_atom": obj.get("total_excluding_taxes_amount_atom"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

from getopenpay.models.customer_external import CustomerExternal
InvoiceExternal.update_forward_refs()

