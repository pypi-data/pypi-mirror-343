# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from getopenpay.models.invoice_external import InvoiceExternal
from getopenpay.models.subscription_external import SubscriptionExternal

class UpdateSubscriptionResponse(BaseModel):
    """
    UpdateSubscriptionResponse
    """
    invoices: conlist(InvoiceExternal) = Field(default=..., description="List of invoices created")
    renewal_invoices: Optional[conlist(InvoiceExternal)] = Field(default=None, description="List of renewal invoices created")
    subscriptions: conlist(SubscriptionExternal) = Field(default=..., description="List of subscriptions updated.")
    __properties = ["invoices", "renewal_invoices", "subscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateSubscriptionResponse:
        """Create an instance of UpdateSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item in self.invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in renewal_invoices (list)
        _items = []
        if self.renewal_invoices:
            for _item in self.renewal_invoices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['renewal_invoices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateSubscriptionResponse:
        """Create an instance of UpdateSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateSubscriptionResponse.parse_obj(obj)

        _obj = UpdateSubscriptionResponse.parse_obj({
            "invoices": [InvoiceExternal.from_dict(_item) for _item in obj.get("invoices")] if obj.get("invoices") is not None else None,
            "renewal_invoices": [InvoiceExternal.from_dict(_item) for _item in obj.get("renewal_invoices")] if obj.get("renewal_invoices") is not None else None,
            "subscriptions": [SubscriptionExternal.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


