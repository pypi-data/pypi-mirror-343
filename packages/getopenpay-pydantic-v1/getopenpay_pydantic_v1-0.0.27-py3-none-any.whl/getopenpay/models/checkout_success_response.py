# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class CheckoutSuccessResponse(BaseModel):
    """
    CheckoutSuccessResponse
    """
    customer_id: StrictStr = Field(...)
    invoice_urls: conlist(StrictStr) = Field(...)
    subscription_ids: conlist(StrictStr) = Field(...)
    __properties = ["customer_id", "invoice_urls", "subscription_ids"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckoutSuccessResponse:
        """Create an instance of CheckoutSuccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckoutSuccessResponse:
        """Create an instance of CheckoutSuccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckoutSuccessResponse.parse_obj(obj)

        _obj = CheckoutSuccessResponse.parse_obj({
            "customer_id": obj.get("customer_id"),
            "invoice_urls": obj.get("invoice_urls"),
            "subscription_ids": obj.get("subscription_ids")
        })
        return _obj


