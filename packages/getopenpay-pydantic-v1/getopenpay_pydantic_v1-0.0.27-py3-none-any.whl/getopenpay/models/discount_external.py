# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from getopenpay.models.coupon_external import CouponExternal
from getopenpay.models.object_name import ObjectName
from getopenpay.models.promotion_code_external import PromotionCodeExternal

class DiscountExternal(BaseModel):
    """
    DiscountExternal
    """
    coupon: CouponExternal = Field(...)
    coupon_id: StrictStr = Field(...)
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    customer_id: Optional[StrictStr] = Field(...)
    end_date: Optional[datetime] = Field(...)
    id: StrictStr = Field(...)
    invoice_id: Optional[StrictStr] = Field(...)
    invoice_item_id: Optional[StrictStr] = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    promotion_code: Optional[PromotionCodeExternal] = Field(...)
    promotion_code_id: Optional[StrictStr] = Field(...)
    start_date: datetime = Field(...)
    subscription_id: Optional[StrictStr] = Field(...)
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["coupon", "coupon_id", "created_at", "customer_id", "end_date", "id", "invoice_id", "invoice_item_id", "is_deleted", "object", "promotion_code", "promotion_code_id", "start_date", "subscription_id", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountExternal:
        """Create an instance of DiscountExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_code
        if self.promotion_code:
            _dict['promotion_code'] = self.promotion_code.to_dict()
        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if end_date (nullable) is None
        # and __fields_set__ contains the field
        if self.end_date is None and "end_date" in self.__fields_set__:
            _dict['end_date'] = None

        # set to None if invoice_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_id is None and "invoice_id" in self.__fields_set__:
            _dict['invoice_id'] = None

        # set to None if invoice_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_item_id is None and "invoice_item_id" in self.__fields_set__:
            _dict['invoice_item_id'] = None

        # set to None if promotion_code (nullable) is None
        # and __fields_set__ contains the field
        if self.promotion_code is None and "promotion_code" in self.__fields_set__:
            _dict['promotion_code'] = None

        # set to None if promotion_code_id (nullable) is None
        # and __fields_set__ contains the field
        if self.promotion_code_id is None and "promotion_code_id" in self.__fields_set__:
            _dict['promotion_code_id'] = None

        # set to None if subscription_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_id is None and "subscription_id" in self.__fields_set__:
            _dict['subscription_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountExternal:
        """Create an instance of DiscountExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountExternal.parse_obj(obj)

        _obj = DiscountExternal.parse_obj({
            "coupon": CouponExternal.from_dict(obj.get("coupon")) if obj.get("coupon") is not None else None,
            "coupon_id": obj.get("coupon_id"),
            "created_at": obj.get("created_at"),
            "customer_id": obj.get("customer_id"),
            "end_date": obj.get("end_date"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "invoice_item_id": obj.get("invoice_item_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "promotion_code": PromotionCodeExternal.from_dict(obj.get("promotion_code")) if obj.get("promotion_code") is not None else None,
            "promotion_code_id": obj.get("promotion_code_id"),
            "start_date": obj.get("start_date"),
            "subscription_id": obj.get("subscription_id"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


