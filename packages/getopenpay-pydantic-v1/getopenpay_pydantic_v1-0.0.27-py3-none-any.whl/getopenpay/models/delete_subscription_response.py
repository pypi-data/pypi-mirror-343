# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from getopenpay.models.invoice_external import InvoiceExternal
from getopenpay.models.subscription_external import SubscriptionExternal

class DeleteSubscriptionResponse(BaseModel):
    """
    DeleteSubscriptionResponse
    """
    invoice: Optional[InvoiceExternal] = None
    subscription: SubscriptionExternal = Field(default=..., description="Deleted subscription.")
    __properties = ["invoice", "subscription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeleteSubscriptionResponse:
        """Create an instance of DeleteSubscriptionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # set to None if invoice (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice is None and "invoice" in self.__fields_set__:
            _dict['invoice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeleteSubscriptionResponse:
        """Create an instance of DeleteSubscriptionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeleteSubscriptionResponse.parse_obj(obj)

        _obj = DeleteSubscriptionResponse.parse_obj({
            "invoice": InvoiceExternal.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "subscription": SubscriptionExternal.from_dict(obj.get("subscription")) if obj.get("subscription") is not None else None
        })
        return _obj


