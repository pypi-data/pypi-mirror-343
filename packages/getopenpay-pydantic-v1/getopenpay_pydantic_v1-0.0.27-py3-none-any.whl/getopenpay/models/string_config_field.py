# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class StringConfigField(BaseModel):
    """
    StringConfigField
    """
    default_value: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    key: StrictStr = Field(default=..., description="The key of the field in the config.")
    max_length: Optional[StrictInt] = None
    min_length: Optional[StrictInt] = None
    name: StrictStr = Field(default=..., description="The name of the field.")
    type: Optional[StrictStr] = 'string'
    value: Optional[StrictStr] = Field(...)
    __properties = ["default_value", "description", "key", "max_length", "min_length", "name", "type", "value"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('string',):
            raise ValueError("must be one of enum values ('string')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StringConfigField:
        """Create an instance of StringConfigField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if default_value (nullable) is None
        # and __fields_set__ contains the field
        if self.default_value is None and "default_value" in self.__fields_set__:
            _dict['default_value'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if max_length (nullable) is None
        # and __fields_set__ contains the field
        if self.max_length is None and "max_length" in self.__fields_set__:
            _dict['max_length'] = None

        # set to None if min_length (nullable) is None
        # and __fields_set__ contains the field
        if self.min_length is None and "min_length" in self.__fields_set__:
            _dict['min_length'] = None

        # set to None if value (nullable) is None
        # and __fields_set__ contains the field
        if self.value is None and "value" in self.__fields_set__:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StringConfigField:
        """Create an instance of StringConfigField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StringConfigField.parse_obj(obj)

        _obj = StringConfigField.parse_obj({
            "default_value": obj.get("default_value"),
            "description": obj.get("description"),
            "key": obj.get("key"),
            "max_length": obj.get("max_length"),
            "min_length": obj.get("min_length"),
            "name": obj.get("name"),
            "type": obj.get("type") if obj.get("type") is not None else 'string',
            "value": obj.get("value")
        })
        return _obj


