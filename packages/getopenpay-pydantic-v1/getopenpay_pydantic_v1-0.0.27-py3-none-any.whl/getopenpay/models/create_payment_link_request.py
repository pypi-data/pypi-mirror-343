# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.checkout_mode import CheckoutMode
from getopenpay.models.checkout_preferences import CheckoutPreferences
from getopenpay.models.create_checkout_line_item import CreateCheckoutLineItem

class CreatePaymentLinkRequest(BaseModel):
    """
    CreatePaymentLinkRequest
    """
    checkout_preferences: Optional[CheckoutPreferences] = None
    coupon_id: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: Optional[StrictStr] = None
    line_items: Optional[conlist(CreateCheckoutLineItem)] = Field(default=None, description="The line items to be purchased by the customer. If empty, the checkout sessions produced by the payment link will be in \"add payment method\" mode.")
    mode: CheckoutMode = Field(default=..., description="The mode of the checkout sessions created by this payment link. Possible values: payment (one-time payments), setup (not supported yet), subscription (recurring payments).")
    success_url: Optional[StrictStr] = Field(...)
    trial_end: Optional[datetime] = None
    trial_from_price: Optional[StrictBool] = None
    trial_period_days: Optional[StrictInt] = None
    __properties = ["checkout_preferences", "coupon_id", "custom_fields", "customer_id", "line_items", "mode", "success_url", "trial_end", "trial_from_price", "trial_period_days"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePaymentLinkRequest:
        """Create an instance of CreatePaymentLinkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of checkout_preferences
        if self.checkout_preferences:
            _dict['checkout_preferences'] = self.checkout_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item in self.line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['line_items'] = _items
        # set to None if checkout_preferences (nullable) is None
        # and __fields_set__ contains the field
        if self.checkout_preferences is None and "checkout_preferences" in self.__fields_set__:
            _dict['checkout_preferences'] = None

        # set to None if coupon_id (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_id is None and "coupon_id" in self.__fields_set__:
            _dict['coupon_id'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if success_url (nullable) is None
        # and __fields_set__ contains the field
        if self.success_url is None and "success_url" in self.__fields_set__:
            _dict['success_url'] = None

        # set to None if trial_end (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_end is None and "trial_end" in self.__fields_set__:
            _dict['trial_end'] = None

        # set to None if trial_from_price (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_from_price is None and "trial_from_price" in self.__fields_set__:
            _dict['trial_from_price'] = None

        # set to None if trial_period_days (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_period_days is None and "trial_period_days" in self.__fields_set__:
            _dict['trial_period_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePaymentLinkRequest:
        """Create an instance of CreatePaymentLinkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePaymentLinkRequest.parse_obj(obj)

        _obj = CreatePaymentLinkRequest.parse_obj({
            "checkout_preferences": CheckoutPreferences.from_dict(obj.get("checkout_preferences")) if obj.get("checkout_preferences") is not None else None,
            "coupon_id": obj.get("coupon_id"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "line_items": [CreateCheckoutLineItem.from_dict(_item) for _item in obj.get("line_items")] if obj.get("line_items") is not None else None,
            "mode": obj.get("mode"),
            "success_url": obj.get("success_url"),
            "trial_end": obj.get("trial_end"),
            "trial_from_price": obj.get("trial_from_price"),
            "trial_period_days": obj.get("trial_period_days")
        })
        return _obj


