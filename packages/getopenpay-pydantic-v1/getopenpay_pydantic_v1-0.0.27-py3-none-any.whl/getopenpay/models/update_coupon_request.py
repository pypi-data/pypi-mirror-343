# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class UpdateCouponRequest(BaseModel):
    """
    Coupons are largely immutable by design, discounts refer back to their coupons whenever they are applied to invoice  # noqa: E501
    """
    is_active: Optional[StrictBool] = None
    max_redemptions: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    redeem_by: Optional[datetime] = None
    __properties = ["is_active", "max_redemptions", "name", "redeem_by"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCouponRequest:
        """Create an instance of UpdateCouponRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if is_active (nullable) is None
        # and __fields_set__ contains the field
        if self.is_active is None and "is_active" in self.__fields_set__:
            _dict['is_active'] = None

        # set to None if max_redemptions (nullable) is None
        # and __fields_set__ contains the field
        if self.max_redemptions is None and "max_redemptions" in self.__fields_set__:
            _dict['max_redemptions'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if redeem_by (nullable) is None
        # and __fields_set__ contains the field
        if self.redeem_by is None and "redeem_by" in self.__fields_set__:
            _dict['redeem_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCouponRequest:
        """Create an instance of UpdateCouponRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateCouponRequest.parse_obj(obj)

        _obj = UpdateCouponRequest.parse_obj({
            "is_active": obj.get("is_active"),
            "max_redemptions": obj.get("max_redemptions"),
            "name": obj.get("name"),
            "redeem_by": obj.get("redeem_by")
        })
        return _obj


