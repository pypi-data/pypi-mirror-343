# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.checkout_mode import CheckoutMode
from getopenpay.models.checkout_session_line_item_external import CheckoutSessionLineItemExternal
from getopenpay.models.checkout_session_status import CheckoutSessionStatus
from getopenpay.models.object_name import ObjectName
from getopenpay.models.setup_intent_external import SetupIntentExternal

class CheckoutSessionExternal(BaseModel):
    """
    CheckoutSessionExternal
    """
    account_id: StrictStr = Field(default=..., description="Unique Identifier of the account.")
    account_name: StrictStr = Field(default=..., description="Name of the account.")
    amount_subtotal_atom: StrictInt = Field(default=..., description="The integer amount representing the subtotal amount for the line items.")
    amount_total_atom: StrictInt = Field(default=..., description="The integer amount representing the total amount for the line items, after discounts and taxes.")
    client_reference_id: Optional[StrictStr] = None
    coupon_id: Optional[StrictStr] = None
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: Optional[StrictStr] = Field(...)
    custom_fields: Optional[Dict[str, Any]] = None
    customer_email: Optional[StrictStr] = Field(...)
    customer_id: Optional[StrictStr] = Field(...)
    id: StrictStr = Field(default=..., description="Unique Identifier of the checkout session.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    line_items: conlist(CheckoutSessionLineItemExternal) = Field(default=..., description="The line items purchased by the customers.")
    mode: CheckoutMode = Field(default=..., description="The mode of the Checkout Session.")
    object: Optional[ObjectName] = None
    return_url: Optional[StrictStr] = Field(...)
    secure_token: StrictStr = Field(default=..., description="The random secure token associated with the checkout session.")
    setup_intent: Optional[SetupIntentExternal] = Field(...)
    status: CheckoutSessionStatus = Field(default=..., description="The current status of the checkout session.")
    subscription_id: Optional[StrictStr] = None
    subscription_ids: Optional[conlist(StrictStr)] = Field(...)
    success_url: Optional[StrictStr] = Field(...)
    tax_amount_atom: StrictInt = Field(default=..., description="The integer amount representing the tax amount for the line items.")
    trial_end: Optional[datetime] = Field(...)
    trial_from_price: Optional[StrictBool] = Field(...)
    trial_period_days: Optional[StrictInt] = Field(...)
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    url: StrictStr = Field(default=..., description="The main URL for this checkout session.")
    __properties = ["account_id", "account_name", "amount_subtotal_atom", "amount_total_atom", "client_reference_id", "coupon_id", "created_at", "currency", "custom_fields", "customer_email", "customer_id", "id", "is_deleted", "line_items", "mode", "object", "return_url", "secure_token", "setup_intent", "status", "subscription_id", "subscription_ids", "success_url", "tax_amount_atom", "trial_end", "trial_from_price", "trial_period_days", "updated_at", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckoutSessionExternal:
        """Create an instance of CheckoutSessionExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item in self.line_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of setup_intent
        if self.setup_intent:
            _dict['setup_intent'] = self.setup_intent.to_dict()
        # set to None if client_reference_id (nullable) is None
        # and __fields_set__ contains the field
        if self.client_reference_id is None and "client_reference_id" in self.__fields_set__:
            _dict['client_reference_id'] = None

        # set to None if coupon_id (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_id is None and "coupon_id" in self.__fields_set__:
            _dict['coupon_id'] = None

        # set to None if currency (nullable) is None
        # and __fields_set__ contains the field
        if self.currency is None and "currency" in self.__fields_set__:
            _dict['currency'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if customer_email (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_email is None and "customer_email" in self.__fields_set__:
            _dict['customer_email'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if return_url (nullable) is None
        # and __fields_set__ contains the field
        if self.return_url is None and "return_url" in self.__fields_set__:
            _dict['return_url'] = None

        # set to None if setup_intent (nullable) is None
        # and __fields_set__ contains the field
        if self.setup_intent is None and "setup_intent" in self.__fields_set__:
            _dict['setup_intent'] = None

        # set to None if subscription_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_id is None and "subscription_id" in self.__fields_set__:
            _dict['subscription_id'] = None

        # set to None if subscription_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_ids is None and "subscription_ids" in self.__fields_set__:
            _dict['subscription_ids'] = None

        # set to None if success_url (nullable) is None
        # and __fields_set__ contains the field
        if self.success_url is None and "success_url" in self.__fields_set__:
            _dict['success_url'] = None

        # set to None if trial_end (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_end is None and "trial_end" in self.__fields_set__:
            _dict['trial_end'] = None

        # set to None if trial_from_price (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_from_price is None and "trial_from_price" in self.__fields_set__:
            _dict['trial_from_price'] = None

        # set to None if trial_period_days (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_period_days is None and "trial_period_days" in self.__fields_set__:
            _dict['trial_period_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckoutSessionExternal:
        """Create an instance of CheckoutSessionExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckoutSessionExternal.parse_obj(obj)

        _obj = CheckoutSessionExternal.parse_obj({
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "amount_subtotal_atom": obj.get("amount_subtotal_atom"),
            "amount_total_atom": obj.get("amount_total_atom"),
            "client_reference_id": obj.get("client_reference_id"),
            "coupon_id": obj.get("coupon_id"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer_email": obj.get("customer_email"),
            "customer_id": obj.get("customer_id"),
            "id": obj.get("id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "line_items": [CheckoutSessionLineItemExternal.from_dict(_item) for _item in obj.get("line_items")] if obj.get("line_items") is not None else None,
            "mode": obj.get("mode"),
            "object": obj.get("object"),
            "return_url": obj.get("return_url"),
            "secure_token": obj.get("secure_token"),
            "setup_intent": SetupIntentExternal.from_dict(obj.get("setup_intent")) if obj.get("setup_intent") is not None else None,
            "status": obj.get("status"),
            "subscription_id": obj.get("subscription_id"),
            "subscription_ids": obj.get("subscription_ids"),
            "success_url": obj.get("success_url"),
            "tax_amount_atom": obj.get("tax_amount_atom"),
            "trial_end": obj.get("trial_end"),
            "trial_from_price": obj.get("trial_from_price"),
            "trial_period_days": obj.get("trial_period_days"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url")
        })
        return _obj


