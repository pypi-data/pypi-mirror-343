# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from getopenpay.models.calendar_interval_enum import CalendarIntervalEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName

class CheckoutSessionLineItemExternal(BaseModel):
    """
    CheckoutSessionLineItemExternal
    """
    amount_subtotal_atom: StrictInt = Field(...)
    amount_total_atom: StrictInt = Field(...)
    billing_interval: Optional[CalendarIntervalEnum] = Field(...)
    billing_interval_count: Optional[StrictInt] = Field(...)
    checkout_session_id: Optional[StrictStr] = Field(...)
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(...)
    custom_fields: Optional[Dict[str, Any]] = Field(...)
    description: Optional[StrictStr] = Field(...)
    description_detailed: Optional[StrictStr] = Field(...)
    id: StrictStr = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    price_id: StrictStr = Field(...)
    product_id: StrictStr = Field(...)
    quantity: StrictInt = Field(...)
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["amount_subtotal_atom", "amount_total_atom", "billing_interval", "billing_interval_count", "checkout_session_id", "created_at", "currency", "custom_fields", "description", "description_detailed", "id", "is_deleted", "object", "price_id", "product_id", "quantity", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckoutSessionLineItemExternal:
        """Create an instance of CheckoutSessionLineItemExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if billing_interval (nullable) is None
        # and __fields_set__ contains the field
        if self.billing_interval is None and "billing_interval" in self.__fields_set__:
            _dict['billing_interval'] = None

        # set to None if billing_interval_count (nullable) is None
        # and __fields_set__ contains the field
        if self.billing_interval_count is None and "billing_interval_count" in self.__fields_set__:
            _dict['billing_interval_count'] = None

        # set to None if checkout_session_id (nullable) is None
        # and __fields_set__ contains the field
        if self.checkout_session_id is None and "checkout_session_id" in self.__fields_set__:
            _dict['checkout_session_id'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if description_detailed (nullable) is None
        # and __fields_set__ contains the field
        if self.description_detailed is None and "description_detailed" in self.__fields_set__:
            _dict['description_detailed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckoutSessionLineItemExternal:
        """Create an instance of CheckoutSessionLineItemExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckoutSessionLineItemExternal.parse_obj(obj)

        _obj = CheckoutSessionLineItemExternal.parse_obj({
            "amount_subtotal_atom": obj.get("amount_subtotal_atom"),
            "amount_total_atom": obj.get("amount_total_atom"),
            "billing_interval": obj.get("billing_interval"),
            "billing_interval_count": obj.get("billing_interval_count"),
            "checkout_session_id": obj.get("checkout_session_id"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "description_detailed": obj.get("description_detailed"),
            "id": obj.get("id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "price_id": obj.get("price_id"),
            "product_id": obj.get("product_id"),
            "quantity": obj.get("quantity"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


