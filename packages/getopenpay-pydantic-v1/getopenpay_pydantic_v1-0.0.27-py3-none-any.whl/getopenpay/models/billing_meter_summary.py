# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr

class BillingMeterSummary(BaseModel):
    """
    BillingMeterSummary
    """
    aggregated_value: StrictInt = Field(default=..., description="Aggregated value of all the events within start_time and end_time. The aggregation strategy is defined on meter via default_aggregation.")
    document_count: StrictInt = Field(default=..., description="Count of events found within start_time and end_time.")
    end_datetime: datetime = Field(default=..., description="End datetime for this event summary")
    meter_id: StrictStr = Field(default=..., description="The if of billing meter associated with this event summary.")
    start_datetime: datetime = Field(default=..., description="Start datetime for this event summary")
    __properties = ["aggregated_value", "document_count", "end_datetime", "meter_id", "start_datetime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillingMeterSummary:
        """Create an instance of BillingMeterSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillingMeterSummary:
        """Create an instance of BillingMeterSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillingMeterSummary.parse_obj(obj)

        _obj = BillingMeterSummary.parse_obj({
            "aggregated_value": obj.get("aggregated_value"),
            "document_count": obj.get("document_count"),
            "end_datetime": obj.get("end_datetime"),
            "meter_id": obj.get("meter_id"),
            "start_datetime": obj.get("start_datetime")
        })
        return _obj


