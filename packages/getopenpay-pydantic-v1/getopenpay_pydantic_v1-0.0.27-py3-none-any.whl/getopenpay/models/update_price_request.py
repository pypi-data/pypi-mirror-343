# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from getopenpay.models.calendar_interval_enum import CalendarIntervalEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.price_tier_params import PriceTierParams
from getopenpay.models.price_type_enum import PriceTypeEnum
from getopenpay.models.pricing_model import PricingModel
from getopenpay.models.usage_agg_method_enum import UsageAggMethodEnum
from getopenpay.models.usage_type_enum import UsageTypeEnum

class UpdatePriceRequest(BaseModel):
    """
    UpdatePriceRequest
    """
    aggregate_usage: Optional[UsageAggMethodEnum] = None
    billing_interval: Optional[CalendarIntervalEnum] = None
    billing_interval_count: Optional[StrictInt] = None
    can_only_be_purchased_with: Optional[conlist(StrictStr)] = Field(default=None, description="This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.")
    contract_auto_renew: Optional[StrictBool] = None
    contract_term_multiple: Optional[StrictInt] = None
    currency: Optional[CurrencyEnum] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_net_d: Optional[StrictInt] = None
    internal_description: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = None
    is_exclusive: Optional[StrictBool] = None
    listed_exclusively_for_customers: Optional[conlist(StrictStr)] = Field(default=None, description="When listed_exclusively_for_customers is passed only customers under listed_exclusively_for_customers can list the given price. Anyone who has a payment_link containing the price can view and subscribe the prices regardless of it.Please do not pass a value if a price is not exclusive.")
    meta: Optional[Dict[str, Any]] = None
    meter_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    price_tiers: Optional[conlist(PriceTierParams)] = Field(default=None, description="List of price_tiers.")
    price_type: Optional[PriceTypeEnum] = None
    pricing_model: Optional[PricingModel] = None
    transform_quantity_divide_by: Optional[Union[StrictFloat, StrictInt]] = None
    trial_period_days: Optional[StrictInt] = None
    unit_amount_atom: Optional[StrictInt] = None
    usage_type: Optional[UsageTypeEnum] = None
    __properties = ["aggregate_usage", "billing_interval", "billing_interval_count", "can_only_be_purchased_with", "contract_auto_renew", "contract_term_multiple", "currency", "custom_fields", "default_net_d", "internal_description", "is_active", "is_exclusive", "listed_exclusively_for_customers", "meta", "meter_id", "name", "price_tiers", "price_type", "pricing_model", "transform_quantity_divide_by", "trial_period_days", "unit_amount_atom", "usage_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePriceRequest:
        """Create an instance of UpdatePriceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in price_tiers (list)
        _items = []
        if self.price_tiers:
            for _item in self.price_tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['price_tiers'] = _items
        # set to None if aggregate_usage (nullable) is None
        # and __fields_set__ contains the field
        if self.aggregate_usage is None and "aggregate_usage" in self.__fields_set__:
            _dict['aggregate_usage'] = None

        # set to None if billing_interval (nullable) is None
        # and __fields_set__ contains the field
        if self.billing_interval is None and "billing_interval" in self.__fields_set__:
            _dict['billing_interval'] = None

        # set to None if billing_interval_count (nullable) is None
        # and __fields_set__ contains the field
        if self.billing_interval_count is None and "billing_interval_count" in self.__fields_set__:
            _dict['billing_interval_count'] = None

        # set to None if contract_auto_renew (nullable) is None
        # and __fields_set__ contains the field
        if self.contract_auto_renew is None and "contract_auto_renew" in self.__fields_set__:
            _dict['contract_auto_renew'] = None

        # set to None if contract_term_multiple (nullable) is None
        # and __fields_set__ contains the field
        if self.contract_term_multiple is None and "contract_term_multiple" in self.__fields_set__:
            _dict['contract_term_multiple'] = None

        # set to None if currency (nullable) is None
        # and __fields_set__ contains the field
        if self.currency is None and "currency" in self.__fields_set__:
            _dict['currency'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if default_net_d (nullable) is None
        # and __fields_set__ contains the field
        if self.default_net_d is None and "default_net_d" in self.__fields_set__:
            _dict['default_net_d'] = None

        # set to None if internal_description (nullable) is None
        # and __fields_set__ contains the field
        if self.internal_description is None and "internal_description" in self.__fields_set__:
            _dict['internal_description'] = None

        # set to None if is_active (nullable) is None
        # and __fields_set__ contains the field
        if self.is_active is None and "is_active" in self.__fields_set__:
            _dict['is_active'] = None

        # set to None if is_exclusive (nullable) is None
        # and __fields_set__ contains the field
        if self.is_exclusive is None and "is_exclusive" in self.__fields_set__:
            _dict['is_exclusive'] = None

        # set to None if meta (nullable) is None
        # and __fields_set__ contains the field
        if self.meta is None and "meta" in self.__fields_set__:
            _dict['meta'] = None

        # set to None if meter_id (nullable) is None
        # and __fields_set__ contains the field
        if self.meter_id is None and "meter_id" in self.__fields_set__:
            _dict['meter_id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if price_type (nullable) is None
        # and __fields_set__ contains the field
        if self.price_type is None and "price_type" in self.__fields_set__:
            _dict['price_type'] = None

        # set to None if pricing_model (nullable) is None
        # and __fields_set__ contains the field
        if self.pricing_model is None and "pricing_model" in self.__fields_set__:
            _dict['pricing_model'] = None

        # set to None if transform_quantity_divide_by (nullable) is None
        # and __fields_set__ contains the field
        if self.transform_quantity_divide_by is None and "transform_quantity_divide_by" in self.__fields_set__:
            _dict['transform_quantity_divide_by'] = None

        # set to None if trial_period_days (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_period_days is None and "trial_period_days" in self.__fields_set__:
            _dict['trial_period_days'] = None

        # set to None if unit_amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.unit_amount_atom is None and "unit_amount_atom" in self.__fields_set__:
            _dict['unit_amount_atom'] = None

        # set to None if usage_type (nullable) is None
        # and __fields_set__ contains the field
        if self.usage_type is None and "usage_type" in self.__fields_set__:
            _dict['usage_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePriceRequest:
        """Create an instance of UpdatePriceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePriceRequest.parse_obj(obj)

        _obj = UpdatePriceRequest.parse_obj({
            "aggregate_usage": obj.get("aggregate_usage"),
            "billing_interval": obj.get("billing_interval"),
            "billing_interval_count": obj.get("billing_interval_count"),
            "can_only_be_purchased_with": obj.get("can_only_be_purchased_with"),
            "contract_auto_renew": obj.get("contract_auto_renew"),
            "contract_term_multiple": obj.get("contract_term_multiple"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "default_net_d": obj.get("default_net_d"),
            "internal_description": obj.get("internal_description"),
            "is_active": obj.get("is_active"),
            "is_exclusive": obj.get("is_exclusive"),
            "listed_exclusively_for_customers": obj.get("listed_exclusively_for_customers"),
            "meta": obj.get("meta"),
            "meter_id": obj.get("meter_id"),
            "name": obj.get("name"),
            "price_tiers": [PriceTierParams.from_dict(_item) for _item in obj.get("price_tiers")] if obj.get("price_tiers") is not None else None,
            "price_type": obj.get("price_type"),
            "pricing_model": obj.get("pricing_model"),
            "transform_quantity_divide_by": obj.get("transform_quantity_divide_by"),
            "trial_period_days": obj.get("trial_period_days"),
            "unit_amount_atom": obj.get("unit_amount_atom"),
            "usage_type": obj.get("usage_type")
        })
        return _obj


