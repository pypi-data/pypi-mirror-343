# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_intent_status import PaymentIntentStatus

class PaymentIntentExternal(BaseModel):
    """
    PaymentIntentExternal
    """
    amount_atom: StrictInt = Field(...)
    amount_atom_capturable: Optional[StrictInt] = Field(...)
    amount_atom_received: Optional[StrictInt] = Field(...)
    charge_ids: conlist(StrictStr) = Field(...)
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(...)
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: StrictStr = Field(...)
    decline_reason: Optional[StrictStr] = Field(...)
    id: StrictStr = Field(...)
    invoice: Optional[InvoiceExternal] = Field(...)
    invoice_id: Optional[StrictStr] = Field(...)
    invoice_payment_provider_type_fee: Optional[StrictInt] = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    last_refund_date: Optional[datetime] = Field(...)
    object: Optional[ObjectName] = None
    payment_method_id: Optional[StrictStr] = Field(...)
    payment_processor_name: Optional[StrictStr] = Field(...)
    refund_ids: conlist(StrictStr) = Field(...)
    status: PaymentIntentStatus = Field(...)
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["amount_atom", "amount_atom_capturable", "amount_atom_received", "charge_ids", "created_at", "currency", "custom_fields", "customer_id", "decline_reason", "id", "invoice", "invoice_id", "invoice_payment_provider_type_fee", "is_deleted", "last_refund_date", "object", "payment_method_id", "payment_processor_name", "refund_ids", "status", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentIntentExternal:
        """Create an instance of PaymentIntentExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # set to None if amount_atom_capturable (nullable) is None
        # and __fields_set__ contains the field
        if self.amount_atom_capturable is None and "amount_atom_capturable" in self.__fields_set__:
            _dict['amount_atom_capturable'] = None

        # set to None if amount_atom_received (nullable) is None
        # and __fields_set__ contains the field
        if self.amount_atom_received is None and "amount_atom_received" in self.__fields_set__:
            _dict['amount_atom_received'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if decline_reason (nullable) is None
        # and __fields_set__ contains the field
        if self.decline_reason is None and "decline_reason" in self.__fields_set__:
            _dict['decline_reason'] = None

        # set to None if invoice (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice is None and "invoice" in self.__fields_set__:
            _dict['invoice'] = None

        # set to None if invoice_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_id is None and "invoice_id" in self.__fields_set__:
            _dict['invoice_id'] = None

        # set to None if invoice_payment_provider_type_fee (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_payment_provider_type_fee is None and "invoice_payment_provider_type_fee" in self.__fields_set__:
            _dict['invoice_payment_provider_type_fee'] = None

        # set to None if last_refund_date (nullable) is None
        # and __fields_set__ contains the field
        if self.last_refund_date is None and "last_refund_date" in self.__fields_set__:
            _dict['last_refund_date'] = None

        # set to None if payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method_id is None and "payment_method_id" in self.__fields_set__:
            _dict['payment_method_id'] = None

        # set to None if payment_processor_name (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_processor_name is None and "payment_processor_name" in self.__fields_set__:
            _dict['payment_processor_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentIntentExternal:
        """Create an instance of PaymentIntentExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentIntentExternal.parse_obj(obj)

        _obj = PaymentIntentExternal.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "amount_atom_capturable": obj.get("amount_atom_capturable"),
            "amount_atom_received": obj.get("amount_atom_received"),
            "charge_ids": obj.get("charge_ids"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "decline_reason": obj.get("decline_reason"),
            "id": obj.get("id"),
            "invoice": InvoiceExternal.from_dict(obj.get("invoice")) if obj.get("invoice") is not None else None,
            "invoice_id": obj.get("invoice_id"),
            "invoice_payment_provider_type_fee": obj.get("invoice_payment_provider_type_fee"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "last_refund_date": obj.get("last_refund_date"),
            "object": obj.get("object"),
            "payment_method_id": obj.get("payment_method_id"),
            "payment_processor_name": obj.get("payment_processor_name"),
            "refund_ids": obj.get("refund_ids"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

from getopenpay.models.invoice_external import InvoiceExternal
PaymentIntentExternal.update_forward_refs()

