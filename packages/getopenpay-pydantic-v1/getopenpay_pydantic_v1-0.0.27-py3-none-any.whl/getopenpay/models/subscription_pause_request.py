# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class SubscriptionPauseRequest(BaseModel):
    """
    SubscriptionPauseRequest
    """
    is_preview: Optional[StrictBool] = Field(default=False, description="Whether the request is in preview mode (Subscription won't actually pause)")
    number_of_billing_cycles_to_skip: Optional[StrictInt] = None
    resumption_date: Optional[datetime] = None
    __properties = ["is_preview", "number_of_billing_cycles_to_skip", "resumption_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionPauseRequest:
        """Create an instance of SubscriptionPauseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if number_of_billing_cycles_to_skip (nullable) is None
        # and __fields_set__ contains the field
        if self.number_of_billing_cycles_to_skip is None and "number_of_billing_cycles_to_skip" in self.__fields_set__:
            _dict['number_of_billing_cycles_to_skip'] = None

        # set to None if resumption_date (nullable) is None
        # and __fields_set__ contains the field
        if self.resumption_date is None and "resumption_date" in self.__fields_set__:
            _dict['resumption_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionPauseRequest:
        """Create an instance of SubscriptionPauseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionPauseRequest.parse_obj(obj)

        _obj = SubscriptionPauseRequest.parse_obj({
            "is_preview": obj.get("is_preview") if obj.get("is_preview") is not None else False,
            "number_of_billing_cycles_to_skip": obj.get("number_of_billing_cycles_to_skip"),
            "resumption_date": obj.get("resumption_date")
        })
        return _obj


