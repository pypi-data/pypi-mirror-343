# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class UpdateInvoiceRequest(BaseModel):
    """
    UpdateInvoiceRequest
    """
    coupon_id: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = Field(default='Manual creation of invoice', description="Description for newly created invoice")
    email_invoice_on_finalization: Optional[StrictBool] = None
    payment_method_id: Optional[StrictStr] = None
    __properties = ["coupon_id", "custom_fields", "description", "email_invoice_on_finalization", "payment_method_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateInvoiceRequest:
        """Create an instance of UpdateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if coupon_id (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_id is None and "coupon_id" in self.__fields_set__:
            _dict['coupon_id'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if email_invoice_on_finalization (nullable) is None
        # and __fields_set__ contains the field
        if self.email_invoice_on_finalization is None and "email_invoice_on_finalization" in self.__fields_set__:
            _dict['email_invoice_on_finalization'] = None

        # set to None if payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method_id is None and "payment_method_id" in self.__fields_set__:
            _dict['payment_method_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateInvoiceRequest:
        """Create an instance of UpdateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateInvoiceRequest.parse_obj(obj)

        _obj = UpdateInvoiceRequest.parse_obj({
            "coupon_id": obj.get("coupon_id"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description") if obj.get("description") is not None else 'Manual creation of invoice',
            "email_invoice_on_finalization": obj.get("email_invoice_on_finalization"),
            "payment_method_id": obj.get("payment_method_id")
        })
        return _obj


