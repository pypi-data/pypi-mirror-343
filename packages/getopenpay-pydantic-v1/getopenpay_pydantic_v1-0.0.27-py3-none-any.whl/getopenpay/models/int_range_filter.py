# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt

class IntRangeFilter(BaseModel):
    """
    IntRangeFilter
    """
    eq: Optional[StrictInt] = None
    gt: Optional[StrictInt] = None
    gte: Optional[StrictInt] = None
    lt: Optional[StrictInt] = None
    lte: Optional[StrictInt] = None
    __properties = ["eq", "gt", "gte", "lt", "lte"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntRangeFilter:
        """Create an instance of IntRangeFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if eq (nullable) is None
        # and __fields_set__ contains the field
        if self.eq is None and "eq" in self.__fields_set__:
            _dict['eq'] = None

        # set to None if gt (nullable) is None
        # and __fields_set__ contains the field
        if self.gt is None and "gt" in self.__fields_set__:
            _dict['gt'] = None

        # set to None if gte (nullable) is None
        # and __fields_set__ contains the field
        if self.gte is None and "gte" in self.__fields_set__:
            _dict['gte'] = None

        # set to None if lt (nullable) is None
        # and __fields_set__ contains the field
        if self.lt is None and "lt" in self.__fields_set__:
            _dict['lt'] = None

        # set to None if lte (nullable) is None
        # and __fields_set__ contains the field
        if self.lte is None and "lte" in self.__fields_set__:
            _dict['lte'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntRangeFilter:
        """Create an instance of IntRangeFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntRangeFilter.parse_obj(obj)

        _obj = IntRangeFilter.parse_obj({
            "eq": obj.get("eq"),
            "gt": obj.get("gt"),
            "gte": obj.get("gte"),
            "lt": obj.get("lt"),
            "lte": obj.get("lte")
        })
        return _obj


