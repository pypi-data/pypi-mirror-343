# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class CreateBillingMeterEventRequest(BaseModel):
    """
    CreateBillingMeterEventRequest
    """
    event_datetime: Optional[datetime] = Field(default=None, description="The time of the event.")
    event_name: StrictStr = Field(default=..., description="The name of the meter event. Corresponds with the event_name field on a meter.")
    identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this.")
    payload: Dict[str, Any] = Field(default=..., description="The payload of the event. This must contain the fields corresponding to a meterâ€™s event_payload_customer_mapping_key (default is customer_id) and event_payload_value_key (default is value). ")
    __properties = ["event_datetime", "event_name", "identifier", "payload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBillingMeterEventRequest:
        """Create an instance of CreateBillingMeterEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBillingMeterEventRequest:
        """Create an instance of CreateBillingMeterEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBillingMeterEventRequest.parse_obj(obj)

        _obj = CreateBillingMeterEventRequest.parse_obj({
            "event_datetime": obj.get("event_datetime"),
            "event_name": obj.get("event_name"),
            "identifier": obj.get("identifier"),
            "payload": obj.get("payload")
        })
        return _obj


