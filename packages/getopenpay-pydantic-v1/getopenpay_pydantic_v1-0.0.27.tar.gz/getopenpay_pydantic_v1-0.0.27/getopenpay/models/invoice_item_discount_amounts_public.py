# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InvoiceItemDiscountAmountsPublic(BaseModel):
    """
    InvoiceItemDiscountAmountsPublic
    """
    amount_atom: StrictInt = Field(default=..., description="The amount_atom of the discount.")
    coupon_description: Optional[StrictStr] = None
    coupon_name: StrictStr = Field(default=..., description="Name of the coupon that was applied to get this discount.")
    __properties = ["amount_atom", "coupon_description", "coupon_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceItemDiscountAmountsPublic:
        """Create an instance of InvoiceItemDiscountAmountsPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if coupon_description (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_description is None and "coupon_description" in self.__fields_set__:
            _dict['coupon_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceItemDiscountAmountsPublic:
        """Create an instance of InvoiceItemDiscountAmountsPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceItemDiscountAmountsPublic.parse_obj(obj)

        _obj = InvoiceItemDiscountAmountsPublic.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "coupon_description": obj.get("coupon_description"),
            "coupon_name": obj.get("coupon_name")
        })
        return _obj


