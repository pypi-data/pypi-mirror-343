# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from getopenpay.models.credit_note_line_type import CreditNoteLineType
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName

class CreditNoteItemExternal(BaseModel):
    """
    CreditNoteItemExternal
    """
    amount_atom: StrictInt = Field(default=..., description="The integer amount representing the gross amount being credited for this credit_note_item. It is in atomic units (in USD this is cents).")
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(default=..., description="Three-letter ISO currency code, in lowercase.")
    id: StrictStr = Field(default=..., description="Unique Identifier of the credit_note_item.")
    invoice_item_id: Optional[StrictStr] = None
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    quantity: Optional[StrictInt] = Field(default=1, description="Quantity of the product being credited.")
    type: CreditNoteLineType = Field(default=..., description="The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.")
    unit_amount_atom: Optional[StrictInt] = None
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["amount_atom", "created_at", "currency", "id", "invoice_item_id", "is_deleted", "object", "quantity", "type", "unit_amount_atom", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditNoteItemExternal:
        """Create an instance of CreditNoteItemExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if invoice_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_item_id is None and "invoice_item_id" in self.__fields_set__:
            _dict['invoice_item_id'] = None

        # set to None if unit_amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.unit_amount_atom is None and "unit_amount_atom" in self.__fields_set__:
            _dict['unit_amount_atom'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditNoteItemExternal:
        """Create an instance of CreditNoteItemExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditNoteItemExternal.parse_obj(obj)

        _obj = CreditNoteItemExternal.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "id": obj.get("id"),
            "invoice_item_id": obj.get("invoice_item_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1,
            "type": obj.get("type"),
            "unit_amount_atom": obj.get("unit_amount_atom"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


