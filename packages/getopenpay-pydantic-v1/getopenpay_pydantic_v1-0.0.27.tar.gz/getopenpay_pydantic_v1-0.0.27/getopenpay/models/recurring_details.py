# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from getopenpay.models.usage_agg_method_enum import UsageAggMethodEnum
from getopenpay.models.usage_type_enum import UsageTypeEnum

class RecurringDetails(BaseModel):
    """
    RecurringDetails
    """
    aggregate_usage: Optional[UsageAggMethodEnum] = None
    trial_period_days: Optional[StrictInt] = 0
    usage_type: UsageTypeEnum = Field(...)
    __properties = ["aggregate_usage", "trial_period_days", "usage_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecurringDetails:
        """Create an instance of RecurringDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if aggregate_usage (nullable) is None
        # and __fields_set__ contains the field
        if self.aggregate_usage is None and "aggregate_usage" in self.__fields_set__:
            _dict['aggregate_usage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecurringDetails:
        """Create an instance of RecurringDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecurringDetails.parse_obj(obj)

        _obj = RecurringDetails.parse_obj({
            "aggregate_usage": obj.get("aggregate_usage"),
            "trial_period_days": obj.get("trial_period_days") if obj.get("trial_period_days") is not None else 0,
            "usage_type": obj.get("usage_type")
        })
        return _obj


