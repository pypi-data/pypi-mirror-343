# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.collection_method_enum import CollectionMethodEnum
from getopenpay.models.inline_subscription_item_update import InlineSubscriptionItemUpdate
from getopenpay.models.proration_enum import ProrationEnum

class UpdateSubscriptionRequest(BaseModel):
    """
    UpdateSubscriptionRequest
    """
    cancel_at_end: Optional[StrictBool] = None
    collection_method: Optional[CollectionMethodEnum] = None
    coupon_id: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    is_preview: Optional[StrictBool] = Field(default=False, description="Whether the request is in preview mode (subscriptions won't actually be updated)")
    items: Optional[conlist(InlineSubscriptionItemUpdate)] = Field(default=None, description="A list of up to 20 subscription items, each with an attached price.")
    net_d: Optional[StrictInt] = None
    new_period_end: Optional[datetime] = None
    payment_method_id: Optional[StrictStr] = None
    preview_renewal_invoices: Optional[StrictBool] = Field(default=False, description="Whether to include the preview of the renewal invoices for the subscriptions in the response.")
    promotion_code: Optional[StrictStr] = None
    proration_behavior: Optional[ProrationEnum] = Field(default=None, description="Determines how to handle prorations when the billable items changes")
    trial_end: Optional[datetime] = None
    trial_period_days: Optional[StrictInt] = None
    __properties = ["cancel_at_end", "collection_method", "coupon_id", "custom_fields", "description", "is_preview", "items", "net_d", "new_period_end", "payment_method_id", "preview_renewal_invoices", "promotion_code", "proration_behavior", "trial_end", "trial_period_days"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateSubscriptionRequest:
        """Create an instance of UpdateSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # set to None if cancel_at_end (nullable) is None
        # and __fields_set__ contains the field
        if self.cancel_at_end is None and "cancel_at_end" in self.__fields_set__:
            _dict['cancel_at_end'] = None

        # set to None if collection_method (nullable) is None
        # and __fields_set__ contains the field
        if self.collection_method is None and "collection_method" in self.__fields_set__:
            _dict['collection_method'] = None

        # set to None if coupon_id (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_id is None and "coupon_id" in self.__fields_set__:
            _dict['coupon_id'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if net_d (nullable) is None
        # and __fields_set__ contains the field
        if self.net_d is None and "net_d" in self.__fields_set__:
            _dict['net_d'] = None

        # set to None if new_period_end (nullable) is None
        # and __fields_set__ contains the field
        if self.new_period_end is None and "new_period_end" in self.__fields_set__:
            _dict['new_period_end'] = None

        # set to None if payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method_id is None and "payment_method_id" in self.__fields_set__:
            _dict['payment_method_id'] = None

        # set to None if promotion_code (nullable) is None
        # and __fields_set__ contains the field
        if self.promotion_code is None and "promotion_code" in self.__fields_set__:
            _dict['promotion_code'] = None

        # set to None if trial_end (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_end is None and "trial_end" in self.__fields_set__:
            _dict['trial_end'] = None

        # set to None if trial_period_days (nullable) is None
        # and __fields_set__ contains the field
        if self.trial_period_days is None and "trial_period_days" in self.__fields_set__:
            _dict['trial_period_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateSubscriptionRequest:
        """Create an instance of UpdateSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateSubscriptionRequest.parse_obj(obj)

        _obj = UpdateSubscriptionRequest.parse_obj({
            "cancel_at_end": obj.get("cancel_at_end"),
            "collection_method": obj.get("collection_method"),
            "coupon_id": obj.get("coupon_id"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "is_preview": obj.get("is_preview") if obj.get("is_preview") is not None else False,
            "items": [InlineSubscriptionItemUpdate.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "net_d": obj.get("net_d"),
            "new_period_end": obj.get("new_period_end"),
            "payment_method_id": obj.get("payment_method_id"),
            "preview_renewal_invoices": obj.get("preview_renewal_invoices") if obj.get("preview_renewal_invoices") is not None else False,
            "promotion_code": obj.get("promotion_code"),
            "proration_behavior": obj.get("proration_behavior"),
            "trial_end": obj.get("trial_end"),
            "trial_period_days": obj.get("trial_period_days")
        })
        return _obj


