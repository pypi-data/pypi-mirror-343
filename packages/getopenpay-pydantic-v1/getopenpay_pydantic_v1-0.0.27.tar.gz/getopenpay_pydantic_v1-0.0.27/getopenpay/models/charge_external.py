# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.charge_status_enum import ChargeStatusEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_method_external import PaymentMethodExternal
from getopenpay.models.subscription_external import SubscriptionExternal

class ChargeExternal(BaseModel):
    """
    ChargeExternal
    """
    amount_atom: StrictInt = Field(default=..., description="Charge amount without any fees, in smallest currency unit.")
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(default=..., description="Currency code, e.g., USD.")
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: StrictStr = Field(default=..., description="ID of the customer associated with this charge.")
    disputed: StrictBool = Field(default=..., description="Indicates whether the charge is disputed.")
    failure_code: Optional[StrictStr] = Field(...)
    failure_message: Optional[StrictStr] = Field(...)
    id: StrictStr = Field(default=..., description="Unique Identifier of the charge.")
    invoice_id: Optional[StrictStr] = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    payment_intent_id: StrictStr = Field(default=..., description="ID of the payment intent associated with this charge.")
    payment_intent_mapping_id: Optional[StrictStr] = Field(...)
    payment_method: Optional[PaymentMethodExternal] = None
    payment_method_id: StrictStr = Field(default=..., description="ID of the payment method used for this charge.")
    payment_processor_id: Optional[StrictStr] = Field(...)
    payment_processor_name: Optional[StrictStr] = Field(...)
    provider_type_fee_amount_atom: StrictInt = Field(default=..., description="Fee amount charged due to the payment provider type, in smallest currency unit.")
    refunded: StrictBool = Field(default=..., description="Indicates whether the charge has been refunded.")
    refunded_amount_atom: StrictInt = Field(default=..., description="Amount refunded, in smallest currency unit.")
    status: ChargeStatusEnum = Field(default=..., description="Status of the charge.")
    subscription_ids: Optional[conlist(StrictStr)] = Field(default=None, description="List of subscription ids for which the charge is created.")
    subscriptions: Optional[conlist(SubscriptionExternal)] = Field(default=None, description="List of subscriptions for which the charge is created.")
    total_charge_amount_atom: StrictInt = Field(default=..., description="Total charge amount including fees, in smallest currency unit.")
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["amount_atom", "created_at", "currency", "custom_fields", "customer_id", "disputed", "failure_code", "failure_message", "id", "invoice_id", "is_deleted", "object", "payment_intent_id", "payment_intent_mapping_id", "payment_method", "payment_method_id", "payment_processor_id", "payment_processor_name", "provider_type_fee_amount_atom", "refunded", "refunded_amount_atom", "status", "subscription_ids", "subscriptions", "total_charge_amount_atom", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeExternal:
        """Create an instance of ChargeExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if failure_code (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_code is None and "failure_code" in self.__fields_set__:
            _dict['failure_code'] = None

        # set to None if failure_message (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_message is None and "failure_message" in self.__fields_set__:
            _dict['failure_message'] = None

        # set to None if invoice_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_id is None and "invoice_id" in self.__fields_set__:
            _dict['invoice_id'] = None

        # set to None if payment_intent_mapping_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_intent_mapping_id is None and "payment_intent_mapping_id" in self.__fields_set__:
            _dict['payment_intent_mapping_id'] = None

        # set to None if payment_method (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method is None and "payment_method" in self.__fields_set__:
            _dict['payment_method'] = None

        # set to None if payment_processor_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_processor_id is None and "payment_processor_id" in self.__fields_set__:
            _dict['payment_processor_id'] = None

        # set to None if payment_processor_name (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_processor_name is None and "payment_processor_name" in self.__fields_set__:
            _dict['payment_processor_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeExternal:
        """Create an instance of ChargeExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeExternal.parse_obj(obj)

        _obj = ChargeExternal.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "disputed": obj.get("disputed"),
            "failure_code": obj.get("failure_code"),
            "failure_message": obj.get("failure_message"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "payment_intent_id": obj.get("payment_intent_id"),
            "payment_intent_mapping_id": obj.get("payment_intent_mapping_id"),
            "payment_method": PaymentMethodExternal.from_dict(obj.get("payment_method")) if obj.get("payment_method") is not None else None,
            "payment_method_id": obj.get("payment_method_id"),
            "payment_processor_id": obj.get("payment_processor_id"),
            "payment_processor_name": obj.get("payment_processor_name"),
            "provider_type_fee_amount_atom": obj.get("provider_type_fee_amount_atom"),
            "refunded": obj.get("refunded"),
            "refunded_amount_atom": obj.get("refunded_amount_atom"),
            "status": obj.get("status"),
            "subscription_ids": obj.get("subscription_ids"),
            "subscriptions": [SubscriptionExternal.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None,
            "total_charge_amount_atom": obj.get("total_charge_amount_atom"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


