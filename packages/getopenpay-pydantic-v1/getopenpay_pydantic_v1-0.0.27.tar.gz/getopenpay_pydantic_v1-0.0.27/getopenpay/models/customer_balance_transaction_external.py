# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.customer_balance_transaction_type import CustomerBalanceTransactionType
from getopenpay.models.object_name import ObjectName

class CustomerBalanceTransactionExternal(BaseModel):
    """
    CustomerBalanceTransactionExternal
    """
    amount_atom: StrictInt = Field(...)
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    credit_note_id: Optional[StrictStr] = Field(...)
    currency: CurrencyEnum = Field(...)
    description: Optional[StrictStr] = Field(...)
    ending_balance_amount_atom: StrictInt = Field(...)
    id: StrictStr = Field(...)
    invoice_id: Optional[StrictStr] = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    type: CustomerBalanceTransactionType = Field(...)
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["amount_atom", "created_at", "credit_note_id", "currency", "description", "ending_balance_amount_atom", "id", "invoice_id", "is_deleted", "object", "type", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerBalanceTransactionExternal:
        """Create an instance of CustomerBalanceTransactionExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if credit_note_id (nullable) is None
        # and __fields_set__ contains the field
        if self.credit_note_id is None and "credit_note_id" in self.__fields_set__:
            _dict['credit_note_id'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if invoice_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_id is None and "invoice_id" in self.__fields_set__:
            _dict['invoice_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerBalanceTransactionExternal:
        """Create an instance of CustomerBalanceTransactionExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerBalanceTransactionExternal.parse_obj(obj)

        _obj = CustomerBalanceTransactionExternal.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "created_at": obj.get("created_at"),
            "credit_note_id": obj.get("credit_note_id"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "ending_balance_amount_atom": obj.get("ending_balance_amount_atom"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


