# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class DeleteSubscriptionItemResponse(BaseModel):
    """
    DeleteSubscriptionItemResponse
    """
    deleted_at: Optional[datetime] = Field(...)
    drop_at_end: Optional[StrictBool] = Field(default=False, description="Whether or not this item will be dropped from subscription before next renewal")
    message: Optional[StrictStr] = Field(default='SubscriptionItem deleted successfully.', description="Message describing result of API call.")
    subscription_item_id: StrictStr = Field(default=..., description="Unique identifier of the subscription_item.")
    __properties = ["deleted_at", "drop_at_end", "message", "subscription_item_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeleteSubscriptionItemResponse:
        """Create an instance of DeleteSubscriptionItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if deleted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted_at is None and "deleted_at" in self.__fields_set__:
            _dict['deleted_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeleteSubscriptionItemResponse:
        """Create an instance of DeleteSubscriptionItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeleteSubscriptionItemResponse.parse_obj(obj)

        _obj = DeleteSubscriptionItemResponse.parse_obj({
            "deleted_at": obj.get("deleted_at"),
            "drop_at_end": obj.get("drop_at_end") if obj.get("drop_at_end") is not None else False,
            "message": obj.get("message") if obj.get("message") is not None else 'SubscriptionItem deleted successfully.',
            "subscription_item_id": obj.get("subscription_item_id")
        })
        return _obj


