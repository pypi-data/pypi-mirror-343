# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class CompleteAddress(BaseModel):
    """
    CompleteAddress
    """
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    line1: Optional[StrictStr] = None
    line2: Optional[StrictStr] = None
    line3: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = None
    __properties = ["city", "country", "line1", "line2", "line3", "state", "zip_code"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompleteAddress:
        """Create an instance of CompleteAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if city (nullable) is None
        # and __fields_set__ contains the field
        if self.city is None and "city" in self.__fields_set__:
            _dict['city'] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict['country'] = None

        # set to None if line1 (nullable) is None
        # and __fields_set__ contains the field
        if self.line1 is None and "line1" in self.__fields_set__:
            _dict['line1'] = None

        # set to None if line2 (nullable) is None
        # and __fields_set__ contains the field
        if self.line2 is None and "line2" in self.__fields_set__:
            _dict['line2'] = None

        # set to None if line3 (nullable) is None
        # and __fields_set__ contains the field
        if self.line3 is None and "line3" in self.__fields_set__:
            _dict['line3'] = None

        # set to None if state (nullable) is None
        # and __fields_set__ contains the field
        if self.state is None and "state" in self.__fields_set__:
            _dict['state'] = None

        # set to None if zip_code (nullable) is None
        # and __fields_set__ contains the field
        if self.zip_code is None and "zip_code" in self.__fields_set__:
            _dict['zip_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompleteAddress:
        """Create an instance of CompleteAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompleteAddress.parse_obj(obj)

        _obj = CompleteAddress.parse_obj({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "line3": obj.get("line3"),
            "state": obj.get("state"),
            "zip_code": obj.get("zip_code")
        })
        return _obj


