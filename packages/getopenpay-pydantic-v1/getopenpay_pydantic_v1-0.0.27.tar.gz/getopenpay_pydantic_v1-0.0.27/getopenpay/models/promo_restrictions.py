# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt
from getopenpay.models.currency_enum import CurrencyEnum

class PromoRestrictions(BaseModel):
    """
    PromoRestrictions
    """
    first_time_transaction: Optional[StrictBool] = None
    minimum_amount_atom: Optional[StrictInt] = None
    minimum_amount_currency: Optional[CurrencyEnum] = None
    __properties = ["first_time_transaction", "minimum_amount_atom", "minimum_amount_currency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PromoRestrictions:
        """Create an instance of PromoRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if first_time_transaction (nullable) is None
        # and __fields_set__ contains the field
        if self.first_time_transaction is None and "first_time_transaction" in self.__fields_set__:
            _dict['first_time_transaction'] = None

        # set to None if minimum_amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.minimum_amount_atom is None and "minimum_amount_atom" in self.__fields_set__:
            _dict['minimum_amount_atom'] = None

        # set to None if minimum_amount_currency (nullable) is None
        # and __fields_set__ contains the field
        if self.minimum_amount_currency is None and "minimum_amount_currency" in self.__fields_set__:
            _dict['minimum_amount_currency'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PromoRestrictions:
        """Create an instance of PromoRestrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PromoRestrictions.parse_obj(obj)

        _obj = PromoRestrictions.parse_obj({
            "first_time_transaction": obj.get("first_time_transaction"),
            "minimum_amount_atom": obj.get("minimum_amount_atom"),
            "minimum_amount_currency": obj.get("minimum_amount_currency")
        })
        return _obj


