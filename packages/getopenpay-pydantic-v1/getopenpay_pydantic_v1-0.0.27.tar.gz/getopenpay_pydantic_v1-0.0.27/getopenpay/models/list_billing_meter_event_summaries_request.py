# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from getopenpay.models.meter_event_value_grouping_window import MeterEventValueGroupingWindow

class ListBillingMeterEventSummariesRequest(BaseModel):
    """
    ListBillingMeterEventSummariesRequest
    """
    customer_id: StrictStr = Field(default=..., description="The customer for which to fetch event summaries.")
    end_time: datetime = Field(default=..., description="The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.")
    meter_id: StrictStr = Field(default=..., description="Unique identifier for the meter object.")
    page_number: Optional[conint(strict=True, ge=1)] = Field(default=1, description="Page number")
    page_size: Optional[conint(strict=True, le=100, ge=1)] = Field(default=100, description="Page size")
    start_time: datetime = Field(default=..., description="The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.")
    value_grouping_window: Optional[MeterEventValueGroupingWindow] = None
    __properties = ["customer_id", "end_time", "meter_id", "page_number", "page_size", "start_time", "value_grouping_window"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListBillingMeterEventSummariesRequest:
        """Create an instance of ListBillingMeterEventSummariesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if value_grouping_window (nullable) is None
        # and __fields_set__ contains the field
        if self.value_grouping_window is None and "value_grouping_window" in self.__fields_set__:
            _dict['value_grouping_window'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListBillingMeterEventSummariesRequest:
        """Create an instance of ListBillingMeterEventSummariesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListBillingMeterEventSummariesRequest.parse_obj(obj)

        _obj = ListBillingMeterEventSummariesRequest.parse_obj({
            "customer_id": obj.get("customer_id"),
            "end_time": obj.get("end_time"),
            "meter_id": obj.get("meter_id"),
            "page_number": obj.get("page_number") if obj.get("page_number") is not None else 1,
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 100,
            "start_time": obj.get("start_time"),
            "value_grouping_window": obj.get("value_grouping_window")
        })
        return _obj


