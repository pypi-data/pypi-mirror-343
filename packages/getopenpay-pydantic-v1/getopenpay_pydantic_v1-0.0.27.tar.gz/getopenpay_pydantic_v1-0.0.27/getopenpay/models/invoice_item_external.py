# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.invoice_item_discount_amounts_external import InvoiceItemDiscountAmountsExternal
from getopenpay.models.object_name import ObjectName
from getopenpay.models.price_type_enum import PriceTypeEnum

class InvoiceItemExternal(BaseModel):
    """
    InvoiceItemExternal
    """
    account_id: StrictStr = Field(default=..., description="Unique identifier of the account.")
    amount_atom: StrictInt = Field(default=..., description="Total amount of invoice_item in atomic units (in USD this is cents).")
    amount_atom_considering_discount_applied: StrictInt = Field(default=..., description="Total amount of invoice_item in atomic units considering discounts. Contains both invoice-level and invoice item-level discounts")
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(default=..., description="Three-letter ISO currency code, in lowercase.")
    customer_id: StrictStr = Field(default=..., description="Unique identifier of the customer.")
    description: Optional[StrictStr] = Field(...)
    discount_amount_atoms: conlist(InvoiceItemDiscountAmountsExternal) = Field(default=..., description="The amount_atom of all discount.")
    discounts: conlist(StrictStr) = Field(default=..., description="The discounts only directly applied to the InvoiceItem.")
    id: StrictStr = Field(default=..., description="Unique identifier of the invoice_item.")
    invoice_id: Optional[StrictStr] = Field(...)
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    name: StrictStr = Field(default=..., description="Name of the invoice_item.")
    object: Optional[ObjectName] = None
    period_end: datetime = Field(default=..., description="End of the usage period of the invoice_item. It is in 'ISO 8601' format.")
    period_start: datetime = Field(default=..., description="Start of the usage period of the invoice_item. It is in 'ISO 8601' format.")
    price_id: StrictStr = Field(default=..., description="Unique identifier of the price.")
    price_type: PriceTypeEnum = Field(default=..., description="Type of the price.")
    product_id: StrictStr = Field(default=..., description="Unique identifier of the product.")
    proration: StrictBool = Field(default=..., description="Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.")
    proration_details_debit_invoice_item: Optional[StrictStr] = Field(...)
    quantity: StrictInt = Field(default=..., description="Quantity of the invoice_item.")
    subscription_cancelled_at: Optional[datetime] = None
    subscription_id: Optional[StrictStr] = Field(...)
    subscription_item_description: Optional[StrictStr] = None
    subscription_item_id: Optional[StrictStr] = None
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["account_id", "amount_atom", "amount_atom_considering_discount_applied", "created_at", "currency", "customer_id", "description", "discount_amount_atoms", "discounts", "id", "invoice_id", "is_deleted", "name", "object", "period_end", "period_start", "price_id", "price_type", "product_id", "proration", "proration_details_debit_invoice_item", "quantity", "subscription_cancelled_at", "subscription_id", "subscription_item_description", "subscription_item_id", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceItemExternal:
        """Create an instance of InvoiceItemExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in discount_amount_atoms (list)
        _items = []
        if self.discount_amount_atoms:
            for _item in self.discount_amount_atoms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discount_amount_atoms'] = _items
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if invoice_id (nullable) is None
        # and __fields_set__ contains the field
        if self.invoice_id is None and "invoice_id" in self.__fields_set__:
            _dict['invoice_id'] = None

        # set to None if proration_details_debit_invoice_item (nullable) is None
        # and __fields_set__ contains the field
        if self.proration_details_debit_invoice_item is None and "proration_details_debit_invoice_item" in self.__fields_set__:
            _dict['proration_details_debit_invoice_item'] = None

        # set to None if subscription_cancelled_at (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_cancelled_at is None and "subscription_cancelled_at" in self.__fields_set__:
            _dict['subscription_cancelled_at'] = None

        # set to None if subscription_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_id is None and "subscription_id" in self.__fields_set__:
            _dict['subscription_id'] = None

        # set to None if subscription_item_description (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_item_description is None and "subscription_item_description" in self.__fields_set__:
            _dict['subscription_item_description'] = None

        # set to None if subscription_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_item_id is None and "subscription_item_id" in self.__fields_set__:
            _dict['subscription_item_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceItemExternal:
        """Create an instance of InvoiceItemExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceItemExternal.parse_obj(obj)

        _obj = InvoiceItemExternal.parse_obj({
            "account_id": obj.get("account_id"),
            "amount_atom": obj.get("amount_atom"),
            "amount_atom_considering_discount_applied": obj.get("amount_atom_considering_discount_applied"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description"),
            "discount_amount_atoms": [InvoiceItemDiscountAmountsExternal.from_dict(_item) for _item in obj.get("discount_amount_atoms")] if obj.get("discount_amount_atoms") is not None else None,
            "discounts": obj.get("discounts"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "name": obj.get("name"),
            "object": obj.get("object"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "price_id": obj.get("price_id"),
            "price_type": obj.get("price_type"),
            "product_id": obj.get("product_id"),
            "proration": obj.get("proration"),
            "proration_details_debit_invoice_item": obj.get("proration_details_debit_invoice_item"),
            "quantity": obj.get("quantity"),
            "subscription_cancelled_at": obj.get("subscription_cancelled_at"),
            "subscription_id": obj.get("subscription_id"),
            "subscription_item_description": obj.get("subscription_item_description"),
            "subscription_item_id": obj.get("subscription_item_id"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


