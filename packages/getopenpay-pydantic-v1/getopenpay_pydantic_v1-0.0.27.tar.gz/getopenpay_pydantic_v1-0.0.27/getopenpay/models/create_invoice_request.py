# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.collection_method_enum import CollectionMethodEnum
from getopenpay.models.invoice_type import InvoiceType
from getopenpay.models.selected_price_quantity import SelectedPriceQuantity

class CreateInvoiceRequest(BaseModel):
    """
    CreateInvoiceRequest
    """
    collection_method: Optional[CollectionMethodEnum] = None
    coupon_id: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: StrictStr = Field(default=..., description="The external id of the customer.")
    description: Optional[StrictStr] = Field(default='Manual creation of invoice', description="Description for newly created invoice")
    email_invoice_on_finalization: Optional[StrictBool] = None
    finalize_invoice_immediately: Optional[StrictBool] = None
    invoice_type: Optional[InvoiceType] = Field(default=None, description="The type of invoice to create. Choose standard to create the subscription based invoice and one_off to create the one-off invoices.")
    is_preview: Optional[StrictBool] = Field(default=False, description="Whether the request is in preview mode (Invoice won't actually be created)")
    net_d: Optional[StrictInt] = None
    payment_method_id: Optional[StrictStr] = None
    selected_product_price_quantity: Optional[conlist(SelectedPriceQuantity)] = Field(default=None, description="This object contains details of selected product' price and quantity.")
    subscription_id: Optional[StrictStr] = None
    __properties = ["collection_method", "coupon_id", "custom_fields", "customer_id", "description", "email_invoice_on_finalization", "finalize_invoice_immediately", "invoice_type", "is_preview", "net_d", "payment_method_id", "selected_product_price_quantity", "subscription_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateInvoiceRequest:
        """Create an instance of CreateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in selected_product_price_quantity (list)
        _items = []
        if self.selected_product_price_quantity:
            for _item in self.selected_product_price_quantity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selected_product_price_quantity'] = _items
        # set to None if collection_method (nullable) is None
        # and __fields_set__ contains the field
        if self.collection_method is None and "collection_method" in self.__fields_set__:
            _dict['collection_method'] = None

        # set to None if coupon_id (nullable) is None
        # and __fields_set__ contains the field
        if self.coupon_id is None and "coupon_id" in self.__fields_set__:
            _dict['coupon_id'] = None

        # set to None if custom_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_fields is None and "custom_fields" in self.__fields_set__:
            _dict['custom_fields'] = None

        # set to None if email_invoice_on_finalization (nullable) is None
        # and __fields_set__ contains the field
        if self.email_invoice_on_finalization is None and "email_invoice_on_finalization" in self.__fields_set__:
            _dict['email_invoice_on_finalization'] = None

        # set to None if finalize_invoice_immediately (nullable) is None
        # and __fields_set__ contains the field
        if self.finalize_invoice_immediately is None and "finalize_invoice_immediately" in self.__fields_set__:
            _dict['finalize_invoice_immediately'] = None

        # set to None if net_d (nullable) is None
        # and __fields_set__ contains the field
        if self.net_d is None and "net_d" in self.__fields_set__:
            _dict['net_d'] = None

        # set to None if payment_method_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_method_id is None and "payment_method_id" in self.__fields_set__:
            _dict['payment_method_id'] = None

        # set to None if subscription_id (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_id is None and "subscription_id" in self.__fields_set__:
            _dict['subscription_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateInvoiceRequest:
        """Create an instance of CreateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateInvoiceRequest.parse_obj(obj)

        _obj = CreateInvoiceRequest.parse_obj({
            "collection_method": obj.get("collection_method"),
            "coupon_id": obj.get("coupon_id"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description") if obj.get("description") is not None else 'Manual creation of invoice',
            "email_invoice_on_finalization": obj.get("email_invoice_on_finalization"),
            "finalize_invoice_immediately": obj.get("finalize_invoice_immediately"),
            "invoice_type": obj.get("invoice_type"),
            "is_preview": obj.get("is_preview") if obj.get("is_preview") is not None else False,
            "net_d": obj.get("net_d"),
            "payment_method_id": obj.get("payment_method_id"),
            "selected_product_price_quantity": [SelectedPriceQuantity.from_dict(_item) for _item in obj.get("selected_product_price_quantity")] if obj.get("selected_product_price_quantity") is not None else None,
            "subscription_id": obj.get("subscription_id")
        })
        return _obj


