# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel, Field, StrictStr
from getopenpay.models.tax_integration_api_name import TaxIntegrationApiName

class CreateTaxIntegrationRequest(BaseModel):
    """
    CreateTaxIntegrationRequest
    """
    accounting_tz: StrictStr = Field(default=..., description="The timezone name for the accounting timezone (see pytz.all_timezones for a full list)")
    api_keys: Dict[str, StrictStr] = Field(default=..., description="These keys will allow to authenticate API requests to the tax processor.")
    api_name: TaxIntegrationApiName = Field(default=..., description="The name of the API used for the tax integration.")
    __properties = ["accounting_tz", "api_keys", "api_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateTaxIntegrationRequest:
        """Create an instance of CreateTaxIntegrationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateTaxIntegrationRequest:
        """Create an instance of CreateTaxIntegrationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateTaxIntegrationRequest.parse_obj(obj)

        _obj = CreateTaxIntegrationRequest.parse_obj({
            "accounting_tz": obj.get("accounting_tz"),
            "api_keys": obj.get("api_keys"),
            "api_name": obj.get("api_name")
        })
        return _obj


