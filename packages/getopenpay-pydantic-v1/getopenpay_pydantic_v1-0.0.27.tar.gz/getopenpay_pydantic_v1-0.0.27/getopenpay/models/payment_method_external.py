# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from getopenpay.models.complete_address import CompleteAddress
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_method_mapping_external import PaymentMethodMappingExternal
from getopenpay.models.payment_provider_type import PaymentProviderType

class PaymentMethodExternal(BaseModel):
    """
    PaymentMethodExternal
    """
    billing_address: Optional[CompleteAddress] = None
    card_brand: Optional[StrictStr] = None
    card_type: Optional[StrictStr] = None
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    customer_id: Optional[StrictStr] = None
    display_name: StrictStr = Field(default=..., description="Display name for the payment method to show on the UI.")
    id: StrictStr = Field(default=..., description="Unique Identifier of the payment_method.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    last_four: Optional[StrictStr] = None
    mappings: Optional[conlist(PaymentMethodMappingExternal)] = Field(default=None, description="List of payment method mappings associated with this payment method. Include \"mappings\" in the expand parameter to retrieve this data.")
    metadata: Optional[Dict[str, Any]] = None
    object: Optional[ObjectName] = None
    provider: PaymentProviderType = Field(default=..., description="The provider type for this payment method")
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["billing_address", "card_brand", "card_type", "created_at", "customer_id", "display_name", "id", "is_deleted", "last_four", "mappings", "metadata", "object", "provider", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodExternal:
        """Create an instance of PaymentMethodExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mappings (list)
        _items = []
        if self.mappings:
            for _item in self.mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mappings'] = _items
        # set to None if billing_address (nullable) is None
        # and __fields_set__ contains the field
        if self.billing_address is None and "billing_address" in self.__fields_set__:
            _dict['billing_address'] = None

        # set to None if card_brand (nullable) is None
        # and __fields_set__ contains the field
        if self.card_brand is None and "card_brand" in self.__fields_set__:
            _dict['card_brand'] = None

        # set to None if card_type (nullable) is None
        # and __fields_set__ contains the field
        if self.card_type is None and "card_type" in self.__fields_set__:
            _dict['card_type'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if last_four (nullable) is None
        # and __fields_set__ contains the field
        if self.last_four is None and "last_four" in self.__fields_set__:
            _dict['last_four'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodExternal:
        """Create an instance of PaymentMethodExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodExternal.parse_obj(obj)

        _obj = PaymentMethodExternal.parse_obj({
            "billing_address": CompleteAddress.from_dict(obj.get("billing_address")) if obj.get("billing_address") is not None else None,
            "card_brand": obj.get("card_brand"),
            "card_type": obj.get("card_type"),
            "created_at": obj.get("created_at"),
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "id": obj.get("id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "last_four": obj.get("last_four"),
            "mappings": [PaymentMethodMappingExternal.from_dict(_item) for _item in obj.get("mappings")] if obj.get("mappings") is not None else None,
            "metadata": obj.get("metadata"),
            "object": obj.get("object"),
            "provider": obj.get("provider"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


