# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class PriceTierParams(BaseModel):
    """
    PriceTierParams
    """
    flat_amount_atom: Optional[StrictInt] = None
    unit_amount_atom: StrictInt = Field(default=..., description="The price for the unit in the smallest denomination.It is in atomic units (in USD this is cents).")
    units_from: StrictInt = Field(default=..., description="The starting unit for the price tier.")
    units_upto: Optional[StrictInt] = None
    __properties = ["flat_amount_atom", "unit_amount_atom", "units_from", "units_upto"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceTierParams:
        """Create an instance of PriceTierParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if flat_amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.flat_amount_atom is None and "flat_amount_atom" in self.__fields_set__:
            _dict['flat_amount_atom'] = None

        # set to None if units_upto (nullable) is None
        # and __fields_set__ contains the field
        if self.units_upto is None and "units_upto" in self.__fields_set__:
            _dict['units_upto'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceTierParams:
        """Create an instance of PriceTierParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceTierParams.parse_obj(obj)

        _obj = PriceTierParams.parse_obj({
            "flat_amount_atom": obj.get("flat_amount_atom"),
            "unit_amount_atom": obj.get("unit_amount_atom"),
            "units_from": obj.get("units_from"),
            "units_upto": obj.get("units_upto")
        })
        return _obj


