# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from getopenpay.models.credit_note_item_external import CreditNoteItemExternal
from getopenpay.models.credit_note_reason import CreditNoteReason
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName

class CreditNoteExternal(BaseModel):
    """
    CreditNoteExternal
    """
    created_at: datetime = Field(default=..., description="DateTime at which the object was created, in 'ISO 8601' format.")
    credit_amount_atom: StrictInt = Field(default=..., description="The integer amount representing the amount to credit the customerâ€™s balance, which will be automatically applied to their next invoice. It is in atomic units (in USD this is cents).")
    currency: CurrencyEnum = Field(default=..., description="Three-letter ISO currency code, in lowercase.")
    id: StrictStr = Field(default=..., description="Unique Identifier of the credit_note.")
    invoice_id: StrictStr = Field(default=..., description="Unique ID of the invoice.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    items: conlist(CreditNoteItemExternal) = Field(default=..., description="List of credit_note_items.")
    object: Optional[ObjectName] = None
    reason: Optional[CreditNoteReason] = Field(...)
    refund_amount_atom: StrictInt = Field(default=..., description="The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. It is in atomic units (in USD this is cents).")
    total_amount_atom: StrictInt = Field(default=..., description="The integer amount representing the total amount of the credit note. It is in atomic units (in USD this is cents).")
    updated_at: datetime = Field(default=..., description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties = ["created_at", "credit_amount_atom", "currency", "id", "invoice_id", "is_deleted", "items", "object", "reason", "refund_amount_atom", "total_amount_atom", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreditNoteExternal:
        """Create an instance of CreditNoteExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # set to None if reason (nullable) is None
        # and __fields_set__ contains the field
        if self.reason is None and "reason" in self.__fields_set__:
            _dict['reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreditNoteExternal:
        """Create an instance of CreditNoteExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreditNoteExternal.parse_obj(obj)

        _obj = CreditNoteExternal.parse_obj({
            "created_at": obj.get("created_at"),
            "credit_amount_atom": obj.get("credit_amount_atom"),
            "currency": obj.get("currency"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "items": [CreditNoteItemExternal.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "object": obj.get("object"),
            "reason": obj.get("reason"),
            "refund_amount_atom": obj.get("refund_amount_atom"),
            "total_amount_atom": obj.get("total_amount_atom"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


