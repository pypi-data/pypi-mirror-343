# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from getopenpay.models.payment_provider_type import PaymentProviderType

class CheckoutProcessorsPreferences(BaseModel):
    """
    Allows customization of which payment processors are available during each checkout session.  # noqa: E501
    """
    filter_providers: Optional[conlist(PaymentProviderType)] = Field(default=None, description="If not empty, the enabled providers will be filtered by this list.")
    ids_whitelist: Optional[conlist(StrictStr)] = Field(default=None, description="If not empty, only the processors with these ids will be accepted.")
    names_whitelist: Optional[conlist(StrictStr)] = Field(default=None, description="If not empty, only the processors with these names will be accepted. Valid values are: adyen, airwallex, authorize_net, checkout_com, braintree, stripe, foobar, pockyt, cybersource, loop.")
    __properties = ["filter_providers", "ids_whitelist", "names_whitelist"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckoutProcessorsPreferences:
        """Create an instance of CheckoutProcessorsPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckoutProcessorsPreferences:
        """Create an instance of CheckoutProcessorsPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckoutProcessorsPreferences.parse_obj(obj)

        _obj = CheckoutProcessorsPreferences.parse_obj({
            "filter_providers": obj.get("filter_providers"),
            "ids_whitelist": obj.get("ids_whitelist"),
            "names_whitelist": obj.get("names_whitelist")
        })
        return _obj


