# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from getopenpay.models.non_pci_integration_configuration_inner import NonPciIntegrationConfigurationInner
from getopenpay.models.non_pci_integration_enum import NonPciIntegrationEnum

class NonPciIntegration(BaseModel):
    """
    NonPciIntegration
    """
    account_id: StrictStr = Field(default=..., description="The account ID")
    configuration: Optional[conlist(NonPciIntegrationConfigurationInner)] = Field(default=None, description="The configuration fields")
    integration_id: StrictStr = Field(default=..., description="The integration ID")
    integration_type: NonPciIntegrationEnum = Field(default=..., description="The integration type")
    __properties = ["account_id", "configuration", "integration_id", "integration_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NonPciIntegration:
        """Create an instance of NonPciIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NonPciIntegration:
        """Create an instance of NonPciIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NonPciIntegration.parse_obj(obj)

        _obj = NonPciIntegration.parse_obj({
            "account_id": obj.get("account_id"),
            "configuration": [NonPciIntegrationConfigurationInner.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None,
            "integration_id": obj.get("integration_id"),
            "integration_type": obj.get("integration_type")
        })
        return _obj


