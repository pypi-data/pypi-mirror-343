# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from getopenpay.models.proration_enum import ProrationEnum

class SubscriptionResumeRequest(BaseModel):
    """
    SubscriptionResumeRequest
    """
    is_preview: Optional[StrictBool] = Field(default=False, description="Whether the request is in preview mode (subscriptions won't actually be resumed)")
    proration_behavior: Optional[ProrationEnum] = Field(default=None, description="Determines how to handle prorations when the subscription is resumed.")
    __properties = ["is_preview", "proration_behavior"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionResumeRequest:
        """Create an instance of SubscriptionResumeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionResumeRequest:
        """Create an instance of SubscriptionResumeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionResumeRequest.parse_obj(obj)

        _obj = SubscriptionResumeRequest.parse_obj({
            "is_preview": obj.get("is_preview") if obj.get("is_preview") is not None else False,
            "proration_behavior": obj.get("proration_behavior")
        })
        return _obj


