# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr

class MerchantTaxIdSetting(BaseModel):
    """
    MerchantTaxIdSetting
    """
    is_default: StrictBool = Field(default=..., description="Whether this tax ID is the default for the country")
    tax_id: StrictStr = Field(default=..., description="The tax ID value")
    tax_id_type: StrictStr = Field(default=..., description="The type code for this tax ID")
    __properties = ["is_default", "tax_id", "tax_id_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MerchantTaxIdSetting:
        """Create an instance of MerchantTaxIdSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MerchantTaxIdSetting:
        """Create an instance of MerchantTaxIdSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MerchantTaxIdSetting.parse_obj(obj)

        _obj = MerchantTaxIdSetting.parse_obj({
            "is_default": obj.get("is_default"),
            "tax_id": obj.get("tax_id"),
            "tax_id_type": obj.get("tax_id_type")
        })
        return _obj


