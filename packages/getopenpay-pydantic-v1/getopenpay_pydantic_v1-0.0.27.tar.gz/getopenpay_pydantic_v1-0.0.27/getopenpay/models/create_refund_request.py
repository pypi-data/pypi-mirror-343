# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.refund_reason_enum import RefundReasonEnum

class CreateRefundRequest(BaseModel):
    """
    CreateRefundRequest
    """
    amount_atom: Optional[StrictInt] = None
    charge_id: Optional[StrictStr] = None
    currency: Optional[CurrencyEnum] = Field(default=None, description="Three-letter ISO currency code, in lowercase.")
    description: Optional[StrictStr] = Field(default='Manually triggered refund by admin.', description="Description of the refund.")
    payment_intent_id: Optional[StrictStr] = None
    reason: Optional[RefundReasonEnum] = Field(default=None, description="Reason of the refund.")
    __properties = ["amount_atom", "charge_id", "currency", "description", "payment_intent_id", "reason"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateRefundRequest:
        """Create an instance of CreateRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if amount_atom (nullable) is None
        # and __fields_set__ contains the field
        if self.amount_atom is None and "amount_atom" in self.__fields_set__:
            _dict['amount_atom'] = None

        # set to None if charge_id (nullable) is None
        # and __fields_set__ contains the field
        if self.charge_id is None and "charge_id" in self.__fields_set__:
            _dict['charge_id'] = None

        # set to None if payment_intent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.payment_intent_id is None and "payment_intent_id" in self.__fields_set__:
            _dict['payment_intent_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRefundRequest:
        """Create an instance of CreateRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateRefundRequest.parse_obj(obj)

        _obj = CreateRefundRequest.parse_obj({
            "amount_atom": obj.get("amount_atom"),
            "charge_id": obj.get("charge_id"),
            "currency": obj.get("currency"),
            "description": obj.get("description") if obj.get("description") is not None else 'Manually triggered refund by admin.',
            "payment_intent_id": obj.get("payment_intent_id"),
            "reason": obj.get("reason")
        })
        return _obj


