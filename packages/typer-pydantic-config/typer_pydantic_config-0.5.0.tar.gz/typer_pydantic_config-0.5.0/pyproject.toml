[project]
name = "typer-pydantic-config"
version = "0.5.0"
description = "Use [pydantic](https://docs.pydantic.dev/latest/) to manage persistent config for your [Typer](https://typer.tiangolo.com/) CLI apps!"
authors = [{ name="David Fischer", email="d.fischer.git@posteo.de"}]
readme = "README.md"
license = "MIT"
license_files = ["LICEN[CS]E*"]
requires-python = ">=3.12"
keywords = ["python", "typer", "pydantic", "config", "CLI"]
classifiers = []
dependencies = [
    "platformdirs>=4.3.7",
    "pydantic>=2.10.6",
    "toml>=0.10.2",
    "typer>=0.15.1",
]

[project.urls]
Homepage = "https://github.com/david-fischer/typer-pydantic-config"
Repository = "https://github.com/david-fischer/typer-pydantic-config.git"
Issues = "https://github.com/david-fischer/typer-pydantic-config/issues"
Changelog = "https://github.com/david-fischer/typer-pydantic-config/blob/master/CHANGELOG.md"

[dependency-groups]
dev = [
    "ruff>=0.11.2",
    "pre-commit>=4.1.0",
    "pytest>=8.3.5",
    "syrupy>=4.9.1",
    "inline-snapshot>=0.22.3",
]

[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.sdist]
exclude = [
    "src/examples",
    "src/tests"
]
include = [
    "src/**",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "uv.lock",
    "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/typer_pydantic_config"]

[tool.uv]
required-version = ">=0.6.0"


[tool.ruff.lint]
preview=true
extend-select=[
    "A",      #flake8-builtins
    "AIR",    #Airflow
    "ANN",    #flake8-annotations
    "ARG",    #flake8-unused-arguments
    "ASYNC",  #flake8-async
    "B",      #flake8-bugbear
    "BLE",    #flake8-blind-except
    "C4",     #flake8-comprehensions
#    "C90",    #mccabe
#    "COM",    #flake8-commas
#    "CPY",    #flake8-copyright
    "D",      #pydocstyle
    "DOC",
    "DJ",     #flake8-django
#    "DOC",     #pydoclint
#    "DTZ",    #flake8-datetimez
    "E",
    "EM",     #flake8-errmsg
    "ERA",    #eradicate
#    "EXE",    #flake8-executable
    "F",      #Pyflakes
    "FA",     #flake8-future-annotations
    "FAST",      # FastAPI
#    "FBT",    #flake8-boolean-trap
#    "FIX",    #flake8-fixme
    "FLY",    # flynt
    "FLY",    #flynt
    "FURB",   #refurb
#    "G",      #flake8-logging-format
    "I",      #isort
    "ICN",    #flake8-import-conventions
    "INP",    #flake8-no-pep420
    "INT",    #flake8-gettext
    "ISC",    #flake8-implicit-str-concat
    "LOG",    #flake8-logging
    "N",      #pep8-naming
    "NPY",    #NumPy-specific rules
    "PD",     #pandas-vet
    "PERF",   #Perflint
    "PGH",    #pygrep-hooks
    "PIE",    #flake8-pie
    "PL",     #Pylint
    "PT",     #flake8-pytest-style
    "PTH",    #flake8-use-pathlib
#    "PYI",    #flake8-pyi
    "Q",      #flake8-quotes
    "RET",    #flake8-return
    "RSE",    #flake8-raise
    "RUF",    #Ruff-specific rules
#    "S",      #flake8-bandit
    "SIM",    #flake8-simplify
    "SLF",    #flake8-self
#    "SLOT",   #flake8-slots
#    "T10",    #flake8-debugger
#    "T20",    #flake8-print
    "TCH",    #flake8-type-checking
    "TD",     #flake8-todos
    "TID",    #flake8-tidy-imports
    "TRY",    #tryceratops
    "UP",     #pyupgrade
    "W",      #pycodestyle
#    "YTT",    #flake8-2020
]

ignore = [
    "ANN401",       # Using Any-type should be allowed
    "ISC001",       # Incompatible with formatter
    "D",            # No docstrings required for this project.
    "TD003",        # No links for TODOs.
    "DOC201",       # No mandatory Returns section in docstrings.
    "FURB140",      # prefer list comps
]

[tool.ruff]

[tool.ruff.lint.pycodestyle]
max-line-length = 100
max-doc-length = 100

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath="src"
