# cthulhucrypt/core.py
import math
from typing import List, Dict

TABLES: List[Dict[str, str]] = [
    {'!': 'n', '"': '[', '#': 'E', '$': 'Z', '%': 'b', '&': 'r', "'": 'Q', '(': 'e', ')': 'L', '*': "'", '+': 'w', ',': 'g', '-': 'h', '.': '2', '/': '+', '0': 'X', '1': 'D', '2': '"', '3': 'v', '4': 'f', '5': '}', '6': 'H', '7': 'K', '8': 'F', '9': '@', ':': 'P', ';': 'V', '<': 'c', '=': '#', '>': '&', '?': ':', '@': '3', 'A': 'm', 'B': '?', 'C': '8', 'D': 'B', 'E': 'x', 'F': 'u', 'G': '4', 'H': 'a', 'I': 'S', 'J': 'M', 'K': 'j', 'L': ';', 'M': 't', 'N': 'W', 'O': 'C', 'P': 'I', 'Q': '=', 'R': 'O', 'S': '/', 'T': '~', 'U': 'U', 'V': '^', 'W': 'o', 'X': '<', 'Y': '(', 'Z': 'Y', '[': ')', '\\': 'N', ']': '*', '^': 'k', '_': 'q', '`': 'i', 'a': ']', 'b': 's', 'c': '9', 'd': 'G', 'e': 'p', 'f': '0', 'g': ',', 'h': '_', 'i': 'J', 'j': '5', 'k': '!', 'l': 'T', 'm': '{', 'n': '7', 'o': 'y', 'p': '>', 'q': '6', 'r': '`', 's': '%', 't': '-', 'u': 'A', 'v': '$', 'w': 'l', 'x': '|', 'y': 'R', 'z': 'z', '{': '\\', '|': 'd', '}': '1', '~': '.'},
    {'!': 's', '"': 'Q', '#': '`', '$': 'z', '%': '6', '&': '"', "'": 'R', '(': '.', ')': 'C', '*': '\\', '+': 'F', ',': ')', '-': 'P', '.': 'e', '/': 'S', '0': '4', '1': 'G', '2': 'B', '3': 'h', '4': '$', '5': '&', '6': 'r', '7': 'A', '8': 'N', '9': 'w', ':': '[', ';': '0', '<': 'O', '=': 'D', '>': 'U', '?': 'K', '@': 'y', 'A': '}', 'B': 'f', 'C': 'd', 'D': 't', 'E': 'H', 'F': '3', 'G': '^', 'H': 'k', 'I': 'Z', 'J': 'l', 'K': '+', 'L': 'g', 'M': '=', 'N': 'E', 'O': 'b', 'P': '7', 'Q': 'j', 'R': ']', 'S': '*', 'T': 'n', 'U': 'm', 'V': '!', 'W': 'J', 'X': '~', 'Y': 'u', 'Z': 'p', '[': '8', '\\': 'o', ']': 'q', '^': 'a', '_': '5', '`': 'L', 'a': '-', 'b': '9', 'c': 'W', 'd': 'i', 'e': '?', 'f': '_', 'g': 'v', 'h': 'x', 'i': 'T', 'j': ',', 'k': ';', 'l': '|', 'm': '(', 'n': 'V', 'o': '%', 'p': '>', 'q': '1', 'r': '2', 's': 'X', 't': 'M', 'u': "'", 'v': '#', 'w': '{', 'x': 'c', 'y': 'Y', 'z': '@', '{': ':', '|': '<', '}': '/', '~': 'I'},
    {'!': '1', '"': 'e', '#': 'u', '$': '.', '%': 'Z', '&': 'C', "'": '2', '(': 'r', ')': 'P', '*': 'g', '+': 'I', ',': 'M', '-': 'h', '.': 'K', '/': '%', '0': '|', '1': 'H', '2': ')', '3': 'i', '4': 'c', '5': 'm', '6': 'N', '7': 'd', '8': 'L', '9': '(', ':': 'B', ';': '-', '<': 'f', '=': '8', '>': '=', '?': 'S', '@': '/', 'A': '~', 'B': 'R', 'C': '7', 'D': '{', 'E': 'v', 'F': ':', 'G': 'p', 'H': 'T', 'I': 'n', 'J': '9', 'K': 'Y', 'L': 'k', 'M': ';', 'N': 'Q', 'O': 'w', 'P': '*', 'Q': '\\', 'R': '>', 'S': '6', 'T': '!', 'U': '[', 'V': '+', 'W': 'F', 'X': '"', 'Y': '@', 'Z': 'q', '[': '`', '\\': 's', ']': 'l', '^': 'b', '_': 'a', '`': 'A', 'a': 'j', 'b': 'E', 'c': ']', 'd': 'O', 'e': '5', 'f': 'G', 'g': '&', 'h': '<', 'i': 't', 'j': '3', 'k': 'y', 'l': 'V', 'm': 'z', 'n': 'D', 'o': 'o', 'p': '_', 'q': '0', 'r': "'", 's': '$', 't': 'U', 'u': 'X', 'v': 'x', 'w': '^', 'x': '?', 'y': 'J', 'z': '}', '{': '#', '|': 'W', '}': ',', '~': '4'},
    {'!': 'U', '"': 'M', '#': 'D', '$': 'e', '%': '&', '&': 'B', "'": ']', '(': 'F', ')': 'A', '*': '<', '+': ')', ',': 'W', '-': 'E', '.': 'X', '/': 'd', '0': 'z', '1': 's', '2': '>', '3': '^', '4': 'J', '5': "'", '6': '}', '7': 'V', '8': 'O', '9': 'Z', ':': 't', ';': 'n', '<': '"', '=': '2', '>': '+', '?': '8', '@': '5', 'A': 'l', 'B': '~', 'C': 'p', 'D': '-', 'E': '.', 'F': 'N', 'G': 'h', 'H': '@', 'I': 'L', 'J': 'S', 'K': '0', 'L': ':', 'M': 'G', 'N': ',', 'O': 'C', 'P': 'T', 'Q': 'Y', 'R': '`', 'S': '4', 'T': 'K', 'U': '9', 'V': '7', 'W': 'j', 'X': 'H', 'Y': '$', 'Z': 'm', '[': '%', '\\': '3', ']': '(', '^': 'i', '_': '/', '`': '?', 'a': '{', 'b': 'g', 'c': '!', 'd': 'k', 'e': '|', 'f': '1', 'g': '=', 'h': 'y', 'i': 'o', 'j': 'I', 'k': '6', 'l': 'v', 'm': 'b', 'n': 'w', 'o': 'a', 'p': 'R', 'q': '\\', 'r': 'Q', 's': '*', 't': 'u', 'u': 'c', 'v': '_', 'w': '[', 'x': '#', 'y': 'x', 'z': 'q', '{': ';', '|': 'f', '}': 'r', '~': 'P'},
    {'!': 'z', '"': 'A', '#': '1', '$': "'", '%': '0', '&': 'I', "'": '/', '(': 'G', ')': '|', '*': '3', '+': '4', ',': ';', '-': '#', '.': 'P', '/': 'W', '0': '8', '1': 'u', '2': 'O', '3': 'R', '4': 'v', '5': '%', '6': 'k', '7': '`', '8': '}', '9': 'c', ':': ',', ';': '<', '<': 'w', '=': 'S', '>': 'Y', '?': 'j', '@': 'D', 'A': 'y', 'B': 'F', 'C': '-', 'D': 'V', 'E': '6', 'F': '@', 'G': '&', 'H': 'n', 'I': 'E', 'J': 'g', 'K': 'h', 'L': '~', 'M': '\\', 'N': ']', 'O': '9', 'P': 'Z', 'Q': '+', 'R': 'M', 'S': 'x', 'T': 'N', 'U': 'T', 'V': 'H', 'W': 'J', 'X': '=', 'Y': 'C', 'Z': '{', '[': 'f', '\\': ')', ']': 'B', '^': 'p', '_': '?', '`': '_', 'a': 'Q', 'b': ':', 'c': '5', 'd': '>', 'e': '!', 'f': 'X', 'g': 'K', 'h': 'U', 'i': 'm', 'j': 't', 'k': 'o', 'l': '[', 'm': '2', 'n': '$', 'o': '.', 'p': 'b', 'q': 'q', 'r': 'd', 's': 'e', 't': 's', 'u': '7', 'v': 'r', 'w': 'L', 'x': 'l', 'y': 'a', 'z': '"', '{': '*', '|': '(', '}': '^', '~': 'i'},
    {'!': 'v', '"': 'h', '#': 'M', '$': 'b', '%': '>', '&': '`', "'": 'm', '(': 'Q', ')': 'U', '*': 'H', '+': 'X', ',': '2', '-': '[', '.': '.', '/': 'q', '0': 'A', '1': 'Y', '2': 'c', '3': '#', '4': 'd', '5': '-', '6': 'f', '7': '7', '8': '?', '9': '8', ':': '0', ';': 'u', '<': '3', '=': 'R', '>': 'J', '?': 'i', '@': 'a', 'A': '9', 'B': 'n', 'C': 'W', 'D': '6', 'E': 'P', 'F': 'r', 'G': 'p', 'H': '!', 'I': '\\', 'J': "'", 'K': 'E', 'L': 'V', 'M': '<', 'N': '_', 'O': '@', 'P': 's', 'Q': 'j', 'R': 'D', 'S': '=', 'T': '1', 'U': ',', 'V': ']', 'W': 'N', 'X': '{', 'Y': 'K', 'Z': 'F', '[': '}', '\\': 'x', ']': '"', '^': 'O', '_': 't', '`': '5', 'a': '|', 'b': '%', 'c': 'S', 'd': ';', 'e': '+', 'f': 'I', 'g': '$', 'h': 'B', 'i': 'g', 'j': '/', 'k': 'z', 'l': '4', 'm': '&', 'n': 'l', 'o': 'e', 'p': 'C', 'q': 'T', 'r': 'k', 's': 'y', 't': 'Z', 'u': '^', 'v': '*', 'w': 'G', 'x': 'L', 'y': 'o', 'z': ':', '{': 'w', '|': ')', '}': '(', '~': '~'},
    {'!': 'd', '"': '"', '#': 'R', '$': 'S', '%': 'I', '&': '{', "'": '>', '(': 'O', ')': 'Q', '*': '^', '+': 'm', ',': '}', '-': '.', '.': '/', '/': 'y', '0': '#', '1': 'x', '2': 't', '3': 'c', '4': 'g', '5': '1', '6': ':', '7': ',', '8': '0', '9': 'B', ':': 'T', ';': '4', '<': '%', '=': 'V', '>': '~', '?': 'p', '@': '=', 'A': ']', 'B': 'o', 'C': 'z', 'D': "'", 'E': 'e', 'F': 'G', 'G': 'Y', 'H': '7', 'I': 'Z', 'J': 'L', 'K': '`', 'L': ';', 'M': '!', 'N': 'H', 'O': '*', 'P': ')', 'Q': '(', 'R': 'j', 'S': 'C', 'T': 's', 'U': 'r', 'V': '-', 'W': 'v', 'X': '|', 'Y': 'A', 'Z': '5', '[': '&', '\\': 'q', ']': '@', '^': 'u', '_': 'K', '`': '9', 'a': '?', 'b': '8', 'c': 'D', 'd': 'W', 'e': 'w', 'f': 'i', 'g': 'F', 'h': 'M', 'i': 'f', 'j': 'h', 'k': 'k', 'l': 'P', 'm': '_', 'n': '6', 'o': '<', 'p': 'a', 'q': '[', 'r': '\\', 's': 'E', 't': 'b', 'u': '$', 'v': '3', 'w': 'n', 'x': 'J', 'y': 'U', 'z': '2', '{': 'N', '|': 'X', '}': 'l', '~': '+'},
    {'!': '4', '"': 'y', '#': 'C', '$': 'f', '%': 'N', '&': 'M', "'": 'G', '(': 'L', ')': '_', '*': '@', '+': 'A', ',': '/', '-': "'", '.': 'i', '/': '<', '0': '"', '1': '-', '2': '#', '3': 'z', '4': '{', '5': 'P', '6': '!', '7': 'b', '8': 'W', '9': 'Y', ':': 'w', ';': '*', '<': 'g', '=': 'X', '>': '%', '?': 'V', '@': '>', 'A': 'I', 'B': 'u', 'C': 'S', 'D': '}', 'E': 'O', 'F': '7', 'G': 'Q', 'H': '(', 'I': '8', 'J': 'H', 'K': 'x', 'L': ';', 'M': ',', 'N': '=', 'O': 's', 'P': '.', 'Q': '&', 'R': '\\', 'S': 'a', 'T': 'd', 'U': 'E', 'V': '$', 'W': 'j', 'X': '5', 'Y': ']', 'Z': '[', '[': '6', '\\': 'm', ']': 'k', '^': '|', '_': 'p', '`': '1', 'a': '3', 'b': '`', 'c': 'c', 'd': 'q', 'e': '2', 'f': 'U', 'g': '9', 'h': ':', 'i': '^', 'j': 'K', 'k': '~', 'l': 'Z', 'm': ')', 'n': 'J', 'o': 'r', 'p': 'n', 'q': 'h', 'r': 'T', 's': 'e', 't': '?', 'u': 'o', 'v': 'F', 'w': 'B', 'x': 'v', 'y': 'l', 'z': 'D', '{': 't', '|': '+', '}': '0', '~': 'R'},
    {'!': ':', '"': 'J', '#': 'v', '$': 'm', '%': 'e', '&': 'g', "'": '|', '(': 'h', ')': 'z', '*': '{', '+': 'a', ',': '!', '-': '-', '.': 'H', '/': 'u', '0': '<', '1': '6', '2': '0', '3': 'B', '4': '`', '5': 'N', '6': '5', '7': '*', '8': 'Y', '9': 'D', ':': 'F', ';': '7', '<': 'r', '=': '}', '>': 'A', '?': 'M', '@': '>', 'A': 'd', 'B': '2', 'C': '$', 'D': '~', 'E': 'U', 'F': '_', 'G': 'C', 'H': 's', 'I': 'V', 'J': '(', 'K': 'q', 'L': 'x', 'M': 'o', 'N': 'Q', 'O': '[', 'P': 'f', 'Q': 'T', 'R': '%', 'S': '\\', 'T': '"', 'U': 'y', 'V': 'S', 'W': "'", 'X': '+', 'Y': '=', 'Z': 'j', '[': '4', '\\': 'E', ']': 'w', '^': 'Z', '_': '&', '`': ',', 'a': 'b', 'b': 'n', 'c': '?', 'd': '.', 'e': 't', 'f': 'K', 'g': 'O', 'h': '@', 'i': '1', 'j': 'p', 'k': '#', 'l': '3', 'm': '/', 'n': 'i', 'o': 'W', 'p': 'G', 'q': '9', 'r': '^', 's': 'l', 't': ';', 'u': 'L', 'v': ']', 'w': 'P', 'x': ')', 'y': 'c', 'z': 'X', '{': 'R', '|': 'I', '}': 'k', '~': '8'},
]

def remove_spaces(text):
    result = ""
    for char in text:
        if char != " ":
            result += char
    return result

def bitwise_xor_transform(text: str) -> str:
    """Applies XOR and bit rotation to each character."""
    result = []
    for i, char in enumerate(text):
        xor_val = ord(char) ^ i ^ int((1 + math.sqrt(5)) * 1000)
        rotated = ((xor_val << (i % 3)) | (xor_val >> (8 - (i % 3)))) & 0xFF
        result.append(chr(rotated))
    return ''.join(result)

def math_chaos(text: str) -> str:
    """Applies chaotic transformations (sin/cos/Collatz)."""
    result = []
    for i, char in enumerate(text):
        val = ord(char)
        chaos = int(math.sin(val * i) * 1000) ^ (val << (i % 4))
        prime_mod = chaos * (i+2) if (i+2) in [2, 3, 5, 7, 11, 13] else chaos
        prime_mod = (prime_mod // 2) if (prime_mod % 2 == 0) else (3 * prime_mod + 1) % 256
        result.append(chr(prime_mod % 256))
    return ''.join(result)

def dynamic_substitute(text: str, tables: List[Dict[str, str]]) -> str:
    """Substitutes characters using dynamically selected tables."""
    if not text:
        return text
    ascii_sum = sum(ord(c) for c in text[:3])
    table_idx = (math.floor(math.sqrt(ascii_sum) * math.pi) + int(math.log(len(text) + 1))) % len(tables)
    return ''.join([tables[table_idx].get(c, c) for c in text])

def character_pairing(text: str) -> List[int]:
    """Converts text pairs into product digits."""
    result = []
    for i in range(0, len(text) - 1, 2):
        a, b = text[i], text[i+1]
        digits = [int(d) for d in str(ord(a) * ord(b))]
        result.extend(digits)
    return result

def super_encrypt(text: str) -> str:
    """Main encryption pipeline: pairs → substitutes → transforms → chaos."""
    paired_digits = character_pairing(text)
    digit_str = ''.join(str(d) for d in paired_digits)
    step1 = dynamic_substitute(digit_str, TABLES)
    step2 = bitwise_xor_transform(step1)
    step3 = math_chaos(step2)
    return remove_spaces(dynamic_substitute(step3, TABLES[::-1]))  # Use reversed tables for final step

def ultra_encrypt(text: str, iterations: int) -> str:
    """Recursively encrypts text N times.
    
    Args:
        text: Input string to encrypt
        iterations: Number of encryption passes (1-10 recommended)
        
    Returns:
        Encrypted string
        
    Raises:
        ValueError: If iterations < 1
    """
    if iterations < 1:
        raise ValueError("Iterations must be ≥ 1")   
    current = text
    for _ in range(iterations):
        paired = character_pairing(current)
        digit_str = ''.join(str(d) for d in paired)
        current = super_encrypt(digit_str)
    return remove_spaces(current)