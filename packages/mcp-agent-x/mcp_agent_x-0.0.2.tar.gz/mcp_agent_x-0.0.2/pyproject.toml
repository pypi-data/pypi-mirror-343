[project]
name = "mcp-agent-x"
version = "0.0.2"
description = "Minimal MCP Agent REPL interface"
readme = "MCPx.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
dependencies = [
    "asyncio>=3.4.3",
    "langchain-google-genai>=2.1.2",
    "langchain-openai>=0.1.20",
    "mcp-use>=1.1.5",
    "python-dotenv>=1.1.0",
    "rich>=13.5.0",
    "prompt_toolkit>=3.0.38",
    "platformdirs>=4.2.0",
    "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.2.0",
]

[project.scripts]
mcpx = "mcpx.cli:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["mcpx"]
package-dir = {"mcpx" = "src"}

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4

[tool.ruff.lint]
extend-select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
ignore = [
    "E501"  # Ignore line length errors - particularly for multiline strings like system prompts
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "*.pyc",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["mcpx"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.package-data]
mcpx = ["defaults/*.json", "defaults/*.md"]
