import numpy as np


DEFAULT_BINS = np.array([2, 2, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 56])
START_BIN = 6
DEFAULT_FS = 17400
DEFAULT_NFFT = 256
FREQ_BIN_SIZE = DEFAULT_FS / DEFAULT_NFFT
ELECTRODE_FREQ_LOWER = FREQ_BIN_SIZE * (
    (START_BIN + np.cumsum(np.r_[0, DEFAULT_BINS[:-1]])) - 1.5
)
ELECTRODE_FREQ_UPPER = FREQ_BIN_SIZE * ((START_BIN + np.cumsum(DEFAULT_BINS) - 1) - 0.5)
ELECTRODE_FREQ_CENTER = FREQ_BIN_SIZE * (
    START_BIN + np.cumsum(np.r_[0, DEFAULT_BINS[:-1]])
)


# 1 x nBin vector of nominal cochlear locations for the center frequencies of each STFT bin
# values from 0 .. 15 in Q9 format -> 9 bit floating point numbers 2^9 = 512
# corresponding to the nominal steering location for each FFT bin
# The values are the nominal locations between electrodes corresponding to the
# center frequency of each FFT bin.
# The locations are distances in mm from the most apical electrode.
# Since electrodes are assumed to be spaced 1mm apart,
# you can also interpret them as “fractional” electrodes indices,
# with 0 being the most apical and 15 the most basal electrode.
# For example, a binToLoc value of 4.5 means that the center freq. of this bin
# is represented 4.5mm away from the most apical electrode,
# or half-way between electrode 4 and 5 using 0-based indices.
# The Frequency Estimator estimates peak frequency as fractional FFT bins indices,
# e.g. a peak could be detected at bin “7.6”.
# The binToLocMap values for bins 7 and 8 are then linearly interpolated to
# get the target location for that fractional peak FFT bin.
DEFAULT_BIN_TO_LOC_MAP = (
    np.concatenate(
        (
            np.zeros(
                6,
            ),
            np.array(
                [
                    256,
                    640,
                    896,
                    1280,
                    1664,
                    1920,
                    2176,
                    2432,
                    2688,
                    2944,
                    3157,
                    3328,
                    3499,
                    3648,
                    3776,
                    3904,
                    4032,
                    4160,
                    4288,
                    4416,
                    4544,
                    4659,
                    4762,
                    4864,
                    4966,
                    5069,
                    5163,
                    5248,
                    5333,
                    5419,
                    5504,
                    5589,
                    5669,
                    5742,
                    5815,
                    5888,
                    5961,
                    6034,
                    6107,
                    6176,
                    6240,
                    6304,
                    6368,
                    6432,
                    6496,
                    6560,
                    6624,
                    6682,
                    6733,
                    6784,
                    6835,
                    6886,
                    6938,
                    6989,
                    7040,
                    7091,
                    7142,
                    7189,
                    7232,
                    7275,
                    7317,
                    7360,
                    7403,
                    7445,
                    7488,
                    7531,
                    7573,
                    7616,
                    7659,
                ]
            ),
            7679 * np.ones((53,)),
        )
    )
    / 512
)


DEFAULT_CHANNEL_ORDER = np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12])


DEFAULT_COEFFS = np.array(
    [
        -19,
        55,
        153,
        277,
        426,
        596,
        784,
        983,
        1189,
        1393,
        1587,
        1763,
        1915,
        2035,
        2118,
        2160,
        2160,
        2118,
        2035,
        1915,
        1763,
        1587,
        1393,
        1189,
        983,
        784,
        596,
        426,
        277,
        153,
        55,
        -19,
    ]
) / (2**16)


def virtual_channel_frequencies(
    n_channels: int, bin_based: bool = True
) -> np.ndarray:
    """Get virtual channel frequencies by interpolation using default electrode frequencies. 
    
    Parameters
    ----------
    n_channels: int
        The number of virtual channels
    
    bin_based: bool = True
        Use DEFAULT_BIN_TO_LOC_MAP to interpolate between the center frequencies 
        of 128 fft bins generated by np.fft.fftfreq
        Otherwise, interpolate between the frequency bin edges.
    """
    if bin_based:
        fft_bin = np.fft.fftfreq(256, 1 / 17400)[:128]
        freq_bin = np.interp(
            np.linspace(0, 15, n_channels), DEFAULT_BIN_TO_LOC_MAP, fft_bin
        )
        return freq_bin

    return np.interp(
        np.linspace(0, 16, n_channels),
        np.arange(16),
        np.r_[ELECTRODE_FREQ_LOWER, ELECTRODE_FREQ_UPPER[-1]],
    )
